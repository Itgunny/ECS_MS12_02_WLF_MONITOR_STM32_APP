###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      07/Apr/2014  17:52:29 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\src\stm32f4xx_cryp_aes.c                     #
#    Command line =  C:\Tools\WL9F\WL_F_Monitor_APP\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\src\stm32f4xx_cryp_aes.c -D                  #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN C:\Tools\WL9F\WL_F_Monitor_APP\P #
#                    roject\Debug\List\ -o C:\Tools\WL9F\WL_F_Monitor_APP\Pro #
#                    ject\Debug\Obj\ --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR            #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Platfo #
#                    rm\COMMON\INC\ -I "C:\Tools\WL9F\WL_F_Monitor_APP\Projec #
#                    t\..\Platform\TaeHa - ECS\INC\" -I                       #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\ -I                        #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\ -Oh --use_c++_inline -I      #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\stm32f #
#                    4xx_cryp_aes.lst                                         #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\stm32f4 #
#                    xx_cryp_aes.o                                            #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_cryp_aes.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_cryp_aes.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    05-March-2012
      7            * @brief   This file provides high level functions to encrypt and decrypt an 
      8            *          input message using AES in ECB/CBC/CTR modes.
      9            *          It uses the stm32f4xx_cryp.c/.h drivers to access the STM32F4xx CRYP
     10            *          peripheral.
     11            *
     12            *  @verbatim
     13            *
     14            *          ===================================================================
     15            *                                   How to use this driver
     16            *          ===================================================================
     17            *          1. Enable The CRYP controller clock using 
     18            *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_CRYP, ENABLE); function.
     19            *
     20            *          2. Encrypt and decrypt using AES in ECB Mode using CRYP_AES_ECB()
     21            *             function.
     22            *
     23            *          3. Encrypt and decrypt using AES in CBC Mode using CRYP_AES_CBC()
     24            *             function.
     25            *
     26            *          4. Encrypt and decrypt using AES in CTR Mode using CRYP_AES_CTR()
     27            *             function.
     28            *
     29            *  @endverbatim
     30            *
     31            ******************************************************************************
     32            * @attention
     33            *
     34            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     35            *
     36            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     37            * You may not use this file except in compliance with the License.
     38            * You may obtain a copy of the License at:
     39            *
     40            *        http://www.st.com/software_license_agreement_liberty_v2
     41            *
     42            * Unless required by applicable law or agreed to in writing, software 
     43            * distributed under the License is distributed on an "AS IS" BASIS, 
     44            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     45            * See the License for the specific language governing permissions and
     46            * limitations under the License.
     47            *
     48            ******************************************************************************
     49            */
     50          
     51          /* Includes ------------------------------------------------------------------*/
     52          #include "stm32f4xx_cryp.h"
     53          
     54          /** @addtogroup STM32F4xx_StdPeriph_Driver
     55            * @{
     56            */
     57          
     58          /** @defgroup CRYP 
     59            * @brief CRYP driver modules
     60            * @{
     61            */
     62          
     63          /* Private typedef -----------------------------------------------------------*/
     64          /* Private define ------------------------------------------------------------*/
     65          #define AESBUSY_TIMEOUT    ((uint32_t) 0x00010000)
     66          
     67          /* Private macro -------------------------------------------------------------*/
     68          /* Private variables ---------------------------------------------------------*/
     69          /* Private function prototypes -----------------------------------------------*/
     70          /* Private functions ---------------------------------------------------------*/
     71          
     72          /** @defgroup CRYP_Private_Functions
     73            * @{
     74            */ 
     75          
     76          /** @defgroup CRYP_Group6 High Level AES functions
     77           *  @brief   High Level AES functions 
     78           *
     79          @verbatim   
     80           ===============================================================================
     81                                    High Level AES functions
     82           ===============================================================================
     83          
     84          
     85          @endverbatim
     86            * @{
     87            */
     88          
     89          /**
     90            * @brief  Encrypt and decrypt using AES in ECB Mode
     91            * @param  Mode: encryption or decryption Mode.
     92            *          This parameter can be one of the following values:
     93            *            @arg MODE_ENCRYPT: Encryption
     94            *            @arg MODE_DECRYPT: Decryption
     95            * @param  Key: Key used for AES algorithm.
     96            * @param  Keysize: length of the Key, must be a 128, 192 or 256.
     97            * @param  Input: pointer to the Input buffer.
     98            * @param  Ilength: length of the Input buffer, must be a multiple of 16.
     99            * @param  Output: pointer to the returned buffer.
    100            * @retval An ErrorStatus enumeration value:
    101            *          - SUCCESS: Operation done
    102            *          - ERROR: Operation failed
    103            */
    104          ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
    105                                   uint8_t* Input, uint32_t Ilength, uint8_t* Output)
    106          {
    107            CRYP_InitTypeDef AES_CRYP_InitStructure;
    108            CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
    109            __IO uint32_t counter = 0;
    110            uint32_t busystatus = 0;
    111            ErrorStatus status = SUCCESS;
    112            uint32_t keyaddr    = (uint32_t)Key;
    113            uint32_t inputaddr  = (uint32_t)Input;
    114            uint32_t outputaddr = (uint32_t)Output;
    115            uint32_t i = 0;
    116          
    117            /* Crypto structures initialisation*/
    118            CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
    119          
    120            switch(Keysize)
    121            {
    122              case 128:
    123              AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
    124              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    125              keyaddr+=4;
    126              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    127              keyaddr+=4;
    128              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    129              keyaddr+=4;
    130              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    131              break;
    132              case 192:
    133              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
    134              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
    135              keyaddr+=4;
    136              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
    137              keyaddr+=4;
    138              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    139              keyaddr+=4;
    140              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    141              keyaddr+=4;
    142              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    143              keyaddr+=4;
    144              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    145              break;
    146              case 256:
    147              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
    148              AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
    149              keyaddr+=4;
    150              AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
    151              keyaddr+=4;
    152              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
    153              keyaddr+=4;
    154              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
    155              keyaddr+=4;
    156              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    157              keyaddr+=4;
    158              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    159              keyaddr+=4;
    160              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    161              keyaddr+=4;
    162              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    163              break;
    164              default:
    165              break;
    166            }
    167          
    168            /*------------------ AES Decryption ------------------*/
    169            if(Mode == MODE_DECRYPT) /* AES decryption */
    170            {
    171              /* Flush IN/OUT FIFOs */
    172              CRYP_FIFOFlush();
    173          
    174              /* Crypto Init for Key preparation for decryption process */
    175              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    176              AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    177              AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    178              CRYP_Init(&AES_CRYP_InitStructure);
    179          
    180              /* Key Initialisation */
    181              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
    182          
    183              /* Enable Crypto processor */
    184              CRYP_Cmd(ENABLE);
    185          
    186              /* wait until the Busy flag is RESET */
    187              do
    188              {
    189                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    190                counter++;
    191              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
    192          
    193              if (busystatus != RESET)
    194             {
    195                 status = ERROR;
    196              }
    197              else
    198              {
    199                /* Crypto Init for decryption process */  
    200                AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    201              }
    202            }
    203            /*------------------ AES Encryption ------------------*/
    204            else /* AES encryption */
    205            {
    206          
    207              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
    208          
    209              /* Crypto Init for Encryption process */
    210              AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
    211            }
    212          
    213            AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
    214            AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
    215            CRYP_Init(&AES_CRYP_InitStructure);
    216          
    217            /* Flush IN/OUT FIFOs */
    218            CRYP_FIFOFlush();
    219          
    220            /* Enable Crypto processor */
    221            CRYP_Cmd(ENABLE);
    222          
    223            for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
    224            {
    225          
    226              /* Write the Input block in the IN FIFO */
    227              CRYP_DataIn(*(uint32_t*)(inputaddr));
    228              inputaddr+=4;
    229              CRYP_DataIn(*(uint32_t*)(inputaddr));
    230              inputaddr+=4;
    231              CRYP_DataIn(*(uint32_t*)(inputaddr));
    232              inputaddr+=4;
    233              CRYP_DataIn(*(uint32_t*)(inputaddr));
    234              inputaddr+=4;
    235          
    236              /* Wait until the complete message has been processed */
    237              counter = 0;
    238              do
    239              {
    240                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    241                counter++;
    242              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
    243          
    244              if (busystatus != RESET)
    245             {
    246                 status = ERROR;
    247              }
    248              else
    249              {
    250          
    251                /* Read the Output block from the Output FIFO */
    252                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    253                outputaddr+=4;
    254                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    255                outputaddr+=4;
    256                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    257                outputaddr+=4;
    258                *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
    259                outputaddr+=4;
    260              }
    261            }
    262          
    263            /* Disable Crypto */
    264            CRYP_Cmd(DISABLE);
    265          
    266            return status; 
    267          }
    268          
    269          /**
    270            * @brief  Encrypt and decrypt using AES in CBC Mode
    271            * @param  Mode: encryption or decryption Mode.
    272            *          This parameter can be one of the following values:
    273            *            @arg MODE_ENCRYPT: Encryption
    274            *            @arg MODE_DECRYPT: Decryption
    275            * @param  InitVectors: Initialisation Vectors used for AES algorithm.
    276            * @param  Key: Key used for AES algorithm.
    277            * @param  Keysize: length of the Key, must be a 128, 192 or 256.
    278            * @param  Input: pointer to the Input buffer.
    279            * @param  Ilength: length of the Input buffer, must be a multiple of 16.
    280            * @param  Output: pointer to the returned buffer.
    281            * @retval An ErrorStatus enumeration value:
    282            *          - SUCCESS: Operation done
    283            *          - ERROR: Operation failed
    284            */
    285          ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
    286                                   uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
    287                                   uint8_t *Output)
    288          {
    289            CRYP_InitTypeDef AES_CRYP_InitStructure;
    290            CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
    291            CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
    292            __IO uint32_t counter = 0;
    293            uint32_t busystatus = 0;
    294            ErrorStatus status = SUCCESS;
    295            uint32_t keyaddr    = (uint32_t)Key;
    296            uint32_t inputaddr  = (uint32_t)Input;
    297            uint32_t outputaddr = (uint32_t)Output;
    298            uint32_t ivaddr     = (uint32_t)InitVectors;
    299            uint32_t i = 0;
    300          
    301            /* Crypto structures initialisation*/
    302            CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
    303          
    304            switch(Keysize)
    305            {
    306              case 128:
    307              AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
    308              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    309              keyaddr+=4;
    310              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    311              keyaddr+=4;
    312              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    313              keyaddr+=4;
    314              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    315              break;
    316              case 192:
    317              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
    318              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
    319              keyaddr+=4;
    320              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
    321              keyaddr+=4;
    322              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    323              keyaddr+=4;
    324              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    325              keyaddr+=4;
    326              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    327              keyaddr+=4;
    328              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    329              break;
    330              case 256:
    331              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
    332              AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
    333              keyaddr+=4;
    334              AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
    335              keyaddr+=4;
    336              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
    337              keyaddr+=4;
    338              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
    339              keyaddr+=4;
    340              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    341              keyaddr+=4;
    342              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    343              keyaddr+=4;
    344              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    345              keyaddr+=4;
    346              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    347              break;
    348              default:
    349              break;
    350            }
    351          
    352            /* CRYP Initialization Vectors */
    353            AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
    354            ivaddr+=4;
    355            AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
    356            ivaddr+=4;
    357            AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
    358            ivaddr+=4;
    359            AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
    360          
    361          
    362            /*------------------ AES Decryption ------------------*/
    363            if(Mode == MODE_DECRYPT) /* AES decryption */
    364            {
    365              /* Flush IN/OUT FIFOs */
    366              CRYP_FIFOFlush();
    367          
    368              /* Crypto Init for Key preparation for decryption process */
    369              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    370              AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
    371              AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
    372          
    373              CRYP_Init(&AES_CRYP_InitStructure);
    374          
    375              /* Key Initialisation */
    376              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
    377          
    378              /* Enable Crypto processor */
    379              CRYP_Cmd(ENABLE);
    380          
    381              /* wait until the Busy flag is RESET */
    382              do
    383              {
    384                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    385                counter++;
    386              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
    387          
    388              if (busystatus != RESET)
    389             {
    390                 status = ERROR;
    391              }
    392              else
    393              {
    394                /* Crypto Init for decryption process */  
    395                AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    396              }
    397            }
    398            /*------------------ AES Encryption ------------------*/
    399            else /* AES encryption */
    400            {
    401              CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
    402          
    403              /* Crypto Init for Encryption process */
    404              AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
    405            }
    406            AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
    407            AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
    408            CRYP_Init(&AES_CRYP_InitStructure);
    409          
    410            /* CRYP Initialization Vectors */
    411            CRYP_IVInit(&AES_CRYP_IVInitStructure);
    412          
    413            /* Flush IN/OUT FIFOs */
    414            CRYP_FIFOFlush();
    415          
    416            /* Enable Crypto processor */
    417            CRYP_Cmd(ENABLE);
    418          
    419          
    420            for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
    421            {
    422          
    423              /* Write the Input block in the IN FIFO */
    424              CRYP_DataIn(*(uint32_t*)(inputaddr));
    425              inputaddr+=4;
    426              CRYP_DataIn(*(uint32_t*)(inputaddr));
    427              inputaddr+=4;
    428              CRYP_DataIn(*(uint32_t*)(inputaddr));
    429              inputaddr+=4;
    430              CRYP_DataIn(*(uint32_t*)(inputaddr));
    431              inputaddr+=4;
    432              /* Wait until the complete message has been processed */
    433              counter = 0;
    434              do
    435              {
    436                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    437                counter++;
    438              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
    439          
    440              if (busystatus != RESET)
    441             {
    442                 status = ERROR;
    443              }
    444              else
    445              {
    446          
    447                /* Read the Output block from the Output FIFO */
    448                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    449                outputaddr+=4;
    450                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    451                outputaddr+=4;
    452                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    453                outputaddr+=4;
    454                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    455                outputaddr+=4;
    456              }
    457            }
    458          
    459            /* Disable Crypto */
    460            CRYP_Cmd(DISABLE);
    461          
    462            return status;
    463          }
    464          
    465          /**
    466            * @brief  Encrypt and decrypt using AES in CTR Mode
    467            * @param  Mode: encryption or decryption Mode.
    468            *           This parameter can be one of the following values:
    469            *            @arg MODE_ENCRYPT: Encryption
    470            *            @arg MODE_DECRYPT: Decryption
    471            * @param  InitVectors: Initialisation Vectors used for AES algorithm.
    472            * @param  Key: Key used for AES algorithm.
    473            * @param  Keysize: length of the Key, must be a 128, 192 or 256.
    474            * @param  Input: pointer to the Input buffer.
    475            * @param  Ilength: length of the Input buffer, must be a multiple of 16.
    476            * @param  Output: pointer to the returned buffer.
    477            * @retval An ErrorStatus enumeration value:
    478            *          - SUCCESS: Operation done
    479            *          - ERROR: Operation failed
    480            */
    481          ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
    482                                   uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
    483                                   uint8_t *Output)
    484          {
    485            CRYP_InitTypeDef AES_CRYP_InitStructure;
    486            CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
    487            CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
    488            __IO uint32_t counter = 0;
    489            uint32_t busystatus = 0;
    490            ErrorStatus status = SUCCESS;
    491            uint32_t keyaddr    = (uint32_t)Key;
    492            uint32_t inputaddr  = (uint32_t)Input;
    493            uint32_t outputaddr = (uint32_t)Output;
    494            uint32_t ivaddr     = (uint32_t)InitVectors;
    495            uint32_t i = 0;
    496          
    497            /* Crypto structures initialisation*/
    498            CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
    499          
    500            switch(Keysize)
    501            {
    502              case 128:
    503              AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
    504              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    505              keyaddr+=4;
    506              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    507              keyaddr+=4;
    508              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    509              keyaddr+=4;
    510              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    511              break;
    512              case 192:
    513              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
    514              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
    515              keyaddr+=4;
    516              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
    517              keyaddr+=4;
    518              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    519              keyaddr+=4;
    520              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    521              keyaddr+=4;
    522              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    523              keyaddr+=4;
    524              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    525              break;
    526              case 256:
    527              AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
    528              AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
    529              keyaddr+=4;
    530              AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
    531              keyaddr+=4;
    532              AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
    533              keyaddr+=4;
    534              AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
    535              keyaddr+=4;
    536              AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
    537              keyaddr+=4;
    538              AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
    539              keyaddr+=4;
    540              AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
    541              keyaddr+=4;
    542              AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
    543              break;
    544              default:
    545              break;
    546            }
    547            /* CRYP Initialization Vectors */
    548            AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
    549            ivaddr+=4;
    550            AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
    551            ivaddr+=4;
    552            AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
    553            ivaddr+=4;
    554            AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
    555          
    556            /* Key Initialisation */
    557            CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
    558          
    559            /*------------------ AES Decryption ------------------*/
    560            if(Mode == MODE_DECRYPT) /* AES decryption */
    561            {
    562              /* Crypto Init for decryption process */
    563              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
    564            }
    565            /*------------------ AES Encryption ------------------*/
    566            else /* AES encryption */
    567            {
    568              /* Crypto Init for Encryption process */
    569              AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
    570            }
    571            AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
    572            AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
    573            CRYP_Init(&AES_CRYP_InitStructure);
    574          
    575            /* CRYP Initialization Vectors */
    576            CRYP_IVInit(&AES_CRYP_IVInitStructure);
    577          
    578            /* Flush IN/OUT FIFOs */
    579            CRYP_FIFOFlush();
    580          
    581            /* Enable Crypto processor */
    582            CRYP_Cmd(ENABLE);
    583          
    584            for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
    585            {
    586          
    587              /* Write the Input block in the IN FIFO */
    588              CRYP_DataIn(*(uint32_t*)(inputaddr));
    589              inputaddr+=4;
    590              CRYP_DataIn(*(uint32_t*)(inputaddr));
    591              inputaddr+=4;
    592              CRYP_DataIn(*(uint32_t*)(inputaddr));
    593              inputaddr+=4;
    594              CRYP_DataIn(*(uint32_t*)(inputaddr));
    595              inputaddr+=4;
    596              /* Wait until the complete message has been processed */
    597              counter = 0;
    598              do
    599              {
    600                busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
    601                counter++;
    602              }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
    603          
    604              if (busystatus != RESET)
    605             {
    606                 status = ERROR;
    607              }
    608              else
    609              {
    610          
    611                /* Read the Output block from the Output FIFO */
    612                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    613                outputaddr+=4;
    614                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    615                outputaddr+=4;
    616                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    617                outputaddr+=4;
    618                *(uint32_t*)(outputaddr) = CRYP_DataOut();
    619                outputaddr+=4;
    620              }
    621            }
    622            /* Disable Crypto */
    623            CRYP_Cmd(DISABLE);
    624          
    625            return status;
    626          }
    627          /**
    628            * @}
    629            */ 
    630          
    631          /**
    632            * @}
    633            */ 
    634          
    635          /**
    636            * @}
    637            */ 
    638          
    639          /**
    640            * @}
    641            */ 
    642          
    643          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
    644          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      96   CRYP_AES_CBC
        96   -> CRYP_Cmd
        96   -> CRYP_DataIn
        96   -> CRYP_DataOut
        96   -> CRYP_FIFOFlush
        96   -> CRYP_GetFlagStatus
        96   -> CRYP_IVInit
        96   -> CRYP_Init
        96   -> CRYP_KeyInit
        96   -> CRYP_KeyStructInit
      96   CRYP_AES_CTR
        96   -> CRYP_Cmd
        96   -> CRYP_DataIn
        96   -> CRYP_DataOut
        96   -> CRYP_FIFOFlush
        96   -> CRYP_GetFlagStatus
        96   -> CRYP_IVInit
        96   -> CRYP_Init
        96   -> CRYP_KeyInit
        96   -> CRYP_KeyStructInit
      80   CRYP_AES_ECB
        80   -> CRYP_Cmd
        80   -> CRYP_DataIn
        80   -> CRYP_DataOut
        80   -> CRYP_FIFOFlush
        80   -> CRYP_GetFlagStatus
        80   -> CRYP_Init
        80   -> CRYP_KeyInit
        80   -> CRYP_KeyStructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     146  ?Subroutine0
     294  CRYP_AES_CBC
     220  CRYP_AES_CTR
     398  CRYP_AES_ECB

 
 1 058 bytes in section .text
 
 1 058 bytes of CODE memory

Errors: none
Warnings: none
