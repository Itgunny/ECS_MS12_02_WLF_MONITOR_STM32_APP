###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      21/Oct/2016  11:14:32 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -            #
#                    STM32_APP\[MASS]\Platform\TaeHa - ECS\SRC\flash_if.c     #
#    Command line =  "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\[MASS]\Platform\TaeHa - ECS\SRC\flash_if.c"    #
#                    -D USE_STDPERIPH_DRIVER -D STM32F4XX -D                  #
#                    USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN                #
#                    "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\[MASS]\Project\Debug\List\" -o                 #
#                    "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\[MASS]\Project\Debug\Obj\" --debug             #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -   #
#                    STM32_APP\[MASS]\Project\..\Platform\COMMON\INC\" -I     #
#                    "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\[MASS]\Project\..\Platform\TaeHa - ECS\INC\"   #
#                    -I "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -        #
#                    STM32_APP\[MASS]\Project\..\Libraries\CMSIS\Device\ST\ST #
#                    M32F4xx\Include\" -I "D:\Project\[SVN] ECS-RD12-16 -     #
#                    WL9F Monitor - STM32_APP\[MASS]\Project\..\Libraries\STM #
#                    32F4xx_StdPeriph_Driver\inc\" -Oh --use_c++_inline -I    #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -            #
#                    STM32_APP\[MASS]\Project\Debug\List\flash_if.lst         #
#    Object file  =  D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -            #
#                    STM32_APP\[MASS]\Project\Debug\Obj\flash_if.o            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor - STM32_APP\[MASS]\Platform\TaeHa - ECS\SRC\flash_if.c
      1          /**
      2            ******************************************************************************
      3            * @file    STM32F4xx_IAP/src/flash_if.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.0
      6            * @date    10-October-2011
      7            * @brief   This file provides all the memory related operation functions.
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
     19            ******************************************************************************
     20            */ 
     21          
     22          /** @addtogroup STM32F4xx_IAP
     23            * @{
     24            */
     25          
     26          /* Includes ------------------------------------------------------------------*/
     27          #include "flash_if.h"
     28          
     29          /* Private typedef -----------------------------------------------------------*/
     30          /* Private define ------------------------------------------------------------*/
     31          /* Private macro -------------------------------------------------------------*/
     32          /* Private variables ---------------------------------------------------------*/
     33          /* Private function prototypes -----------------------------------------------*/
     34          static uint32_t GetSector(uint32_t Address);
     35          
     36          /* Private functions ---------------------------------------------------------*/
     37          
     38          /**
     39            * @brief  Unlocks Flash for write access
     40            * @param  None
     41            * @retval None
     42            */
     43          void FLASH_If_Init(void)
     44          { 
     45            FLASH_Unlock(); 
     46          
     47            /* Clear pending flags (if any) */  
     48            FLASH_ClearFlag(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
     49                            FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR|FLASH_FLAG_PGSERR);
     50          }
     51          
     52          /**
     53            * @brief  This function does an erase of all user flash area
     54            * @param  StartSector: start of user flash area
     55            * @retval 0: user flash area successfully erased
     56            *         1: error occurred
     57            */
     58          uint32_t FLASH_If_Erase(uint32_t StartSector)
     59          {
     60            uint32_t UserStartSector = FLASH_Sector_1, i = 0;
     61          
     62            /* Get the sector where start the user flash area */
     63            UserStartSector = GetSector(APPLICATION_ADDRESS);
     64          
     65            for(i = UserStartSector; i <= FLASH_Sector_11; i += 8)
     66            {
     67              /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
     68                 be done by word */ 
     69              if (FLASH_EraseSector(i, VoltageRange_3) != FLASH_COMPLETE)
     70              {
     71                /* Error occurred while page erase */
     72                return (1);
     73              }
     74            }
     75            
     76            return (0);
     77          }
     78          
     79          /**
     80            * @brief  This function does an erase of all user flash area
     81            * @param  StartSector: start of user flash area
     82            * @retval 0: user flash area successfully erased
     83            *         1: error occurred
     84            */
     85          uint32_t FLASH_If_SMK_Erase(uint32_t StartSector)
     86          {
     87            uint32_t UserStartSector;
     88          
     89            /* Get the sector where start the user flash area */
     90            UserStartSector = GetSector(StartSector);
     91          
     92              if (FLASH_EraseSector(UserStartSector, VoltageRange_3) != FLASH_COMPLETE)
     93              {
     94                /* Error occurred while page erase */
     95                return (1);
     96              }
     97          
     98            
     99            return (0);
    100          }
    101          
    102          /**
    103            * @brief  This function writes a data buffer in flash (data are 32-bit aligned).
    104            * @note   After writing data buffer, the flash content is checked.
    105            * @param  FlashAddress: start address for writing data buffer
    106            * @param  Data: pointer on data buffer
    107            * @param  DataLength: length of data buffer (unit is 32-bit word)   
    108            * @retval 0: Data successfully written to Flash memory
    109            *         1: Error occurred while writing data in Flash memory
    110            *         2: Written Data in flash memory is different from expected one
    111            */
    112          
    113          
    114          
    115          uint32_t FLASH_If_WriteByte(__IO uint32_t* FlashAddress, uint8_t* Data ,uint32_t DataLength)
    116          {
    117            uint32_t i = 0;
    118          
    119            for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
    120            {
    121              /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
    122                 be done by word */ 
    123              if (FLASH_ProgramByte(*FlashAddress, *(uint8_t*)(Data+i)) == FLASH_COMPLETE)
    124              {
    125               /* Check the written value */
    126                if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
    127                {
    128                  /* Flash content doesn't match SRAM content */
    129                  return(2);
    130                }
    131                /* Increment FLASH destination address */
    132                *FlashAddress ++;
    133              }
    134              else
    135              {
    136                /* Error occurred while writing data in Flash memory */
    137                return (1);
    138              }
    139            }
    140          
    141            return (0);
    142          }
    143          
    144          
    145          uint32_t FLASH_If_Write(__IO uint32_t* FlashAddress, uint32_t* Data ,uint32_t DataLength)
    146          {
    147            uint32_t i = 0;
    148          
    149            for (i = 0; (i < DataLength) && (*FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
    150            {
    151              /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
    152                 be done by word */ 
    153              if (FLASH_ProgramWord(*FlashAddress, *(uint32_t*)(Data+i)) == FLASH_COMPLETE)
    154              {
    155               /* Check the written value */
    156                if (*(uint32_t*)*FlashAddress != *(uint32_t*)(Data+i))
    157                {
    158                  /* Flash content doesn't match SRAM content */
    159                  return(2);
    160                }
    161                /* Increment FLASH destination address */
    162                *FlashAddress += 4;
    163              }
    164              else
    165              {
    166                /* Error occurred while writing data in Flash memory */
    167                return (1);
    168              }
    169            }
    170          
    171            return (0);
    172          }
    173          
    174          /**
    175            * @brief  Returns the write protection status of user flash area.
    176            * @param  None
    177            * @retval 0: No write protected sectors inside the user flash area
    178            *         1: Some sectors inside the user flash area are write protected
    179            */
    180          uint16_t FLASH_If_GetWriteProtectionStatus(void)
    181          {
    182            uint32_t UserStartSector = FLASH_Sector_1;
    183          
    184            /* Get the sector where start the user flash area */
    185            UserStartSector = GetSector(APPLICATION_ADDRESS);
    186          
    187            /* Check if there are write protected sectors inside the user flash area */
    188            if ((FLASH_OB_GetWRP() >> (UserStartSector/8)) == (0xFFF >> (UserStartSector/8)))
    189            { /* No write protected sectors inside the user flash area */
    190              return 1;
    191            }
    192            else
    193            { /* Some sectors inside the user flash area are write protected */
    194              return 0;
    195            }
    196          }
    197          
    198          /**
    199            * @brief  Disables the write protection of user flash area.
    200            * @param  None
    201            * @retval 1: Write Protection successfully disabled
    202            *         2: Error: Flash write unprotection failed
    203            */
    204          uint32_t FLASH_If_DisableWriteProtection(void)
    205          {
    206            __IO uint32_t UserStartSector = FLASH_Sector_1, UserWrpSectors = OB_WRP_Sector_1;
    207          
    208            /* Get the sector where start the user flash area */
    209            UserStartSector = GetSector(APPLICATION_ADDRESS);
    210          
    211            /* Mark all sectors inside the user flash area as non protected */  
    212            UserWrpSectors = 0xFFF-((1 << (UserStartSector/8))-1);
    213             
    214            /* Unlock the Option Bytes */
    215            FLASH_OB_Unlock();
    216          
    217            /* Disable the write protection for all sectors inside the user flash area */
    218            FLASH_OB_WRPConfig(UserWrpSectors, DISABLE);
    219          
    220            /* Start the Option Bytes programming process. */  
    221            if (FLASH_OB_Launch() != FLASH_COMPLETE)
    222            {
    223              /* Error: Flash write unprotection failed */
    224              return (2);
    225            }
    226          
    227            /* Write Protection successfully disabled */
    228            return (1);
    229          }
    230          
    231          /**
    232            * @brief  Gets the sector of a given address
    233            * @param  Address: Flash address
    234            * @retval The sector of a given address
    235            */
    236          static uint32_t GetSector(uint32_t Address)
    237          {
    238            uint32_t sector = 0;
    239            
    240            if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
    241            {
    242              sector = FLASH_Sector_0;  
    243            }
    244            else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
    245            {
    246              sector = FLASH_Sector_1;  
    247            }
    248            else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
    249            {
    250              sector = FLASH_Sector_2;  
    251            }
    252            else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
    253            {
    254              sector = FLASH_Sector_3;  
    255            }
    256            else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
    257            {
    258              sector = FLASH_Sector_4;  
    259            }
    260            else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
    261            {
    262              sector = FLASH_Sector_5;  
    263            }
    264            else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
    265            {
    266              sector = FLASH_Sector_6;  
    267            }
    268            else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
    269            {
    270              sector = FLASH_Sector_7;  
    271            }
    272            else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
    273            {
    274              sector = FLASH_Sector_8;  
    275            }
    276            else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
    277            {
    278              sector = FLASH_Sector_9;  
    279            }
    280            else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
    281            {
    282              sector = FLASH_Sector_10;  
    283            }
    284            else/*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
    285            {
    286              sector = FLASH_Sector_11;  
    287            }
    288              return sector;
    289          }
    290          
    291          /**
    292            * @}
    293            */
    294          
    295          /******************* (C) COPYRIGHT 2011 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   FLASH_If_DisableWriteProtection
        16   -> FLASH_OB_Launch
        16   -> FLASH_OB_Unlock
        16   -> FLASH_OB_WRPConfig
        16   -> GetSector
       8   FLASH_If_Erase
         8   -> FLASH_EraseSector
         8   -> GetSector
       8   FLASH_If_GetWriteProtectionStatus
         8   -> FLASH_OB_GetWRP
         8   -> GetSector
       8   FLASH_If_Init
         0   -> FLASH_ClearFlag
         8   -> FLASH_Unlock
       8   FLASH_If_SMK_Erase
         8   -> FLASH_EraseSector
         8   -> GetSector
      24   FLASH_If_Write
        24   -> FLASH_ProgramWord
      24   FLASH_If_WriteByte
        24   -> FLASH_ProgramByte
       0   GetSector


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine2
      62  FLASH_If_DisableWriteProtection
      38  FLASH_If_Erase
      34  FLASH_If_GetWriteProtectionStatus
      16  FLASH_If_Init
      24  FLASH_If_SMK_Erase
      66  FLASH_If_Write
      64  FLASH_If_WriteByte
     156  GetSector

 
 526 bytes in section .text
 
 526 bytes of CODE memory

Errors: none
Warnings: none
