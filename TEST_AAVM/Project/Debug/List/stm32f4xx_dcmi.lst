###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      30/Aug/2016  09:53:33 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WLF Monitor -                              #
#                    STM32_APP\TEST_AAVM\Libraries\STM32F4xx_StdPeriph_Driver #
#                    \src\stm32f4xx_dcmi.c                                    #
#    Command line =  "C:\Tools\WL9F\WLF Monitor -                             #
#                    STM32_APP\TEST_AAVM\Libraries\STM32F4xx_StdPeriph_Driver #
#                    \src\stm32f4xx_dcmi.c" -D USE_STDPERIPH_DRIVER -D        #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    "C:\Tools\WL9F\WLF Monitor -                             #
#                    STM32_APP\TEST_AAVM\Project\Debug\List\" -o              #
#                    "C:\Tools\WL9F\WLF Monitor -                             #
#                    STM32_APP\TEST_AAVM\Project\Debug\Obj\" --debug          #
#                    --endian=little --cpu=Cortex-M4 -e --fpu=VFPv4_sp        #
#                    --dlib_config "C:\Tools\IAR Systems\Embedded Workbench   #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I "C:\Tools\WL9F\WLF  #
#                    Monitor - STM32_APP\TEST_AAVM\Project\..\Platform\COMMON #
#                    \INC\" -I "C:\Tools\WL9F\WLF Monitor -                   #
#                    STM32_APP\TEST_AAVM\Project\..\Platform\TaeHa -          #
#                    ECS\INC\" -I "C:\Tools\WL9F\WLF Monitor -                #
#                    STM32_APP\TEST_AAVM\Project\..\Libraries\CMSIS\Device\ST #
#                    \STM32F4xx\Include\" -I "C:\Tools\WL9F\WLF Monitor -     #
#                    STM32_APP\TEST_AAVM\Project\..\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\inc\" -Oh --use_c++_inline -I "C:\Tools\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  C:\Tools\WL9F\WLF Monitor -                              #
#                    STM32_APP\TEST_AAVM\Project\Debug\List\stm32f4xx_dcmi.ls #
#                    t                                                        #
#    Object file  =  C:\Tools\WL9F\WLF Monitor -                              #
#                    STM32_APP\TEST_AAVM\Project\Debug\Obj\stm32f4xx_dcmi.o   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WLF Monitor - STM32_APP\TEST_AAVM\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_dcmi.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_dcmi.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    05-March-2012
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the DCMI peripheral:           
      9            *           - Initialization and Configuration
     10            *           - Image capture functions  
     11            *           - Interrupts and flags management
     12            *
     13            *  @verbatim  
     14            *  
     15            *        
     16            *          ===================================================================
     17            *                                 How to use this driver
     18            *          ===================================================================  
     19            *         
     20            *         The sequence below describes how to use this driver to capture image
     21            *         from a camera module connected to the DCMI Interface.
     22            *         This sequence does not take into account the configuration of the  
     23            *         camera module, which should be made before to configure and enable
     24            *         the DCMI to capture images.
     25            *           
     26            *          1. Enable the clock for the DCMI and associated GPIOs using the following functions:
     27            *                 RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_DCMI, ENABLE);
     28            *                 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);
     29            *
     30            *          2. DCMI pins configuration 
     31            *             - Connect the involved DCMI pins to AF13 using the following function 
     32            *                 GPIO_PinAFConfig(GPIOx, GPIO_PinSourcex, GPIO_AF_DCMI); 
     33            *             - Configure these DCMI pins in alternate function mode by calling the function
     34            *                 GPIO_Init();
     35            *    
     36            *          3. Declare a DCMI_InitTypeDef structure, for example:
     37            *                 DCMI_InitTypeDef  DCMI_InitStructure;
     38            *             and fill the DCMI_InitStructure variable with the allowed values
     39            *             of the structure member.
     40            *  
     41            *          4. Initialize the DCMI interface by calling the function
     42            *                 DCMI_Init(&DCMI_InitStructure); 
     43            *  
     44            *          5. Configure the DMA2_Stream1 channel1 to transfer Data from DCMI DR
     45            *             register to the destination memory buffer.
     46            *  
     47            *          6. Enable DCMI interface using the function
     48            *                 DCMI_Cmd(ENABLE);
     49            *                 
     50            *         7. Start the image capture using the function
     51            *                 DCMI_CaptureCmd(ENABLE);
     52            *                 
     53            *         8. At this stage the DCMI interface waits for the first start of frame,
     54            *            then a DMA request is generated continuously/once (depending on the
     55            *            mode used, Continuous/Snapshot) to transfer the received data into
     56            *            the destination memory. 
     57            *   
     58            *  @note  If you need to capture only a rectangular window from the received
     59            *         image, you have to use the DCMI_CROPConfig() function to configure 
     60            *         the coordinates and size of the window to be captured, then enable 
     61            *         the Crop feature using DCMI_CROPCmd(ENABLE);  
     62            *         In this case, the Crop configuration should be made before to enable
     63            *         and start the DCMI interface. 
     64            *        
     65            *  @endverbatim   
     66            *  
     67            ******************************************************************************
     68            * @attention
     69            *
     70            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     71            *
     72            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     73            * You may not use this file except in compliance with the License.
     74            * You may obtain a copy of the License at:
     75            *
     76            *        http://www.st.com/software_license_agreement_liberty_v2
     77            *
     78            * Unless required by applicable law or agreed to in writing, software 
     79            * distributed under the License is distributed on an "AS IS" BASIS, 
     80            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     81            * See the License for the specific language governing permissions and
     82            * limitations under the License.
     83            *
     84            ******************************************************************************
     85            */
     86          
     87          /* Includes ------------------------------------------------------------------*/
     88          #include "stm32f4xx_dcmi.h"
     89          #include "stm32f4xx_rcc.h"
     90          
     91          /** @addtogroup STM32F4xx_StdPeriph_Driver
     92            * @{
     93            */
     94          
     95          /** @defgroup DCMI 
     96            * @brief DCMI driver modules
     97            * @{
     98            */ 
     99          
    100          /* Private typedef -----------------------------------------------------------*/
    101          /* Private define ------------------------------------------------------------*/
    102          /* Private macro -------------------------------------------------------------*/
    103          /* Private variables ---------------------------------------------------------*/
    104          /* Private function prototypes -----------------------------------------------*/
    105          /* Private functions ---------------------------------------------------------*/
    106          
    107          /** @defgroup DCMI_Private_Functions
    108            * @{
    109            */ 
    110          
    111          /** @defgroup DCMI_Group1 Initialization and Configuration functions
    112           *  @brief   Initialization and Configuration functions 
    113           *
    114          @verbatim   
    115           ===============================================================================
    116                            Initialization and Configuration functions
    117           ===============================================================================  
    118          
    119          @endverbatim
    120            * @{
    121            */
    122          
    123          /**
    124            * @brief  Deinitializes the DCMI registers to their default reset values.
    125            * @param  None
    126            * @retval None
    127            */
    128          void DCMI_DeInit(void)
    129          {
    130            DCMI->CR = 0x0;
    131            DCMI->IER = 0x0;
    132            DCMI->ICR = 0x1F;
    133            DCMI->ESCR = 0x0;
    134            DCMI->ESUR = 0x0;
    135            DCMI->CWSTRTR = 0x0;
    136            DCMI->CWSIZER = 0x0;
    137          }
    138          
    139          /**
    140            * @brief  Initializes the DCMI according to the specified parameters in the DCMI_InitStruct.
    141            * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
    142            *         the configuration information for the DCMI.
    143            * @retval None
    144            */
    145          void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
    146          {
    147            uint32_t temp = 0x0;
    148            
    149            /* Check the parameters */
    150            assert_param(IS_DCMI_CAPTURE_MODE(DCMI_InitStruct->DCMI_CaptureMode));
    151            assert_param(IS_DCMI_SYNCHRO(DCMI_InitStruct->DCMI_SynchroMode));
    152            assert_param(IS_DCMI_PCKPOLARITY(DCMI_InitStruct->DCMI_PCKPolarity));
    153            assert_param(IS_DCMI_VSPOLARITY(DCMI_InitStruct->DCMI_VSPolarity));
    154            assert_param(IS_DCMI_HSPOLARITY(DCMI_InitStruct->DCMI_HSPolarity));
    155            assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
    156            assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));
    157          
    158            /* The DCMI configuration registers should be programmed correctly before 
    159            enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
    160            DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
    161             
    162            /* Reset the old DCMI configuration */
    163            temp = DCMI->CR;
    164            
    165            temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
    166                                DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
    167                                DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
    168                            
    169            /* Sets the new configuration of the DCMI peripheral */
    170            temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
    171                               DCMI_InitStruct->DCMI_SynchroMode |
    172                               DCMI_InitStruct->DCMI_PCKPolarity |
    173                               DCMI_InitStruct->DCMI_VSPolarity |
    174                               DCMI_InitStruct->DCMI_HSPolarity |
    175                               DCMI_InitStruct->DCMI_CaptureRate |
    176                               DCMI_InitStruct->DCMI_ExtendedDataMode);
    177          
    178            DCMI->CR = temp;                              
    179          }
    180          
    181          /**
    182            * @brief  Fills each DCMI_InitStruct member with its default value.
    183            * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
    184            *         be initialized.
    185            * @retval None
    186            */
    187          void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
    188          {
    189            /* Set the default configuration */
    190            DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
    191            DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
    192            DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
    193            DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
    194            DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
    195            DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
    196            DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
    197          }
    198          
    199          /**
    200            * @brief  Initializes the DCMI peripheral CROP mode according to the specified
    201            *         parameters in the DCMI_CROPInitStruct.
    202            * @note   This function should be called before to enable and start the DCMI interface.   
    203            * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
    204            *         contains the configuration information for the DCMI peripheral CROP mode.
    205            * @retval None
    206            */
    207          void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
    208          {  
    209            /* Sets the CROP window coordinates */
    210            DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
    211                            ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
    212          
    213            /* Sets the CROP window size */
    214            DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
    215                            ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
    216          }
    217          
    218          /**
    219            * @brief  Enables or disables the DCMI Crop feature.
    220            * @note   This function should be called before to enable and start the DCMI interface.
    221            * @param  NewState: new state of the DCMI Crop feature. 
    222            *          This parameter can be: ENABLE or DISABLE.
    223            * @retval None
    224            */
    225          void DCMI_CROPCmd(FunctionalState NewState)
    226          {
    227            /* Check the parameters */
    228            assert_param(IS_FUNCTIONAL_STATE(NewState));
    229              
    230            if (NewState != DISABLE)
    231            {
    232              /* Enable the DCMI Crop feature */
    233              DCMI->CR |= (uint32_t)DCMI_CR_CROP;
    234            }
    235            else
    236            {
    237              /* Disable the DCMI Crop feature */
    238              DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
    239            }
    240          }
    241          
    242          /**
    243            * @brief  Sets the embedded synchronization codes
    244            * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
    245            *         contains the embedded synchronization codes for the DCMI peripheral.
    246            * @retval None
    247            */
    248          void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
    249          {
    250            DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
    251                                    ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
    252                                    ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
    253                                    ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
    254          }
    255          
    256          /**
    257            * @brief  Enables or disables the DCMI JPEG format.
    258            * @note   The Crop and Embedded Synchronization features cannot be used in this mode.  
    259            * @param  NewState: new state of the DCMI JPEG format. 
    260            *          This parameter can be: ENABLE or DISABLE.
    261            * @retval None
    262            */
    263          void DCMI_JPEGCmd(FunctionalState NewState)
    264          {
    265            /* Check the parameters */
    266            assert_param(IS_FUNCTIONAL_STATE(NewState));
    267           
    268            if (NewState != DISABLE)
    269            {
    270              /* Enable the DCMI JPEG format */
    271              DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
    272            }
    273            else
    274            {
    275              /* Disable the DCMI JPEG format */
    276              DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
    277            }
    278          }
    279          /**
    280            * @}
    281            */
    282          
    283          /** @defgroup DCMI_Group2 Image capture functions
    284           *  @brief   Image capture functions
    285           *
    286          @verbatim   
    287           ===============================================================================
    288                                           Image capture functions
    289           ===============================================================================  
    290          
    291          @endverbatim
    292            * @{
    293            */
    294            
    295          /**
    296            * @brief  Enables or disables the DCMI interface.
    297            * @param  NewState: new state of the DCMI interface. 
    298            *          This parameter can be: ENABLE or DISABLE.
    299            * @retval None
    300            */
    301          void DCMI_Cmd(FunctionalState NewState)
    302          {
    303            /* Check the parameters */
    304            assert_param(IS_FUNCTIONAL_STATE(NewState));
    305            
    306            if (NewState != DISABLE)
    307            {
    308              /* Enable the DCMI by setting ENABLE bit */
    309              DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
    310            }
    311            else
    312            {
    313              /* Disable the DCMI by clearing ENABLE bit */
    314              DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
    315            }
    316          }
    317          
    318          /**
    319            * @brief  Enables or disables the DCMI Capture.
    320            * @param  NewState: new state of the DCMI capture. 
    321            *          This parameter can be: ENABLE or DISABLE.
    322            * @retval None
    323            */
    324          void DCMI_CaptureCmd(FunctionalState NewState)
    325          {
    326            /* Check the parameters */
    327            assert_param(IS_FUNCTIONAL_STATE(NewState));
    328              
    329            if (NewState != DISABLE)
    330            {
    331              /* Enable the DCMI Capture */
    332              DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
    333            }
    334            else
    335            {
    336              /* Disable the DCMI Capture */
    337              DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
    338            }
    339          }
    340          
    341          /**
    342            * @brief  Reads the data stored in the DR register.
    343            * @param  None 
    344            * @retval Data register value
    345            */
    346          uint32_t DCMI_ReadData(void)
    347          {
    348            return DCMI->DR;
    349          }
    350          /**
    351            * @}
    352            */
    353          
    354          /** @defgroup DCMI_Group3 Interrupts and flags management functions
    355           *  @brief   Interrupts and flags management functions
    356           *
    357          @verbatim   
    358           ===============================================================================
    359                            Interrupts and flags management functions
    360           ===============================================================================  
    361          
    362          @endverbatim
    363            * @{
    364            */
    365          
    366          /**
    367            * @brief  Enables or disables the DCMI interface interrupts.
    368            * @param  DCMI_IT: specifies the DCMI interrupt sources to be enabled or disabled. 
    369            *          This parameter can be any combination of the following values:
    370            *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
    371            *            @arg DCMI_IT_OVF: Overflow interrupt mask
    372            *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
    373            *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
    374            *            @arg DCMI_IT_LINE: Line interrupt mask
    375            * @param  NewState: new state of the specified DCMI interrupts.
    376            *          This parameter can be: ENABLE or DISABLE.
    377            * @retval None
    378            */
    379          void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
    380          {
    381            /* Check the parameters */
    382            assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
    383            assert_param(IS_FUNCTIONAL_STATE(NewState));
    384            
    385            if (NewState != DISABLE)
    386            {
    387              /* Enable the Interrupt sources */
    388              DCMI->IER |= DCMI_IT;
    389            }
    390            else
    391            {
    392              /* Disable the Interrupt sources */
    393              DCMI->IER &= (uint16_t)(~DCMI_IT);
    394            }  
    395          }
    396          
    397          /**
    398            * @brief  Checks whether the  DCMI interface flag is set or not.
    399            * @param  DCMI_FLAG: specifies the flag to check.
    400            *          This parameter can be one of the following values:
    401            *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
    402            *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
    403            *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
    404            *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
    405            *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
    406            *            @arg DCMI_FLAG_FRAMEMI: Frame capture complete Masked flag mask
    407            *            @arg DCMI_FLAG_OVFMI: Overflow Masked flag mask
    408            *            @arg DCMI_FLAG_ERRMI: Synchronization error Masked flag mask
    409            *            @arg DCMI_FLAG_VSYNCMI: VSYNC Masked flag mask
    410            *            @arg DCMI_FLAG_LINEMI: Line Masked flag mask
    411            *            @arg DCMI_FLAG_HSYNC: HSYNC flag mask
    412            *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
    413            *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
    414            * @retval The new state of DCMI_FLAG (SET or RESET).
    415            */
    416          FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
    417          {
    418            FlagStatus bitstatus = RESET;
    419            uint32_t dcmireg, tempreg = 0;
    420          
    421            /* Check the parameters */
    422            assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
    423            
    424            /* Get the DCMI register index */
    425            dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
    426            
    427            if (dcmireg == 0x00) /* The FLAG is in RISR register */
    428            {
    429              tempreg= DCMI->RISR;
    430            }
    431            else if (dcmireg == 0x02) /* The FLAG is in SR register */
    432            {
    433              tempreg = DCMI->SR;
    434            }
    435            else /* The FLAG is in MISR register */
    436            {
    437              tempreg = DCMI->MISR;
    438            }
    439            
    440            if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
    441            {
    442              bitstatus = SET;
    443            }
    444            else
    445            {
    446              bitstatus = RESET;
    447            }
    448            /* Return the DCMI_FLAG status */
    449            return  bitstatus;
    450          }
    451          
    452          /**
    453            * @brief  Clears the DCMI's pending flags.
    454            * @param  DCMI_FLAG: specifies the flag to clear.
    455            *          This parameter can be any combination of the following values:
    456            *            @arg DCMI_FLAG_FRAMERI: Frame capture complete Raw flag mask
    457            *            @arg DCMI_FLAG_OVFRI: Overflow Raw flag mask
    458            *            @arg DCMI_FLAG_ERRRI: Synchronization error Raw flag mask
    459            *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
    460            *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
    461            * @retval None
    462            */
    463          void DCMI_ClearFlag(uint16_t DCMI_FLAG)
    464          {
    465            /* Check the parameters */
    466            assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
    467            
    468            /* Clear the flag by writing in the ICR register 1 in the corresponding 
    469            Flag position*/
    470            
    471            DCMI->ICR = DCMI_FLAG;
    472          }
    473          
    474          /**
    475            * @brief  Checks whether the DCMI interrupt has occurred or not.
    476            * @param  DCMI_IT: specifies the DCMI interrupt source to check.
    477            *          This parameter can be one of the following values:
    478            *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
    479            *            @arg DCMI_IT_OVF: Overflow interrupt mask
    480            *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
    481            *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
    482            *            @arg DCMI_IT_LINE: Line interrupt mask
    483            * @retval The new state of DCMI_IT (SET or RESET).
    484            */
    485          ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
    486          {
    487            ITStatus bitstatus = RESET;
    488            uint32_t itstatus = 0;
    489            
    490            /* Check the parameters */
    491            assert_param(IS_DCMI_GET_IT(DCMI_IT));
    492            
    493            itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
    494            
    495            if ((itstatus != (uint16_t)RESET))
    496            {
    497              bitstatus = SET;
    498            }
    499            else
    500            {
    501              bitstatus = RESET;
    502            }
    503            return bitstatus;
    504          }
    505          
    506          /**
    507            * @brief  Clears the DCMI's interrupt pending bits.
    508            * @param  DCMI_IT: specifies the DCMI interrupt pending bit to clear.
    509            *          This parameter can be any combination of the following values:
    510            *            @arg DCMI_IT_FRAME: Frame capture complete interrupt mask
    511            *            @arg DCMI_IT_OVF: Overflow interrupt mask
    512            *            @arg DCMI_IT_ERR: Synchronization error interrupt mask
    513            *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
    514            *            @arg DCMI_IT_LINE: Line interrupt mask
    515            * @retval None
    516            */
    517          void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
    518          {
    519            /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
    520            corresponding pending Bit position*/
    521            
    522            DCMI->ICR = DCMI_IT;
    523          }
    524          /**
    525            * @}
    526            */ 
    527          
    528          /**
    529            * @}
    530            */ 
    531          
    532          /**
    533            * @}
    534            */ 
    535          
    536          /**
    537            * @}
    538            */ 
    539          
    540          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   DCMI_CROPCmd
         8   -> assert_failed
       0   DCMI_CROPConfig
       8   DCMI_CaptureCmd
         8   -> assert_failed
       8   DCMI_ClearFlag
         8   -> assert_failed
       0   DCMI_ClearITPendingBit
       8   DCMI_Cmd
         8   -> assert_failed
       0   DCMI_DeInit
      16   DCMI_GetFlagStatus
        16   -> assert_failed
      16   DCMI_GetITStatus
        16   -> assert_failed
      16   DCMI_ITConfig
        16   -> assert_failed
       8   DCMI_Init
         8   -> assert_failed
       8   DCMI_JPEGCmd
         8   -> assert_failed
       0   DCMI_ReadData
       0   DCMI_SetEmbeddedSynchroCodes
       0   DCMI_StructInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     108  ?<Constant "C:\\Tools\\WL9F\\WLF Mon...">
       4  ??DataTable14
       4  ??DataTable14_1
       4  ??DataTable14_2
       4  ??DataTable14_3
       4  ??DataTable14_4
       4  ??DataTable14_5
       4  ??DataTable14_6
       4  ??DataTable14_7
       4  ??DataTable14_8
       4  ??DataTable14_9
      40  DCMI_CROPCmd
      24  DCMI_CROPConfig
      42  DCMI_CaptureCmd
      32  DCMI_ClearFlag
       6  DCMI_ClearITPendingBit
      42  DCMI_Cmd
      24  DCMI_DeInit
     128  DCMI_GetFlagStatus
      50  DCMI_GetITStatus
      68  DCMI_ITConfig
     212  DCMI_Init
      42  DCMI_JPEGCmd
       6  DCMI_ReadData
      26  DCMI_SetEmbeddedSynchroCodes
      18  DCMI_StructInit

 
 908 bytes in section .text
 
 908 bytes of CODE memory

Errors: none
Warnings: none
