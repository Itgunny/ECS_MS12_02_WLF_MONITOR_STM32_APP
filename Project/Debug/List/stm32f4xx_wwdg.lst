###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      10/Apr/2014  17:33:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\src\stm32f4xx_wwdg.c                         #
#    Command line =  C:\Tools\WL9F\WL_F_Monitor_APP\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\src\stm32f4xx_wwdg.c -D                      #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN C:\Tools\WL9F\WL_F_Monitor_APP\P #
#                    roject\Debug\List\ -o C:\Tools\WL9F\WL_F_Monitor_APP\Pro #
#                    ject\Debug\Obj\ --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR            #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Platfo #
#                    rm\COMMON\INC\ -I "C:\Tools\WL9F\WL_F_Monitor_APP\Projec #
#                    t\..\Platform\TaeHa - ECS\INC\" -I                       #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\ -I                        #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\ -Oh --use_c++_inline -I      #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\stm32f #
#                    4xx_wwdg.lst                                             #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\stm32f4 #
#                    xx_wwdg.o                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_wwdg.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_wwdg.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    05-March-2012
      7            * @brief   This file provides firmware functions to manage the following 
      8            *          functionalities of the Window watchdog (WWDG) peripheral:           
      9            *           - Prescaler, Refresh window and Counter configuration
     10            *           - WWDG activation
     11            *           - Interrupts and flags management
     12            *             
     13            *  @verbatim
     14            *    
     15            *          ===================================================================
     16            *                                     WWDG features
     17            *          ===================================================================
     18            *                                        
     19            *          Once enabled the WWDG generates a system reset on expiry of a programmed
     20            *          time period, unless the program refreshes the counter (downcounter) 
     21            *          before to reach 0x3F value (i.e. a reset is generated when the counter
     22            *          value rolls over from 0x40 to 0x3F). 
     23            *          An MCU reset is also generated if the counter value is refreshed
     24            *          before the counter has reached the refresh window value. This 
     25            *          implies that the counter must be refreshed in a limited window.
     26            *            
     27            *          Once enabled the WWDG cannot be disabled except by a system reset.                          
     28            *          
     29            *          WWDGRST flag in RCC_CSR register can be used to inform when a WWDG
     30            *          reset occurs.
     31            *            
     32            *          The WWDG counter input clock is derived from the APB clock divided 
     33            *          by a programmable prescaler.
     34            *              
     35            *          WWDG counter clock = PCLK1 / Prescaler
     36            *          WWDG timeout = (WWDG counter clock) * (counter value)
     37            *                      
     38            *          Min-max timeout value @42 MHz(PCLK1): ~97.5 us / ~49.9 ms
     39            *                            
     40            *          ===================================================================
     41            *                                 How to use this driver
     42            *          =================================================================== 
     43            *          1. Enable WWDG clock using RCC_APB1PeriphClockCmd(RCC_APB1Periph_WWDG, ENABLE) function
     44            *            
     45            *          2. Configure the WWDG prescaler using WWDG_SetPrescaler() function
     46            *                           
     47            *          3. Configure the WWDG refresh window using WWDG_SetWindowValue() function
     48            *            
     49            *          4. Set the WWDG counter value and start it using WWDG_Enable() function.
     50            *             When the WWDG is enabled the counter value should be configured to 
     51            *             a value greater than 0x40 to prevent generating an immediate reset.     
     52            *            
     53            *          5. Optionally you can enable the Early wakeup interrupt which is 
     54            *             generated when the counter reach 0x40.
     55            *             Once enabled this interrupt cannot be disabled except by a system reset.
     56            *                 
     57            *          6. Then the application program must refresh the WWDG counter at regular
     58            *             intervals during normal operation to prevent an MCU reset, using
     59            *             WWDG_SetCounter() function. This operation must occur only when
     60            *             the counter value is lower than the refresh window value, 
     61            *             programmed using WWDG_SetWindowValue().         
     62            *
     63            *  @endverbatim  
     64            *                             
     65            ******************************************************************************
     66            * @attention
     67            *
     68            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     69            *
     70            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     71            * You may not use this file except in compliance with the License.
     72            * You may obtain a copy of the License at:
     73            *
     74            *        http://www.st.com/software_license_agreement_liberty_v2
     75            *
     76            * Unless required by applicable law or agreed to in writing, software 
     77            * distributed under the License is distributed on an "AS IS" BASIS, 
     78            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     79            * See the License for the specific language governing permissions and
     80            * limitations under the License.
     81            *
     82            ******************************************************************************
     83            */
     84          
     85          /* Includes ------------------------------------------------------------------*/
     86          #include "stm32f4xx_wwdg.h"
     87          #include "stm32f4xx_rcc.h"
     88          
     89          /** @addtogroup STM32F4xx_StdPeriph_Driver
     90            * @{
     91            */
     92          
     93          /** @defgroup WWDG 
     94            * @brief WWDG driver modules
     95            * @{
     96            */
     97          
     98          /* Private typedef -----------------------------------------------------------*/
     99          /* Private define ------------------------------------------------------------*/
    100          
    101          /* ----------- WWDG registers bit address in the alias region ----------- */
    102          #define WWDG_OFFSET       (WWDG_BASE - PERIPH_BASE)
    103          /* Alias word address of EWI bit */
    104          #define CFR_OFFSET        (WWDG_OFFSET + 0x04)
    105          #define EWI_BitNumber     0x09
    106          #define CFR_EWI_BB        (PERIPH_BB_BASE + (CFR_OFFSET * 32) + (EWI_BitNumber * 4))
    107          
    108          /* --------------------- WWDG registers bit mask ------------------------ */
    109          /* CFR register bit mask */
    110          #define CFR_WDGTB_MASK    ((uint32_t)0xFFFFFE7F)
    111          #define CFR_W_MASK        ((uint32_t)0xFFFFFF80)
    112          #define BIT_MASK          ((uint8_t)0x7F)
    113          
    114          /* Private macro -------------------------------------------------------------*/
    115          /* Private variables ---------------------------------------------------------*/
    116          /* Private function prototypes -----------------------------------------------*/
    117          /* Private functions ---------------------------------------------------------*/
    118          
    119          /** @defgroup WWDG_Private_Functions
    120            * @{
    121            */
    122          
    123          /** @defgroup WWDG_Group1 Prescaler, Refresh window and Counter configuration functions
    124           *  @brief   Prescaler, Refresh window and Counter configuration functions 
    125           *
    126          @verbatim   
    127           ===============================================================================
    128                    Prescaler, Refresh window and Counter configuration functions
    129           ===============================================================================  
    130          
    131          @endverbatim
    132            * @{
    133            */
    134          
    135          /**
    136            * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
    137            * @param  None
    138            * @retval None
    139            */
    140          void WWDG_DeInit(void)
    141          {
    142            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
    143            RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
    144          }
    145          
    146          /**
    147            * @brief  Sets the WWDG Prescaler.
    148            * @param  WWDG_Prescaler: specifies the WWDG Prescaler.
    149            *   This parameter can be one of the following values:
    150            *     @arg WWDG_Prescaler_1: WWDG counter clock = (PCLK1/4096)/1
    151            *     @arg WWDG_Prescaler_2: WWDG counter clock = (PCLK1/4096)/2
    152            *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
    153            *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
    154            * @retval None
    155            */
    156          void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
    157          {
    158            uint32_t tmpreg = 0;
    159            /* Check the parameters */
    160            assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
    161            /* Clear WDGTB[1:0] bits */
    162            tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
    163            /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
    164            tmpreg |= WWDG_Prescaler;
    165            /* Store the new value */
    166            WWDG->CFR = tmpreg;
    167          }
    168          
    169          /**
    170            * @brief  Sets the WWDG window value.
    171            * @param  WindowValue: specifies the window value to be compared to the downcounter.
    172            *   This parameter value must be lower than 0x80.
    173            * @retval None
    174            */
    175          void WWDG_SetWindowValue(uint8_t WindowValue)
    176          {
    177            __IO uint32_t tmpreg = 0;
    178          
    179            /* Check the parameters */
    180            assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
    181            /* Clear W[6:0] bits */
    182          
    183            tmpreg = WWDG->CFR & CFR_W_MASK;
    184          
    185            /* Set W[6:0] bits according to WindowValue value */
    186            tmpreg |= WindowValue & (uint32_t) BIT_MASK;
    187          
    188            /* Store the new value */
    189            WWDG->CFR = tmpreg;
    190          }
    191          
    192          /**
    193            * @brief  Enables the WWDG Early Wakeup interrupt(EWI).
    194            * @note   Once enabled this interrupt cannot be disabled except by a system reset.
    195            * @param  None
    196            * @retval None
    197            */
    198          void WWDG_EnableIT(void)
    199          {
    200            *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
    201          }
    202          
    203          /**
    204            * @brief  Sets the WWDG counter value.
    205            * @param  Counter: specifies the watchdog counter value.
    206            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    207            *   an immediate reset) 
    208            * @retval None
    209            */
    210          void WWDG_SetCounter(uint8_t Counter)
    211          {
    212            /* Check the parameters */
    213            assert_param(IS_WWDG_COUNTER(Counter));
    214            /* Write to T[6:0] bits to configure the counter value, no need to do
    215               a read-modify-write; writing a 0 to WDGA bit does nothing */
    216            WWDG->CR = Counter & BIT_MASK;
    217          }
    218          /**
    219            * @}
    220            */
    221          
    222          /** @defgroup WWDG_Group2 WWDG activation functions
    223           *  @brief   WWDG activation functions 
    224           *
    225          @verbatim   
    226           ===============================================================================
    227                                 WWDG activation function
    228           ===============================================================================  
    229          
    230          @endverbatim
    231            * @{
    232            */
    233          
    234          /**
    235            * @brief  Enables WWDG and load the counter value.                  
    236            * @param  Counter: specifies the watchdog counter value.
    237            *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
    238            *   an immediate reset)
    239            * @retval None
    240            */
    241          void WWDG_Enable(uint8_t Counter)
    242          {
    243            /* Check the parameters */
    244            assert_param(IS_WWDG_COUNTER(Counter));
    245            WWDG->CR = WWDG_CR_WDGA | Counter;
    246          }
    247          /**
    248            * @}
    249            */
    250          
    251          /** @defgroup WWDG_Group3 Interrupts and flags management functions
    252           *  @brief   Interrupts and flags management functions 
    253           *
    254          @verbatim   
    255           ===============================================================================
    256                           Interrupts and flags management functions
    257           ===============================================================================  
    258          
    259          @endverbatim
    260            * @{
    261            */
    262          
    263          /**
    264            * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
    265            * @param  None
    266            * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
    267            */
    268          FlagStatus WWDG_GetFlagStatus(void)
    269          {
    270            FlagStatus bitstatus = RESET;
    271              
    272            if ((WWDG->SR) != (uint32_t)RESET)
    273            {
    274              bitstatus = SET;
    275            }
    276            else
    277            {
    278              bitstatus = RESET;
    279            }
    280            return bitstatus;
    281          }
    282          
    283          /**
    284            * @brief  Clears Early Wakeup interrupt flag.
    285            * @param  None
    286            * @retval None
    287            */
    288          void WWDG_ClearFlag(void)
    289          {
    290            WWDG->SR = (uint32_t)RESET;
    291          }
    292          
    293          /**
    294            * @}
    295            */
    296          
    297          /**
    298            * @}
    299            */
    300          
    301          /**
    302            * @}
    303            */
    304          
    305          /**
    306            * @}
    307            */
    308          
    309          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   WWDG_ClearFlag
       8   WWDG_DeInit
         0   -> RCC_APB1PeriphResetCmd
         8   -> RCC_APB1PeriphResetCmd
       8   WWDG_Enable
         8   -> assert_failed
       0   WWDG_EnableIT
       0   WWDG_GetFlagStatus
       8   WWDG_SetCounter
         8   -> assert_failed
       8   WWDG_SetPrescaler
         8   -> assert_failed
      16   WWDG_SetWindowValue
        16   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      92  ?<Constant "C:\\Tools\\WL9F\\WL_F_Mo...">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       8  WWDG_ClearFlag
      26  WWDG_DeInit
      32  WWDG_Enable
       8  WWDG_EnableIT
      12  WWDG_GetFlagStatus
      32  WWDG_SetCounter
      46  WWDG_SetPrescaler
      50  WWDG_SetWindowValue

 
 322 bytes in section .text
 
 322 bytes of CODE memory

Errors: none
Warnings: none
