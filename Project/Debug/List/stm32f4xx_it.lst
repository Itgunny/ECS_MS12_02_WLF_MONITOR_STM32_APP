###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      08/Oct/2014  16:38:46 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\1\Desktop\141007 울산\CAN                       #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Platform\COMMON\SRC\stm3 #
#                    2f4xx_it.c                                               #
#    Command line =  "C:\Users\1\Desktop\141007 울산\CAN                      #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Platform\COMMON\SRC\stm3 #
#                    2f4xx_it.c" -D USE_STDPERIPH_DRIVER -D STM32F4XX -D      #
#                    USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN                #
#                    "C:\Users\1\Desktop\141007 울산\CAN                      #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\Debug\List\" -o  #
#                    "C:\Users\1\Desktop\141007 울산\CAN                      #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\Debug\Obj\"      #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\arm\INC\c\DLib_Config_Full.h" -I                 #
#                    "C:\Users\1\Desktop\141007 울산\CAN                      #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\..\Platform\COMM #
#                    ON\INC\" -I "C:\Users\1\Desktop\141007 울산\CAN          #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\..\Platform\TaeH #
#                    a - ECS\INC\" -I "C:\Users\1\Desktop\141007 울산\CAN     #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\..\Libraries\CMS #
#                    IS\Device\ST\STM32F4xx\Include\" -I                      #
#                    "C:\Users\1\Desktop\141007 울산\CAN                      #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\..\Libraries\STM #
#                    32F4xx_StdPeriph_Driver\inc\" -Oh --use_c++_inline -I    #
#                    "C:\Tools\IAR Systems\arm\CMSIS\Include\"                #
#    List file    =  C:\Users\1\Desktop\141007 울산\CAN                       #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\Debug\List\stm32 #
#                    f4xx_it.lst                                              #
#    Object file  =  C:\Users\1\Desktop\141007 울산\CAN                       #
#                    Update\SRC\WL_F_Monitor_APP_DMA\Project\Debug\Obj\stm32f #
#                    4xx_it.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\1\Desktop\141007 울산\CAN Update\SRC\WL_F_Monitor_APP_DMA\Platform\COMMON\SRC\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Template/stm32f4xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm32f4xx_it.h"
     32          #include "main.h"
     33          
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          
     40          //#define		DEBUG_CMD_RX
     41          //#define		DEBUG_CMD_TX
     42          //#define		DEBUG_CAN_RX
     43          //#define		DEBUG_CAN_TX
     44          #pragma pack(1)
     45          struct st_CAN_Msg
     46          {	
     47          	unsigned char Priority;
     48          	unsigned char Data_Page;
     49          	unsigned char PDU_Format;	
     50          	unsigned char PDU_Specific;		// 50
     51          	unsigned char Source_Address;	// 52
     52          };
     53          #pragma pack()
     54          
     55          CanRxMsg RxMsg;
     56          struct st_CAN_Msg Iden; 
     57          
     58          extern Realy_Control		rx_Realy_Control;
     59          extern EHCU_Status		rx_EHCU_Status;
     60          extern Auto_position_Status rx_Auto_position_Status;
     61          extern st_CANDATA_HCEPGN_65428	RX_HCEPGN_65428;
     62          extern WEIGHING_SYSTEM_STATUS_65450 rx_Weighing_System_Status;
     63          extern CMD_LAMP rx_CMD_LAMP;
     64          /* Private define ------------------------------------------------------------*/
     65          
     66          #define RING_BUF_SIZE			768
     67          #define UART2_Rx_BUF_SIZE		14			
     68          #define UART2_Tx_BUF_SIZE		17
     69          
     70          /*
     71          #define RX_MSG69		0x01
     72          #define RX_MSG69_M		0x02
     73          #define RX_MSG145		0x04
     74          #define RX_MSG161		0x08
     75          #define RX_MSG162		0x10
     76          #define RX_MSG163		0x20
     77          #define RX_MSG251		0x40
     78          #define RX_MSG252		0x80
     79          #define RX_MSG202		0x100
     80          #define RX_MSG253		0x200
     81          #define RX_MSG203		0x400
     82          #define RX_MSG239		0x800
     83          #define RX_MSG247		0x1000
     84          #define RX_MSG174		0x2000
     85          #define RX_MSG239_121	0x4000
     86          */
     87          #define RX_MSG11	0x01
     88          #define RX_MSG12	0x02
     89          #define RX_MSG21	0x04
     90          #define RX_MSG23	0x08
     91          #define RX_MSG61	0x10
     92          #define RX_MSG62	0x20
     93          #define RX_MSG101	0x40
     94          #define RX_MSG104	0x80
     95          #define RX_MSG105	0x100
     96          #define RX_MSG109	0x200
     97          #define RX_MSG121	0x400
     98          #define RX_MSG123	0x800
     99          #define RX_MSG201	0x1000
    100          #define RX_MSG203	0x2000
    101          		
    102          		
    103          #define RX_MSG47	0x4000
    104          		
    105          #define RX_MSG145	0x8000
    106          #define RX_MSG247	0x10000
    107          
    108          
    109          
    110          
    111          
    112          /* Private define ------------------------------------------------------------*/
    113          /* Private macro -------------------------------------------------------------*/
    114          /* Private variables ---------------------------------------------------------*/
    115          u8 ring_buf[RING_BUF_SIZE];		
    116          u16 pWriteBufPos = 0;
    117          u16 pReadBufPos = 0;
    118          u8 CanRecvCnt = 0;
    119          u16 TotPacketNum = 0;
    120          u32 pgn = 0;
    121          u32 RMCUpgn = 0;
    122          u16 TotMsgSize = 0;
    123          u8 Uart2_SerialTxMsg[UART2_Tx_BUF_SIZE];
    124          u8 Uart2_SerialRxMsg[UART2_Rx_BUF_SIZE];
    125          
    126          u8 Uart2_SerialTxCnt = 0;
    127          u8 Uart2_SerialRxCnt = 0;
    128          u16 CommErrCnt = 0;
    129          
    130          u8 SendEEPROMDataCnt = 0;
    131          u8 Flag_TxE2pRomData = 0;
    132          u8 stop_send_as_phone_data = 0;
    133          u8 Stm32_Update_CMD;
    134          u8 FatoryInit_Flag = 0;
    135          u8 CANUpdateFlag = 0;
    136          u8 CANUpdateSA = 0;
    137          
    138          
    139          u8 Buz1;
    140          
    141          extern u8 MoniInfoSendCnt;
    142          extern u8 MoniInfoTotalPacketNum;
    143          extern u8 RecvMachInfo;
    144          extern u8 MachineBasicInformation[78];
    145          extern u8 RTSFlag_61184;
    146          extern u8 CTSFlag_61184;
    147          extern u8 RecvTotalPacket_61184;
    148          extern u8 ACK_Multi_61184[8];
    149          extern u8 RMCU_CTSFlag_61184;
    150          extern u8 RMCU_RecvTotalPacket_61184;
    151          extern u8 RMCU_ACK_Multi_61184[8];
    152          
    153          
    154          
    155          extern u8 Flag_UartTxStart;
    156          extern u32 Flag_SerialRxMsg;
    157          extern u8 eepRomReadData1[32];
    158          
    159          extern u8 Uart2_RxMsg_Save_Data1[8];
    160          extern u8 Uart2_RxMsg_Save_Data2[8];
    161          extern u8 Uart2_RxMsg_AS_Phone_Data[8];
    162          extern u8 Uart2_RxMsg_Smk_Reg_Eli[8];
    163          
    164          extern u8 Uart2_RxMsg_Single_46[8];
    165          extern u8 Uart2_RxMsg_Single_69[8];
    166          extern u8 Uart2_RxMsg_Multi_69[21];
    167          extern u8 Uart2_RxMsg_Single_160[8];
    168          extern u8 Uart2_RxMsg_Multi_161[16];
    169          extern u8 Uart2_RxMsg_Single_162[8];
    170          extern u8 Uart2_RxMsg_Single_163[8];
    171          extern u8 Uart2_RxMsg_Single_174[8];
    172          extern u8 Uart2_RxMsg_Single_251[8];
    173          extern u8 Uart2_RxMsg_Single_252[8];
    174          extern u8 Uart2_RxMsg_Single_253[8];
    175          extern u8 Uart2_RxMsg_Single_239[8];
    176          extern u8 Uart2_RxMsg_Single_239_121[8];
    177          extern u8 Uart2_RxMsg_Single_247[8];
    178          
    179          
    180          //61184
    181          extern u8 Uart2_RxMsg_Single_11[8];
    182          extern u8 Uart2_RxMsg_Single_12[8];
    183          extern u8 Uart2_RxMsg_Single_21[8];
    184          extern u8 Uart2_RxMsg_Multi_23[13];
    185          extern u8 Uart2_RxMsg_Single_61[8];
    186          extern u8 Uart2_RxMsg_Single_62[8];
    187          extern u8 Uart2_RxMsg_Single_101[8];
    188          extern u8 Uart2_RxMsg_Single_104[8];
    189          extern u8 Uart2_RxMsg_Single_105[8];
    190          extern u8 Uart2_RxMsg_Single_109[8];
    191          extern u8 Uart2_RxMsg_Single_121[8];
    192          extern u8 Uart2_RxMsg_Single_123[8];
    193          extern u8 Uart2_RxMsg_Single_201[8];
    194          extern u8 Uart2_RxMsg_Single_203[8];
    195          //0xFFxx
    196          extern u8 Uart2_RxMsg_Single_47[8];
    197          extern u8 Uart2_RxMsg_Multi_145[22];
    198          extern u8 Uart2_RxMsg_Single_247[8];
    199          
    200          
    201          
    202          
    203          extern u8 SerialMsgRTC[16];
    204          extern u8 Lamp_name;
    205          extern u8 Lamp_Value;
    206          
    207          //////////////// stm32 update /////////////////////
    208          extern u8 Change_UART4_for_Download;
    209          extern u8 ST_Update;
    210          extern u8 UpdateMode;
    211          
    212          
    213          // Smart Key
    214          extern WL9FM_receive_smartkey recv_smartkey;
    215          extern WL9FM_flag_data smk_flag_data;
    216          extern int SMKSuccess;
    217          
    218          
    219          unsigned long long CANRXIndex = 0;
    220          unsigned long long SerialTXIndex = 0;
    221          
    222          extern u8 LCDOffCount;
    223          extern u16 OSUpdateCount;
    224          /* Private function prototypes -----------------------------------------------*/
    225          /* Private functions ---------------------------------------------------------*/
    226          void WL9F_CAN_Buffer_Init(void)
    227          {
    228          	Uart2_SerialTxMsg[0]  = 0x02;	// STX
    229          	Uart2_SerialTxMsg[1]  = 0xF5;	// ID
    230          	Uart2_SerialTxMsg[2]  = 8;		// Data Length
    231          	Uart2_SerialTxMsg[15] = 0;		// CRC
    232          	Uart2_SerialTxMsg[16] = 0x03;	// ETX
    233          
    234          	pWriteBufPos = 0;
    235          
    236          	TotPacketNum = 0;
    237          	pgn = 0;
    238          
    239          	Uart2_SerialTxCnt = 0;
    240          	CommErrCnt = 0;
    241          }
    242          
    243          uint16_t test,old_test;
    244          
    245          unsigned char test_temp[8];
    246          
    247          void OperateRingBuffer(void)
    248          {
    249          	if(pWriteBufPos >= (RING_BUF_SIZE-1))	// End of Ring Buffer
    250          		pWriteBufPos = 0;
    251          
    252          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.ExtId, 4);
    253          
    254          	pWriteBufPos += 4;
    255          
    256          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.Data, 8);
    257          	
    258          	pWriteBufPos += 8;	
    259          
    260          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    261          	
    262          }
    263          void RTCSend(void)
    264          {
    265          	if(pWriteBufPos >= (RING_BUF_SIZE-1)) // End of Ring Buffer
    266          		pWriteBufPos = 0;
    267          
    268          	memcpy(&ring_buf[pWriteBufPos], (u8*)&SerialMsgRTC[0], 12);
    269          
    270          	pWriteBufPos += 12;
    271          
    272          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    273          }
    274          
    275          
    276          void SendTo_E2PROM(void)
    277          {
    278          #if 1
    279          	if (SendEEPROMDataCnt < 2)	//	2번 보낸다.
    280          	{
    281          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[0], 8);
    282          		Uart2_SerialTxMsg[15] = 0xE1;
    283          	}	
    284          	else if (SendEEPROMDataCnt < 4)	//	2번 보낸다.
    285          	{
    286          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[8], 8);
    287          		Uart2_SerialTxMsg[15] = 0xE2;
    288          	}	
    289          	else
    290          	{
    291          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[16], 8);
    292          		Uart2_SerialTxMsg[15] = 0xE3;
    293          	}		
    294          
    295          	//  Enable the USART3 Transmit interrupt
    296          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    297          #endif
    298          }
    299          
    300          /******************************************************************************/
    301          /*            Cortex-M4 Processor Exceptions Handlers                         */
    302          /******************************************************************************/
    303          
    304          /**
    305            * @brief   This function handles NMI exception.
    306            * @param  None
    307            * @retval None
    308            */
    309          void NMI_Handler(void)
    310          {
    311          }
    312          
    313          /**
    314            * @brief  This function handles Hard Fault exception.
    315            * @param  None
    316            * @retval None
    317            */
    318          void HardFault_Handler(void)
    319          {
    320            /* Go to infinite loop when Hard Fault exception occurs */
    321            while (1)
    322            {
    323            }
    324          }
    325          
    326          /**
    327            * @brief  This function handles Memory Manage exception.
    328            * @param  None
    329            * @retval None
    330            */
    331          void MemManage_Handler(void)
    332          {
    333            /* Go to infinite loop when Memory Manage exception occurs */
    334            while (1)
    335            {
    336            }
    337          }
    338          
    339          /**
    340            * @brief  This function handles Bus Fault exception.
    341            * @param  None
    342            * @retval None
    343            */
    344          void BusFault_Handler(void)
    345          {
    346            /* Go to infinite loop when Bus Fault exception occurs */
    347            while (1)
    348            {
    349            }
    350          }
    351          
    352          /**
    353            * @brief  This function handles Usage Fault exception.
    354            * @param  None
    355            * @retval None
    356            */
    357          void UsageFault_Handler(void)
    358          {
    359            /* Go to infinite loop when Usage Fault exception occurs */
    360            while (1)
    361            {
    362            }
    363          }
    364          
    365          /**
    366            * @brief  This function handles SVCall exception.
    367            * @param  None
    368            * @retval None
    369            */
    370          void SVC_Handler(void)
    371          {
    372          }
    373          
    374          /**
    375            * @brief  This function handles Debug Monitor exception.
    376            * @param  None
    377            * @retval None
    378            */
    379          void DebugMon_Handler(void)
    380          {
    381          }
    382          
    383          /**
    384            * @brief  This function handles PendSVC exception.
    385            * @param  None
    386            * @retval None
    387            */
    388          void PendSV_Handler(void)
    389          {
    390          }
    391          
    392          /**
    393            * @brief  This function handles SysTick Handler.
    394            * @param  None
    395            * @retval None
    396            */
    397          void SysTick_Handler(void)
    398          {
    399            	TimeDelay_Decrement();
    400          
    401              ++WL9FM_TIME.Cnt_1mSec;
    402          
    403          	if (WL9FM_TIME.Cnt_1mSec % 1 == 0)                   //  1msec
    404          	{
    405                  WL9FM_TIME.Flag_1mSec = 1;
    406          
    407          		if (WL9FM_TIME.Cnt_1mSec % 10 == 0)              //  10msec
    408          		{
    409          			WL9FM_TIME.Flag_10mSec = 1;
    410          
    411          			if (WL9FM_TIME.Cnt_1mSec % 100 == 0)         //  100msec
    412          			{
    413          				WL9FM_TIME.Flag_100mSec = 1;
    414          
    415          				if(WL9FM_TIME.Cnt_1mSec % 500 == 0)			// 500msec
    416          				{
    417          					WL9FM_TIME.Flag_500mSec = 1;
    418          					if (WL9FM_TIME.Cnt_1mSec % 1000 == 0)    //  1000 msec
    419          					{
    420          						WL9FM_TIME.Flag_1Sec = 1;
    421          						WL9FM_TIME.Cnt_1mSec = 0;
    422          					}
    423          				}
    424          
    425          				
    426          			}
    427          		}
    428          	}    
    429          }
    430          
    431          /******************************************************************************/
    432          /*                 STM32F4xx Peripherals Interrupt Handlers                   */
    433          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    434          /*  available peripheral interrupt handler's name please refer to the startup */
    435          /*  file (startup_stm32f4xx.s).                                               */
    436          /******************************************************************************/
    437          
    438          /**
    439            * @brief  This function handles PPP interrupt request.
    440            * @param  None
    441            * @retval None
    442            */
    443          /*void PPP_IRQHandler(void)
    444          {
    445          }*/
    446          
    447          /**
    448            * @}
    449            */ 
    450          
    451          /**
    452            * @brief  This function handles CAN1 global interrupt request.
    453            * @param  None
    454            * @retval None
    455            */
    456          void CAN1_RX0_IRQHandler(void)
    457          {
    458          	u32 PF; 
    459          	u32 PS;
    460          	u32 PGN;
    461          
    462          	CAN_Receive(CAN1,CAN_FIFO0,&RxMsg);
    463          				
    464          	Iden.Source_Address = (RxMsg.ExtId & 0x000000ff)  >> 0;
    465          	Iden.PDU_Specific = (RxMsg.ExtId  & 0x0000ff00) >> 8;
    466          	
    467          	// Iden.Source_Address == 71	 -->>	MCU
    468          	// Iden.Source_Address == 228	 -->>	EHCU	
    469          	// Iden.Source_Address == 0x29	 -->>	Smart Key
    470          	// Iden.Source_Address == 23	 -->>	Cluster
    471          	// Iden.Source_Address == 221	 -->>	RCU
    472          	// Iden.Source_Address == 0	 -->>	ECM
    473          	// Iden.Source_Address == 3	 -->>	TCU
    474          	
    475          	if((Iden.Source_Address == 0x47) || (Iden.Source_Address == 0x17) || (Iden.Source_Address == 0x29) || 
    476          		(Iden.Source_Address == 0xE4) || (Iden.Source_Address == 0xDD)|| (Iden.Source_Address == 0x4a)|| (Iden.Source_Address == 0xf4)
    477          		|| (Iden.Source_Address == 0x00)|| (Iden.Source_Address == 0x03) || (Iden.Source_Address == 0x02))
    478          		{
    479          		#if 1
    480          			
    481          			if(CANUpdateFlag == 0)
    482          			{
    483          				PF = (RxMsg.ExtId  & 0x00ff0000) >> 16;
    484          				if((PF == 254) || (PF == 255) || (PF == 239) )
    485          				{	
    486          					
    487          					if(Iden.PDU_Specific == 232)	// Smart Key
    488          					{
    489          						smk_flag_data.recv_resp_packet |= RESPONSE_AUTHENTICATION;	
    490          						//smk_flag_data.recv_resp_packet |= 0x0100; 
    491          
    492          						memcpy((u8*)&recv_smartkey, (u8*)&RxMsg.Data[0], 8);
    493          					}
    494          					else
    495          					{
    496          		
    497          						//if(Iden.PDU_Specific == 0x9b)
    498          							CAN_RX(RxMsg);
    499          					}
    500          				}
    501          				
    502          				else
    503          				{                    
    504          	                		CAN_RX(RxMsg);
    505          				}
    506          		
    507          				CommErrCnt = 0;
    508          			}
    509          			else if(CANUpdateFlag == 1)
    510          			{
    511          				if(Iden.Source_Address == CANUpdateSA)
    512          				{
    513          					PF = (RxMsg.ExtId  & 0x00ff0000) >> 16;
    514          					PS = (RxMsg.ExtId  & 0x0000FF00) >> 8;
    515          					PGN = (RxMsg.ExtId  & 0x00FFFF00) >> 8;
    516          					if(PGN == 0xEFFA || PGN  == 0xECFA || PGN  == 0xEBFA)
    517          					{
    518          						CAN_RX(RxMsg);
    519          					}
    520          
    521          				}
    522          				
    523          			}
    524          		#else
    525          			if(CANUpdateFlag == 1)
    526          			{
    527          				if(Iden.Source_Address == CANUpdateSA)
    528          				{
    529          					PF = (RxMsg.ExtId  & 0x00ff0000) >> 16;
    530          					PS = (RxMsg.ExtId  & 0x0000FF00) >> 8;
    531          					PGN = (RxMsg.ExtId  & 0x00FFFF00) >> 8;
    532          					if(PGN == 0xEFFA || PGN  == 0xECFA || PGN  == 0xEBFA)
    533          					{
    534          						//OperateRingBuffer();
    535          						CAN_RX(RxMsg);
    536          						CANRXIndex++;
    537          					}
    538          
    539          				}
    540          				
    541          			}
    542          		#endif
    543          			
    544          			
    545          
    546          			
    547          			
    548          		}
    549          
    550          }
    551          
    552          /**
    553            * @brief  This function handles TIM4 global interrupt request.
    554            * @param  None
    555            * @retval None
    556            */
    557          void TIM4_IRQHandler(void)  //  10msec Timer / TimeBase UP Counter
    558          {
    559              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
    560              
    561              //  BUZZER Status가 "2" 일 경우 BUZZER OnTime 만큼 BUZZER On
    562              if (WL9FM_BUZZER.Status == 2)
    563              {
    564                  if (WL9FM_BUZZER.OnCnt++ < WL9FM_BUZZER.OnTime)
    565                  {
    566                      Buzzer_On();
    567                  }
    568                  else
    569                  {
    570                      WL9FM_BUZZER.Status = 0;               
    571                  }
    572              }        
    573              //  BUZZER Status가 "1" 일 경우 UnLimit BUZZER On
    574              else if (WL9FM_BUZZER.Status == 1)
    575              {
    576                  Buzzer_On();    
    577              }    
    578              else
    579              {
    580                  Buzzer_Off();
    581                  
    582                  WL9FM_BUZZER.Status = 0;               
    583                  WL9FM_BUZZER.OnTime = 0;
    584                  WL9FM_BUZZER.OnCnt  = 0;
    585              }
    586          
    587          #if 1
    588          	CommErrCnt++;
    589          
    590          	if(CommErrCnt >= 1000)
    591          		CommErrCnt = 1001;
    592          #endif
    593          }
    594          
    595          /**
    596            * @brief  This function handles TIM5 global interrupt request.
    597            * @param  None
    598            * @retval None
    599            */
    600          void TIM5_IRQHandler(void)  //  5msec Timer / TimeBase UP Counter    
    601          {
    602              TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
    603              
    604              KeySwitch_Process();    //  KeySwitch.c Func
    605          }
    606          
    607          /**
    608            * @brief  This function handles USART3 global interrupt request.
    609            * @param  None
    610            * @retval None
    611            */
    612            // STM32F407 <-> exynos4412 can_data
    613          
    614          unsigned char temp_61184;
    615          
    616          void USART2_IRQHandler(void)
    617          {
    618          	struct st_CAN_Message1 Send_Message;
    619          	
    620          	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    621          	{
    622          		Uart2_SerialRxMsg[Uart2_SerialRxCnt] = (u8)USART_ReceiveData(USART2);
    623          
    624          		  //  디버깅할 때만 사용할 것
    625          		#ifdef DEBUG_CAN_RX
    626          		DebugMsg_printf("%2x ", Uart2_SerialRxMsg[Uart2_SerialRxCnt]);
    627          		#endif
    628          		
    629          		switch(Uart2_SerialRxCnt)
    630          		{
    631          			case 0:
    632          				if(Uart2_SerialRxMsg[0] == 0x02)		// STX
    633          					Uart2_SerialRxCnt++;
    634          				break;
    635          			case UART2_Rx_BUF_SIZE-1:
    636          				Uart2_SerialRxCnt = 0;
    637          
    638          				if(Uart2_SerialRxMsg[UART2_Rx_BUF_SIZE-1] == 0x03)		// ETX
    639          				{
    640          					memcpy(&Send_Message,&Uart2_SerialRxMsg[1],12);	
    641          					Write_CAN_Single(Send_Message);
    642          				}
    643          				else
    644          				{
    645          					//  디버깅할 때만 사용할 것
    646          					//DebugMsg_printf("Protocol Fail\r\n");
    647          				}
    648          
    649          				break;
    650          			
    651          			default :
    652          				Uart2_SerialRxCnt++;
    653          				break;
    654          		}
    655          	}
    656          
    657          #if 0
    658          	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
    659          	{   
    660          		if((USART2->SR & 0x80) == RESET)
    661          			return;
    662          
    663          		if (pWriteBufPos == pReadBufPos)
    664          		{
    665          			if(Flag_TxE2pRomData == 1)
    666          			{
    667          			    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    668          			    return;
    669          		    }
    670          		}
    671          
    672          		if(pReadBufPos >= (RING_BUF_SIZE-1))
    673          			pReadBufPos = 0;
    674          
    675          		if((Uart2_SerialTxCnt == 0) && (pWriteBufPos != pReadBufPos))
    676          		{
    677          			memcpy(&Uart2_SerialTxMsg[3] , &ring_buf[pReadBufPos], 12);
    678          			
    679          		}
    680          		
    681          		USART_SendData(USART2, (u16)(Uart2_SerialTxMsg[Uart2_SerialTxCnt++]));    
    682          		
    683          		if (Uart2_SerialTxCnt >= UART2_Tx_BUF_SIZE)
    684          		{
    685          			#if 0
    686          			//Uart2_SerialTxCnt = 0;
    687          			//pReadBufPos += 12;
    688          			//USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    689          
    690          			if(Flag_TxE2pRomData == 0)
    691          			{
    692                          //  보내는 횟수 중요하다. 초기에 버그가 생실 수 있으니, 테스트 필요함!!!
    693          				//	EEPROM Data를 6번 보낸다.
    694          				if(SendEEPROMDataCnt > 5)	
    695          				{
    696          					Uart2_SerialTxCnt = 0;	
    697          					Uart2_SerialTxMsg[15] = 0;
    698          					Flag_TxE2pRomData = 1;
    699          						
    700          					//	EEPROM Data를 그만 보내고 CAN Data를 보낸다. 
    701          					Flag_UartTxStart = 0;
    702          					
    703          					//  Enable the USART2 Transmit interrupt
    704          					USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    705          					CAN_ITConfig(CAN1, CAN_IT_FMP0,ENABLE);			
    706          				}
    707          				else
    708          				{
    709          					SendEEPROMDataCnt++;
    710          			        	Uart2_SerialTxCnt = 0;
    711          
    712          					//  Disable the USART3 Transmit interrupt
    713          					USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    714          				}
    715          			}
    716          			else
    717          			{
    718          				Uart2_SerialTxCnt = 0;
    719          				pReadBufPos += 12;
    720          			}
    721          			#else
    722          			if(Flag_TxE2pRomData == 0)
    723          			{
    724                        
    725          				Uart2_SerialTxCnt = 0;	
    726          				Uart2_SerialTxMsg[15] = 0;
    727          				Flag_TxE2pRomData = 1;
    728          					
    729          				//	EEPROM Data를 그만 보내고 CAN Data를 보낸다. 
    730          				Flag_UartTxStart = 0;
    731          				
    732          				//  Enable the USART2 Transmit interrupt
    733          				USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    734          				CAN_ITConfig(CAN1, CAN_IT_FMP0,ENABLE);		
    735          				
    736          				
    737          			}
    738          			else
    739          			{
    740          				Uart2_SerialTxCnt = 0;
    741          				pReadBufPos += 12;
    742          				SerialTXIndex++;
    743          			}
    744          			#endif
    745          		}  
    746          	}
    747          #else
    748          	
    749          
    750          #endif
    751          
    752          }
    753          
    754          /*
    755          void DMA1_Stream6_IRQHandler(void)
    756          {
    757          	if (DMA_GetITStatus(DMA1_Stream6, DMA_IT_TCIF6) != RESET) 
    758              	{
    759              		if(pReadBufPos >= (RING_BUF_SIZE-1))
    760          			pReadBufPos = 0;
    761          
    762          		if((Uart2_SerialTxCnt == 0) && (pWriteBufPos != pReadBufPos))
    763          		{
    764          			memcpy(&Uart2_SerialTxMsg[3] , &ring_buf[pReadBufPos], 12);	
    765          		}
    766          		USART_SendData(USART2, (u16)(Uart2_SerialTxMsg[Uart2_SerialTxCnt++]));    
    767          		
    768          		if (Uart2_SerialTxCnt >= UART2_Tx_BUF_SIZE)
    769          		{
    770          			Uart2_SerialTxCnt = 0;
    771          			pReadBufPos += 12;
    772          			SerialTXIndex++;
    773          		}  
    774          	}
    775          }*/
    776          
    777          
    778          
    779          void UART4_IRQHandler(void)
    780          {
    781          	//  UART4 receive interrupt routine
    782          	if (USART_GetITStatus(UART4, USART_IT_RXNE) != RESET) 
    783              	{
    784              		if(Change_UART4_for_Download==0)
    785          			UART4_Receive_CMD();
    786          		else
    787          			UART4_Receive_File();
    788          				
    789          	}
    790          	//  UART4 transmit interrupt routine
    791          	if (USART_GetITStatus(UART4, USART_IT_TXE) != RESET)
    792          	{   
    793          		UART4_transmit_CMD();
    794          	}
    795          }
    796          
    797          u8 temp_rx_buf[4];
    798          
    799          
    800          void UART4_Receive_CMD(void)
    801          {
    802          	uint8_t Temp[Serial_COM4_TxSize];
    803          	//  Read one byte to the receive data register
    804          	WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt] = USART_ReceiveData(UART4);
    805          
    806          	
    807              	//  디버깅할 때만 사용할 것
    808          	#ifdef DEBUG_CMD_RX
    809          	DebugMsg_printf("%2x ", WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt]);
    810          	#endif
    811          
    812          	
    813          	switch (WL9FM_USART_INDEX.COM4_RxCnt)
    814          	{
    815          		case 0:
    816          				if (WL9FM_USART_DATA.COM4_RxBuf[0] == STX)
    817          				{
    818          					WL9FM_USART_INDEX.COM4_RxCnt++;
    819          				}	
    820          				else
    821          				{
    822          					WL9FM_USART_INDEX.COM4_RxCnt=0;
    823          				}
    824          				
    825          				break;
    826          		case 1:
    827          				if (WL9FM_USART_DATA.COM4_RxBuf[1]      == KeyCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    828          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LCDBLCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    829          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == BUZZERCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    830          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LAMPCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    831          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == CAMCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    832          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == DOWNCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    833          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == VersionCMD) WL9FM_USART_INDEX.COM4_RxCnt++;
    834          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == StartCANCMD) WL9FM_USART_INDEX.COM4_RxCnt++;    
    835          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == RTCCMD) WL9FM_USART_INDEX.COM4_RxCnt++;
    836          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == CANUPDATECMD) WL9FM_USART_INDEX.COM4_RxCnt++;
    837          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == SMKCMD) WL9FM_USART_INDEX.COM4_RxCnt++;
    838          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == OSUPDATECMD) WL9FM_USART_INDEX.COM4_RxCnt++;
    839          
    840          				
    841          
    842                          else
    843                          {
    844                            	WL9FM_USART_INDEX.COM4_RxCnt = 0;
    845                          }
    846          				break;
    847          
    848          		case Serial_COM4_RxSize-1: 
    849          				WL9FM_USART_INDEX.COM4_RxCnt = 0;
    850          				
    851          				//  디버깅할 때만 사용할 것
    852          				#ifdef DEBUG_CMD_RX
    853          				DebugMsg_printf("\r\n");
    854          				#endif
    855          
    856          		if (WL9FM_USART_DATA.COM4_RxBuf[Serial_COM4_RxSize-1] == ETX)
    857          		{
    858          			switch (WL9FM_USART_DATA.COM4_RxBuf[1])
    859          			{
    860          				case KeyCMD   :		//	Key Command
    861          
    862          					break;
    863          							
    864          				case LCDBLCMD :		//	LCD BackLight Command
    865          
    866          					//	LCD BackLight Level 조절.. Level0 ~ Level8
    867          					if (WL9FM_USART_DATA.COM4_RxBuf[2] < MaxBackLightLEVEL && (WL9FM_USART_DATA.COM4_RxBuf[2] > 0)) 												
    868          					{
    869          						LCDBL_PWM_LEVEL(WL9FM_USART_DATA.COM4_RxBuf[2]);
    870          					}
    871          
    872          					break;
    873          
    874          				case BUZZERCMD :	//	Buzzer Command
    875          					if (WL9FM_USART_DATA.COM4_RxBuf[2] == 0)	//	Buzzer Off
    876          					{
    877          						Buzzer_UnLimitOff();
    878          					}
    879          					else if(WL9FM_USART_DATA.COM4_RxBuf[2] == 1)					//	Buzzer On
    880          					{
    881          						Buzzer_UnLimitOn();
    882          					}
    883          					break;
    884          
    885          				case LAMPCMD :	//	Buzzer Command
    886          					Lamp_name = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0xf0)>>4;
    887          					Lamp_Value = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0x0f);
    888          					memcpy(&rx_CMD_LAMP , &WL9FM_USART_DATA.COM4_RxBuf[2], 8);	
    889          					Lamp_Update_State();
    890          					//Lamp_Update_System();
    891          					break;
    892          					
    893          				case CAMCMD:
    894          					cam_mode_change(WL9FM_USART_DATA.COM4_RxBuf[2]);
    895          					break;
    896          
    897          				case DOWNCMD:
    898          					Stm32_Update_CMD = WL9FM_USART_DATA.COM4_RxBuf[2];
    899          					FatoryInit_Flag = WL9FM_USART_DATA.COM4_RxBuf[3];
    900          					ST_Update=1;
    901          
    902          					break;
    903          				case VersionCMD:
    904          					
    905          					Temp[0] = 0x02;				
    906          					Temp[1] = VersionRES;				
    907          					Temp[2] = ((VERSION_HIGH  << 4) & 0xF0 ) + (VERSION_LOW & 0x0F);	
    908          					Temp[3] = ((VERSION_SUB_HIGH  << 4) & 0xF0 )+ (VERSION_SUB_LOW & 0x0F);	
    909          					// HW Version/////
    910          					Temp[4] = 'A';
    911          					Temp[5] = 1;
    912          					Temp[6] = 0;
    913          					//////////////////
    914          					Temp[Serial_COM4_RxSize-1] = 0x03;	
    915          					USARTx_EXYNOS(COM4, (char *)Temp);	
    916          					break;
    917          				case StartCANCMD:
    918          					//Flag_UartTxStart = 1;
    919          					CAN_ITConfig(CAN1, CAN_IT_FMP0,ENABLE);	
    920          					break;
    921          				case RTCCMD:
    922          					WL9FM_RTC.Year = WL9FM_USART_DATA.COM4_RxBuf[2];
    923          					WL9FM_RTC.Month = WL9FM_USART_DATA.COM4_RxBuf[3];
    924          					WL9FM_RTC.Date = WL9FM_USART_DATA.COM4_RxBuf[4];
    925          					WL9FM_RTC.Day = WL9FM_USART_DATA.COM4_RxBuf[5];
    926          					WL9FM_RTC.Hour = WL9FM_USART_DATA.COM4_RxBuf[6];
    927          					WL9FM_RTC.Minute= WL9FM_USART_DATA.COM4_RxBuf[7];
    928          					WL9FM_RTC.Second= WL9FM_USART_DATA.COM4_RxBuf[8];
    929          					WRITE_RTC(WL9FM_RTC);
    930          					break;
    931          
    932          				case SMKCMD:
    933          					
    934          					if(WL9FM_USART_DATA.COM4_RxBuf[2] == 0x00)
    935          					{
    936          						SendSMKAuthResult(SMKSuccess);
    937          					}
    938          					else
    939          					{
    940          						memcpy(&Uart2_RxMsg_Smk_Reg_Eli[0], &WL9FM_USART_DATA.COM4_RxBuf[0], 8);
    941          					}
    942          					break;
    943          				case CANUPDATECMD:
    944          					CANUpdateFlag = WL9FM_USART_DATA.COM4_RxBuf[2];
    945          					CANUpdateSA = WL9FM_USART_DATA.COM4_RxBuf[3];
    946          					break;
    947          				case OSUPDATECMD:
    948          					LCDOffCount = 0;
    949          					OSUpdateCount = 0;
    950          					break;
    951          					
    952          				default :
    953          					break;								
    954          			}
    955                          }						
    956          
    957          		//memset(WL9FM_USART_DATA.COM4_RxBuf, 0x0, Serial_COM4_RxSize);					
    958          				break;
    959          		
    960          		default :
    961          
    962          			WL9FM_USART_INDEX.COM4_RxCnt++;
    963          			break;
    964          	}	
    965          }
    966          
    967          void UART4_Receive_File(void)
    968          {
    969          	
    970          	//  Read one byte to the receive data register
    971          	WL9FM_USART_RX_FILE_DATA.File_RxBuf[WL9FM_USART_RX_FILE_DATA.File_RxCnt] = USART_ReceiveData(UART4);
    972          	
    973          	switch (WL9FM_USART_RX_FILE_DATA.File_RxCnt)
    974          	{
    975          		case 0:
    976          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[0] == STX)
    977          				{
    978          					WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
    979          				}						
    980          				break;
    981          		case 1029: 
    982          				WL9FM_USART_RX_FILE_DATA.File_RxCnt = 0;
    983          					
    984          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == ETX)
    985          				{
    986          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
    987          					ST_Update=1;
    988          				}
    989          				else if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == EOT)
    990          				{
    991          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
    992          					Change_UART4_for_Download =2;
    993          					ST_Update=1;
    994          				}
    995          				else
    996          				{
    997          					ACK_NACK_SendToExynos(NAK);
    998          				}
    999                                          break;
   1000          		default :
   1001          
   1002          			WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
   1003          			break;
   1004          	}					
   1005          }
   1006          
   1007          
   1008          void UART4_transmit_CMD(void)
   1009          {
   1010          	//  Write one byte to the transmit data register
   1011          	USART_SendData(UART4, WL9FM_USART_DATA.COM4_TxBuf[WL9FM_USART_INDEX.COM4_TxCnt++]);
   1012          
   1013          	if (WL9FM_USART_INDEX.COM4_TxIdx >= Serial_COM4_TxSize)
   1014          	{
   1015          		WL9FM_USART_INDEX.COM4_TxIdx = Serial_COM4_TxSize;
   1016          	}    
   1017          	if (WL9FM_USART_INDEX.COM4_TxCnt == WL9FM_USART_INDEX.COM4_TxIdx)
   1018          	{
   1019          		//  Disable the UART4 Transmit interrupt
   1020          		USART_ITConfig(UART4, USART_IT_TXE, DISABLE);
   1021          
   1022          		WL9FM_USART_INDEX.COM4_TxIdx = 0; //  transmit buffer Index clear
   1023          		WL9FM_USART_INDEX.COM4_TxCnt = 0; //  transmit buffer Cnt   clear
   1024          	}              
   1025          	
   1026          }
   1027          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
      32   CAN1_RX0_IRQHandler
        16   -> CAN_RX
        16   -> CAN_Receive
        16   -> __aeabi_memcpy
        32   -> __aeabi_memcpy4
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
       8   OperateRingBuffer
         0   -> USART_ITConfig
         8   -> __aeabi_memcpy
       0   PendSV_Handler
       8   RTCSend
         0   -> USART_ITConfig
         8   -> __aeabi_memcpy
       0   SVC_Handler
       8   SendTo_E2PROM
         0   -> USART_ITConfig
         8   -> __aeabi_memcpy
       8   SysTick_Handler
         8   -> TimeDelay_Decrement
       8   TIM4_IRQHandler
         8   -> Buzzer_Off
         8   -> Buzzer_On
         8   -> TIM_ClearITPendingBit
       8   TIM5_IRQHandler
         0   -> KeySwitch_Process
         8   -> TIM_ClearITPendingBit
       8   UART4_IRQHandler
         8   -> UART4_Receive_CMD
         8   -> UART4_Receive_File
         8   -> UART4_transmit_CMD
         8   -> USART_GetITStatus
      24   UART4_Receive_CMD
        24   -> Buzzer_UnLimitOff
        24   -> Buzzer_UnLimitOn
        24   -> CAN_ITConfig
        24   -> LCDBL_PWM_LEVEL
        24   -> Lamp_Update_State
        24   -> SendSMKAuthResult
        24   -> USART_ReceiveData
        24   -> USARTx_EXYNOS
        24   -> WRITE_RTC
        24   -> __aeabi_memcpy
        24   -> cam_mode_change
       8   UART4_Receive_File
         0   -> ACK_NACK_SendToExynos
         8   -> USART_ReceiveData
         8   -> __aeabi_memcpy
      16   UART4_transmit_CMD
        16   -> USART_ITConfig
        16   -> USART_SendData
      24   USART2_IRQHandler
        24   -> USART_GetITStatus
        24   -> USART_ReceiveData
        24   -> Write_CAN_Single
        24   -> __aeabi_memcpy
       0   UsageFault_Handler
       0   WL9F_CAN_Buffer_Init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_3
       4  ??DataTable12_4
       4  ??DataTable12_5
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
      20  ?Subroutine0
       2  BusFault_Handler
       1  Buz1
     208  CAN1_RX0_IRQHandler
       8  CANRXIndex
       1  CanRecvCnt
       2  DebugMon_Handler
       1  Flag_TxE2pRomData
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
      62  OperateRingBuffer
       2  PendSV_Handler
       4  RMCUpgn
      40  RTCSend
     812  RxMsg
          Iden
          Uart2_SerialTxCnt
          Stm32_Update_CMD
          FatoryInit_Flag
          CANUpdateFlag
          CANUpdateSA
          pWriteBufPos
          TotPacketNum
          CommErrCnt
          pgn
          ring_buf
       2  SVC_Handler
      62  SendTo_E2PROM
       8  SerialTXIndex
     106  SysTick_Handler
      86  TIM4_IRQHandler
      20  TIM5_IRQHandler
       2  TotMsgSize
      56  UART4_IRQHandler
     502  UART4_Receive_CMD
     114  UART4_Receive_File
      64  UART4_transmit_CMD
      90  USART2_IRQHandler
      17  Uart2_SerialRxMsg
          Uart2_SerialRxCnt
      21  Uart2_SerialTxMsg
          SendEEPROMDataCnt
       2  UsageFault_Handler
      40  WL9F_CAN_Buffer_Init
       2  old_test
       2  pReadBufPos
       1  stop_send_as_phone_data
       1  temp_61184
       4  temp_rx_buf
       2  test
       8  test_temp

 
   895 bytes in section .bss
 1 598 bytes in section .text
 
 1 598 bytes of CODE memory
   895 bytes of DATA memory

Errors: none
Warnings: 1
