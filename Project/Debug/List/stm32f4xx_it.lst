###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      27/May/2014  21:54:46 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Platform\COMM #
#                    ON\SRC\stm32f4xx_it.c                                    #
#    Command line =  C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Platform\COMM #
#                    ON\SRC\stm32f4xx_it.c -D USE_STDPERIPH_DRIVER -D         #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Project\Debug #
#                    \List\ -o C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Pro #
#                    ject\Debug\Obj\ --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR            #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Proje #
#                    ct\..\Platform\COMMON\INC\ -I                            #
#                    "C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Project\..\P #
#                    latform\TaeHa - ECS\INC\" -I                             #
#                    C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Project\..\Li #
#                    braries\CMSIS\Device\ST\STM32F4xx\Include\ -I            #
#                    C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Project\..\Li #
#                    braries\STM32F4xx_StdPeriph_Driver\inc\ -Oh              #
#                    --use_c++_inline -I "C:\Tools\IAR Systems\Embedded       #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Project\Debug #
#                    \List\stm32f4xx_it.lst                                   #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Project\Debug #
#                    \Obj\stm32f4xx_it.o                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP_Keypad04.01\Platform\COMMON\SRC\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Template/stm32f4xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm32f4xx_it.h"
     32          #include "main.h"
     33          
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          
     40          //#define		DEBUG_CMD_RX
     41          //#define		DEBUG_CMD_TX
     42          //#define		DEBUG_CAN_RX
     43          //#define		DEBUG_CAN_TX
     44          #pragma pack(1)
     45          struct st_CAN_Msg
     46          {	
     47          	unsigned char Priority;
     48          	unsigned char Data_Page;
     49          	unsigned char PDU_Format;	
     50          	unsigned char PDU_Specific;		// 50
     51          	unsigned char Source_Address;	// 52
     52          };
     53          #pragma pack()
     54          
     55          CanRxMsg RxMsg;
     56          struct st_CAN_Msg Iden; 
     57          
     58          extern Realy_Control		rx_Realy_Control;
     59          extern EHCU_Status		rx_EHCU_Status;
     60          extern Auto_position_Status rx_Auto_position_Status;
     61          extern st_CANDATA_HCEPGN_65428	RX_HCEPGN_65428;
     62          extern WEIGHING_SYSTEM_STATUS_65450 rx_Weighing_System_Status;
     63          /* Private define ------------------------------------------------------------*/
     64          
     65          #define RING_BUF_SIZE			768*10
     66          #define UART2_Rx_BUF_SIZE		27			// Max Multi Packet Data -> 3°³
     67          #define UART2_Tx_BUF_SIZE		17
     68          
     69          /*
     70          #define RX_MSG69		0x01
     71          #define RX_MSG69_M		0x02
     72          #define RX_MSG145		0x04
     73          #define RX_MSG161		0x08
     74          #define RX_MSG162		0x10
     75          #define RX_MSG163		0x20
     76          #define RX_MSG251		0x40
     77          #define RX_MSG252		0x80
     78          #define RX_MSG202		0x100
     79          #define RX_MSG253		0x200
     80          #define RX_MSG203		0x400
     81          #define RX_MSG239		0x800
     82          #define RX_MSG247		0x1000
     83          #define RX_MSG174		0x2000
     84          #define RX_MSG239_121	0x4000
     85          */
     86          #define RX_MSG11	0x01
     87          #define RX_MSG12	0x02
     88          #define RX_MSG21	0x04
     89          #define RX_MSG23	0x08
     90          #define RX_MSG61	0x10
     91          #define RX_MSG62	0x20
     92          #define RX_MSG101	0x40
     93          #define RX_MSG104	0x80
     94          #define RX_MSG105	0x100
     95          #define RX_MSG109	0x200
     96          #define RX_MSG121	0x400
     97          #define RX_MSG123	0x800
     98          #define RX_MSG201	0x1000
     99          #define RX_MSG203	0x2000
    100          		
    101          		
    102          #define RX_MSG47	0x4000
    103          		
    104          #define RX_MSG145	0x8000
    105          #define RX_MSG247	0x10000
    106          
    107          
    108          
    109          
    110          
    111          /* Private define ------------------------------------------------------------*/
    112          /* Private macro -------------------------------------------------------------*/
    113          /* Private variables ---------------------------------------------------------*/
    114          u8 ring_buf[RING_BUF_SIZE];		
    115          u16 pWriteBufPos = 0;
    116          u16 pReadBufPos = 0;
    117          u8 CanRecvCnt = 0;
    118          u16 TotPacketNum = 0;
    119          u32 pgn = 0;
    120          u32 RMCUpgn = 0;
    121          u16 TotMsgSize = 0;
    122          u8 Uart2_SerialTxMsg[UART2_Tx_BUF_SIZE];
    123          u8 Uart2_SerialRxMsg[UART2_Rx_BUF_SIZE];
    124          
    125          u8 Uart2_SerialTxCnt = 0;
    126          u8 Uart2_SerialRxCnt = 0;
    127          u16 CommErrCnt = 0;
    128          
    129          u8 SendEEPROMDataCnt = 0;
    130          u8 Flag_TxE2pRomData = 0;
    131          u8 stop_send_as_phone_data = 0;
    132          u8 Stm32_Update_CMD;
    133          
    134          u8 Buz1;
    135          
    136          extern u8 MoniInfoSendCnt;
    137          extern u16 Flag_1Sec_MoniInfo;
    138          extern u8 MoniInfoTotalPacketNum;
    139          extern u8 RecvMachInfo;
    140          extern u8 MachineBasicInformation[78];
    141          extern u8 RTSFlag_61184;
    142          extern u8 CTSFlag_61184;
    143          extern u8 RecvTotalPacket_61184;
    144          extern u8 ACK_Multi_61184[8];
    145          extern u8 RMCU_CTSFlag_61184;
    146          extern u8 RMCU_RecvTotalPacket_61184;
    147          extern u8 RMCU_ACK_Multi_61184[8];
    148          
    149          
    150          
    151          extern u8 Flag_UartTxStart;
    152          extern u32 Flag_SerialRxMsg;
    153          extern u8 eepRomReadData1[32];
    154          
    155          extern u8 Uart2_RxMsg_Save_Data1[8];
    156          extern u8 Uart2_RxMsg_Save_Data2[8];
    157          extern u8 Uart2_RxMsg_AS_Phone_Data[8];
    158          extern u8 Uart2_RxMsg_Smk_Reg_Eli[8];
    159          
    160          extern u8 Uart2_RxMsg_Single_46[8];
    161          extern u8 Uart2_RxMsg_Single_69[8];
    162          extern u8 Uart2_RxMsg_Multi_69[21];
    163          extern u8 Uart2_RxMsg_Single_160[8];
    164          extern u8 Uart2_RxMsg_Multi_161[16];
    165          extern u8 Uart2_RxMsg_Single_162[8];
    166          extern u8 Uart2_RxMsg_Single_163[8];
    167          extern u8 Uart2_RxMsg_Single_174[8];
    168          extern u8 Uart2_RxMsg_Single_251[8];
    169          extern u8 Uart2_RxMsg_Single_252[8];
    170          extern u8 Uart2_RxMsg_Single_253[8];
    171          extern u8 Uart2_RxMsg_Single_239[8];
    172          extern u8 Uart2_RxMsg_Single_239_121[8];
    173          extern u8 Uart2_RxMsg_Single_247[8];
    174          
    175          
    176          //61184
    177          extern u8 Uart2_RxMsg_Single_11[8];
    178          extern u8 Uart2_RxMsg_Single_12[8];
    179          extern u8 Uart2_RxMsg_Single_21[8];
    180          extern u8 Uart2_RxMsg_Multi_23[13];
    181          extern u8 Uart2_RxMsg_Single_61[8];
    182          extern u8 Uart2_RxMsg_Single_62[8];
    183          extern u8 Uart2_RxMsg_Single_101[8];
    184          extern u8 Uart2_RxMsg_Single_104[8];
    185          extern u8 Uart2_RxMsg_Single_105[8];
    186          extern u8 Uart2_RxMsg_Single_109[8];
    187          extern u8 Uart2_RxMsg_Single_121[8];
    188          extern u8 Uart2_RxMsg_Single_123[8];
    189          extern u8 Uart2_RxMsg_Single_201[8];
    190          extern u8 Uart2_RxMsg_Single_203[8];
    191          //0xFFxx
    192          extern u8 Uart2_RxMsg_Single_47[8];
    193          extern u8 Uart2_RxMsg_Multi_145[22];
    194          extern u8 Uart2_RxMsg_Single_247[8];
    195          
    196          
    197          
    198          
    199          extern u8 SerialMsgRTC[16];
    200          extern u8 Lamp_name;
    201          extern u8 Lamp_Value;
    202          
    203          //////////////// stm32 update /////////////////////
    204          extern u8 Change_UART4_for_Download;
    205          extern u8 ST_Update;
    206          
    207          /* Private function prototypes -----------------------------------------------*/
    208          /* Private functions ---------------------------------------------------------*/
    209          void WL9F_CAN_Buffer_Init(void)
    210          {
    211          	Uart2_SerialTxMsg[0]  = 0x02;	// STX
    212          	Uart2_SerialTxMsg[1]  = 0xF5;	// ID
    213          	Uart2_SerialTxMsg[2]  = 8;		// Data Length
    214          	Uart2_SerialTxMsg[15] = 0;		// CRC
    215          	Uart2_SerialTxMsg[16] = 0x03;	// ETX
    216          
    217          	pWriteBufPos = 0;
    218          
    219          	TotPacketNum = 0;
    220          	pgn = 0;
    221          
    222          	Uart2_SerialTxCnt = 0;
    223          	CommErrCnt = 0;
    224          }
    225          
    226          uint16_t test,old_test;
    227          
    228          unsigned char test_temp[8];
    229          
    230          void OperateRingBuffer(void)
    231          {
    232          	if(pWriteBufPos >= (RING_BUF_SIZE-1))	// End of Ring Buffer
    233          		pWriteBufPos = 0;
    234          
    235          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.ExtId, 4);
    236          
    237          	pWriteBufPos += 4;
    238          
    239          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.Data, 8);
    240          	
    241          	pWriteBufPos += 8;	
    242          
    243          	if(RxMsg.ExtId==0x18fff7dd || RxMsg.ExtId==0x18fff747) // rcu status
    244          	{
    245          		memcpy( &rx_Realy_Control, (u8*)&RxMsg.Data, 8);
    246          	}
    247          
    248          	else if(RxMsg.ExtId==0x18EFFF47 || RxMsg.ExtId==0x18EF2847) // auto_position
    249          	{
    250          		if(RxMsg.Data[0] == 124)
    251          		{
    252          			memcpy( &rx_Auto_position_Status, (u8*)&RxMsg.Data, 8);
    253          		}
    254          		
    255          	}
    256          	else if(RxMsg.ExtId==0x18ff9447) // lamp
    257          	{
    258          		memcpy( &RX_HCEPGN_65428, (u8*)&RxMsg.Data, 8);
    259          	}
    260          	else if(RxMsg.ExtId == 0x18ffaa47)	// Weighing System (Work Load Lamp)
    261          	{
    262          		memcpy( &rx_Weighing_System_Status, (u8*)&RxMsg.Data, 8);
    263          	}
    264          	
    265          	else if(RxMsg.ExtId == 0x18ffede4)	// EHCU
    266          	{
    267          		memcpy( &rx_EHCU_Status, (u8*)&RxMsg.Data, 8);
    268          	}
    269          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    270          	
    271          }
    272          
    273          void SendTo_E2PROM(void)
    274          {
    275          #if 1
    276          	if (SendEEPROMDataCnt < 2)	//	2¹ø º¸³½´Ù.
    277          	{
    278          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[0], 8);
    279          		Uart2_SerialTxMsg[15] = 0xE1;
    280          	}	
    281          	else if (SendEEPROMDataCnt < 4)	//	2¹ø º¸³½´Ù.
    282          	{
    283          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[8], 8);
    284          		Uart2_SerialTxMsg[15] = 0xE2;
    285          	}	
    286          	else
    287          	{
    288          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[16], 8);
    289          		Uart2_SerialTxMsg[15] = 0xE3;
    290          	}		
    291          
    292          	//  Enable the USART3 Transmit interrupt
    293          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    294          #endif
    295          }
    296          
    297          /******************************************************************************/
    298          /*            Cortex-M4 Processor Exceptions Handlers                         */
    299          /******************************************************************************/
    300          
    301          /**
    302            * @brief   This function handles NMI exception.
    303            * @param  None
    304            * @retval None
    305            */
    306          void NMI_Handler(void)
    307          {
    308          }
    309          
    310          /**
    311            * @brief  This function handles Hard Fault exception.
    312            * @param  None
    313            * @retval None
    314            */
    315          void HardFault_Handler(void)
    316          {
    317            /* Go to infinite loop when Hard Fault exception occurs */
    318            while (1)
    319            {
    320            }
    321          }
    322          
    323          /**
    324            * @brief  This function handles Memory Manage exception.
    325            * @param  None
    326            * @retval None
    327            */
    328          void MemManage_Handler(void)
    329          {
    330            /* Go to infinite loop when Memory Manage exception occurs */
    331            while (1)
    332            {
    333            }
    334          }
    335          
    336          /**
    337            * @brief  This function handles Bus Fault exception.
    338            * @param  None
    339            * @retval None
    340            */
    341          void BusFault_Handler(void)
    342          {
    343            /* Go to infinite loop when Bus Fault exception occurs */
    344            while (1)
    345            {
    346            }
    347          }
    348          
    349          /**
    350            * @brief  This function handles Usage Fault exception.
    351            * @param  None
    352            * @retval None
    353            */
    354          void UsageFault_Handler(void)
    355          {
    356            /* Go to infinite loop when Usage Fault exception occurs */
    357            while (1)
    358            {
    359            }
    360          }
    361          
    362          /**
    363            * @brief  This function handles SVCall exception.
    364            * @param  None
    365            * @retval None
    366            */
    367          void SVC_Handler(void)
    368          {
    369          }
    370          
    371          /**
    372            * @brief  This function handles Debug Monitor exception.
    373            * @param  None
    374            * @retval None
    375            */
    376          void DebugMon_Handler(void)
    377          {
    378          }
    379          
    380          /**
    381            * @brief  This function handles PendSVC exception.
    382            * @param  None
    383            * @retval None
    384            */
    385          void PendSV_Handler(void)
    386          {
    387          }
    388          
    389          /**
    390            * @brief  This function handles SysTick Handler.
    391            * @param  None
    392            * @retval None
    393            */
    394          void SysTick_Handler(void)
    395          {
    396            	TimeDelay_Decrement();
    397          
    398              ++WL9FM_TIME.Cnt_1mSec;
    399          
    400          	if (WL9FM_TIME.Cnt_1mSec % 1 == 0)                   //  1msec
    401          	{
    402                  WL9FM_TIME.Flag_1mSec = 1;
    403          
    404          		if (WL9FM_TIME.Cnt_1mSec % 10 == 0)              //  10msec
    405          		{
    406          			WL9FM_TIME.Flag_10mSec = 1;
    407          
    408          			if (WL9FM_TIME.Cnt_1mSec % 100 == 0)         //  100msec
    409          			{
    410          				WL9FM_TIME.Flag_100mSec = 1;
    411          
    412          				if(WL9FM_TIME.Cnt_1mSec % 500 == 0)			// 500msec
    413          				{
    414          					WL9FM_TIME.Flag_500mSec = 1;
    415          					if (WL9FM_TIME.Cnt_1mSec % 1000 == 0)    //  1000 msec
    416          					{
    417          						WL9FM_TIME.Flag_1Sec = 1;
    418          						WL9FM_TIME.Cnt_1mSec = 0;
    419          					}
    420          				}
    421          
    422          				
    423          			}
    424          		}
    425          	}    
    426          }
    427          
    428          /******************************************************************************/
    429          /*                 STM32F4xx Peripherals Interrupt Handlers                   */
    430          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    431          /*  available peripheral interrupt handler's name please refer to the startup */
    432          /*  file (startup_stm32f4xx.s).                                               */
    433          /******************************************************************************/
    434          
    435          /**
    436            * @brief  This function handles PPP interrupt request.
    437            * @param  None
    438            * @retval None
    439            */
    440          /*void PPP_IRQHandler(void)
    441          {
    442          }*/
    443          
    444          /**
    445            * @}
    446            */ 
    447          
    448          /**
    449            * @brief  This function handles CAN1 global interrupt request.
    450            * @param  None
    451            * @retval None
    452            */
    453          void CAN1_RX0_IRQHandler(void)
    454          {
    455          	u32 PF; 
    456          
    457          	CAN_Receive(CAN1,CAN_FIFO0,&RxMsg);
    458          				
    459          	Iden.Source_Address = (RxMsg.ExtId & 0x000000ff)  >> 0;
    460          	Iden.PDU_Specific = (RxMsg.ExtId  & 0x0000ff00) >> 8;
    461          	
    462          	// Iden.Source_Address == 71	 -->>	MCU
    463          	// Iden.Source_Address == 228	 -->>	EHCU	
    464          	// Iden.Source_Address == 29	 -->>	Smart Key
    465          	// Iden.Source_Address == 23	 -->>	Cluster
    466          	// Iden.Source_Address == 221	 -->>	RCU
    467          	// Iden.Source_Address == 0	 -->>	ECM
    468          	// Iden.Source_Address == 3	 -->>	TCU
    469          	
    470          	if((Iden.Source_Address == 71) || (Iden.Source_Address == 23) || (Iden.Source_Address == 29) || 
    471          		(Iden.Source_Address == 228) || (Iden.Source_Address == 221)|| (Iden.Source_Address == 0x4a)|| (Iden.Source_Address == 0xf4)
    472          		|| (Iden.Source_Address == 0x00)|| (Iden.Source_Address == 0x03))
    473          		{
    474          			if(++CanRecvCnt >= 100)
    475          			{
    476          				CanRecvCnt = 0;
    477          	
    478          				if(pWriteBufPos >= (768*10-1)) // End of Ring Buffer
    479          					pWriteBufPos = 0;
    480          	
    481          				memcpy(&ring_buf[pWriteBufPos], (u8*)&SerialMsgRTC[0], 12);
    482          			
    483          				pWriteBufPos += 12;
    484          				
    485          			}
    486          	
    487          	
    488          			PF = (RxMsg.ExtId  & 0x00ff0000) >> 16;
    489          	
    490          			if((PF == 254) || (PF == 255) || (PF == 239) )
    491          			{	
    492          				if(Iden.PDU_Specific == 251)
    493          				{
    494          					MoniInfoSendCnt = 0;
    495          					Flag_1Sec_MoniInfo = 0;
    496          					MoniInfoTotalPacketNum = 0;
    497          				}
    498          				else
    499          				{
    500          					if( (Iden.PDU_Specific == 84)  ) 
    501          					{
    502          					
    503          						Buz1 = (RxMsg.Data[2] & 0x30 ) >> 4; 		// 1 :On 	0 : Off
    504          					
    505          						if( (Buz1 == 1))
    506          						{
    507          							Buzzer_SendToEXYNOS(1);
    508          						}
    509          						else
    510          						{
    511          							Buzzer_SendToEXYNOS(0);
    512          						}
    513          					}
    514          					//if(Iden.PDU_Specific == 0x9b)
    515          						OperateRingBuffer();
    516          				}
    517          			}
    518          			else if((PF == 235) || (PF == 236))
    519          			{
    520          				if((Iden.PDU_Specific == 255)||(Iden.PDU_Specific == 0x28))
    521          				{
    522          					if(PF == 236)		// TP.CM_BAM
    523          					{ 
    524          						if(RxMsg.Data[0] == 32) 	// Control Byte (Normal)
    525          						{
    526          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    527          							if(pgn == 65340)
    528          							{
    529          								TotPacketNum = RxMsg.Data[3];		// Total number of packets
    530          								TotMsgSize = (RxMsg.Data[2] << 8) | RxMsg.Data[1];
    531          							}
    532          							else
    533          							{
    534          								Uart2_SerialTxMsg[15] = 0;
    535          								OperateRingBuffer();
    536          							}
    537          							return;
    538          						}
    539          
    540          						else if(RxMsg.Data[0] == 17)	// Control Byte (CTS) 0x11
    541          						{
    542          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    543          							if(pgn == 61184)
    544          							{
    545          								RTSFlag_61184 = 2;
    546          							}
    547          							
    548          						}
    549          						else if(RxMsg.Data[0] == 19)	// Control Byte (ACK) 0x13 
    550          						{
    551          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    552          							if(pgn == 61184)
    553          							{
    554          								RTSFlag_61184 = 0;
    555          							}
    556          						}
    557          						else if(RxMsg.Data[0] == 16)	// Control Byte (RTS) 0x10
    558          						{
    559          							if(Iden.Source_Address == 0x4a)
    560          							{
    561          								Uart2_SerialTxMsg[15] = 0;
    562          								OperateRingBuffer();
    563          								RMCUpgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    564          								if(RMCUpgn == 61184)
    565          								{
    566          									 Send_CTS_61184(RxMsg.Data,0x4A);
    567          									 RMCU_CTSFlag_61184 = 1;
    568          									 RMCU_RecvTotalPacket_61184 = RxMsg.Data[3];
    569          									 memcpy((u8*)RMCU_ACK_Multi_61184,(u8*)RxMsg.Data,8);
    570          								}
    571          							}
    572          							else
    573          							{
    574          								Uart2_SerialTxMsg[15] = 0;
    575          								OperateRingBuffer();
    576          								pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    577          								if(pgn == 61184)
    578          								{
    579          									 Send_CTS_61184(RxMsg.Data,71);
    580          									 CTSFlag_61184 = 1;
    581          									 RecvTotalPacket_61184 = RxMsg.Data[3];
    582          									 memcpy((u8*)ACK_Multi_61184,(u8*)RxMsg.Data,8);
    583          								}
    584          							}
    585          							
    586          							
    587          							
    588          						}
    589          
    590          								
    591          					}
    592          	
    593          					if(Iden.Source_Address == 0x4a)
    594          					{
    595          						if(PF == 235)
    596          						{
    597          							Uart2_SerialTxMsg[15] = 0;
    598          							OperateRingBuffer();
    599          							if(RMCUpgn == 61184)
    600          							{
    601          								if(RMCU_RecvTotalPacket_61184 == RxMsg.Data[0])
    602          								{
    603          									RMCU_RecvTotalPacket_61184 = 0;
    604          									Send_ACK_61184(RMCU_ACK_Multi_61184,0x4a);
    605          								}
    606          							
    607          							}
    608          
    609          							
    610          						}
    611          					}else
    612          					{
    613          						if(PF == 235)
    614          						{
    615          							if(pgn == 65340)
    616          							{
    617          								memcpy(&MachineBasicInformation[(RxMsg.Data[0]-1)*7], &RxMsg.Data[1] , 7);
    618          								if(RxMsg.Data[0] == TotPacketNum)
    619          								{
    620          									pgn = TotPacketNum = 0;
    621          									RecvMachInfo = 1;
    622          								}
    623          							}
    624          							
    625          							else
    626          							{
    627          								Uart2_SerialTxMsg[15] = 0;
    628          								OperateRingBuffer();
    629          							}
    630          
    631          							if(pgn == 61184)
    632          							{
    633          								if(RecvTotalPacket_61184 == RxMsg.Data[0])
    634          								{
    635          									RecvTotalPacket_61184 = 0;
    636          									Send_ACK_61184(ACK_Multi_61184,71);
    637          								}
    638          							
    639          							}
    640          						}
    641          					}
    642          					
    643          				}
    644          			}
    645          	
    646          			CommErrCnt = 0;
    647          		}
    648          
    649          }
    650          
    651          /**
    652            * @brief  This function handles TIM4 global interrupt request.
    653            * @param  None
    654            * @retval None
    655            */
    656          void TIM4_IRQHandler(void)  //  10msec Timer / TimeBase UP Counter
    657          {
    658              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
    659              
    660              //  BUZZER Status°¡ "2" ÀÏ °æ¿ì BUZZER OnTime ¸¸Å­ BUZZER On
    661              if (WL9FM_BUZZER.Status == 2)
    662              {
    663                  if (WL9FM_BUZZER.OnCnt++ < WL9FM_BUZZER.OnTime)
    664                  {
    665                      Buzzer_On();
    666                  }
    667                  else
    668                  {
    669                      WL9FM_BUZZER.Status = 0;               
    670                  }
    671              }        
    672              //  BUZZER Status°¡ "1" ÀÏ °æ¿ì UnLimit BUZZER On
    673              else if (WL9FM_BUZZER.Status == 1)
    674              {
    675                  Buzzer_On();    
    676              }    
    677              else
    678              {
    679                  Buzzer_Off();
    680                  
    681                  WL9FM_BUZZER.Status = 0;               
    682                  WL9FM_BUZZER.OnTime = 0;
    683                  WL9FM_BUZZER.OnCnt  = 0;
    684              }
    685          
    686          #if 1
    687          	CommErrCnt++;
    688          
    689          	if(CommErrCnt >= 1000)
    690          		CommErrCnt = 1001;
    691          #endif
    692          }
    693          
    694          /**
    695            * @brief  This function handles TIM5 global interrupt request.
    696            * @param  None
    697            * @retval None
    698            */
    699          void TIM5_IRQHandler(void)  //  5msec Timer / TimeBase UP Counter    
    700          {
    701              TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
    702              
    703              KeySwitch_Process();    //  KeySwitch.c Func
    704          }
    705          
    706          /**
    707            * @brief  This function handles USART3 global interrupt request.
    708            * @param  None
    709            * @retval None
    710            */
    711            // STM32F407 <-> exynos4412 can_data
    712          
    713          unsigned char temp_61184;
    714          
    715          void USART2_IRQHandler(void)
    716          {
    717          	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    718          	{
    719          		Uart2_SerialRxMsg[Uart2_SerialRxCnt] = (u8)USART_ReceiveData(USART2);
    720          
    721          		  //  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    722          		#ifdef DEBUG_CAN_RX
    723          		DebugMsg_printf("%2x ", Uart2_SerialRxMsg[Uart2_SerialRxCnt]);
    724          		#endif
    725          		
    726          		switch(Uart2_SerialRxCnt)
    727          		{
    728          			case 0:
    729          				if(Uart2_SerialRxMsg[0] == 0x02)		// STX
    730          					Uart2_SerialRxCnt++;
    731          				break;
    732          			case 1:
    733          				if(Uart2_SerialRxMsg[1] == 0xF5)		// ID
    734          					Uart2_SerialRxCnt++;
    735          				else
    736          					Uart2_SerialRxCnt = 0;
    737          				break;
    738          			case UART2_Rx_BUF_SIZE-1:
    739          				Uart2_SerialRxCnt = 0;
    740          
    741          				if(Uart2_SerialRxMsg[UART2_Rx_BUF_SIZE-1] == 0x03)		// ETX
    742          				{
    743                              			//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    744          					#ifdef DEBUG_CAN_RX
    745          					DebugMsg_printf("\r\n");
    746          					#endif
    747          					
    748          					switch(Uart2_SerialRxMsg[3])		// Cmd
    749          					{
    750          						case 1 :		// UART TX Start Flag
    751          							Flag_UartTxStart = 1;
    752          							Flag_TxE2pRomData=0;
    753          							SendEEPROMDataCnt=0;
    754          							break;
    755          						case 2 :	// Save Data1
    756          							memcpy(&Uart2_RxMsg_Save_Data1[0], &Uart2_SerialRxMsg[4], 8);
    757          							break;
    758          						case 3 :	// Save Data2
    759          							memcpy(&Uart2_RxMsg_Save_Data2[0], &Uart2_SerialRxMsg[4], 8);
    760          							break;
    761          						case 4 :	// A/S Phone Number -> Save to EEPROM
    762          							memcpy(&Uart2_RxMsg_AS_Phone_Data[0], &Uart2_SerialRxMsg[4], 8);
    763          							break;
    764          
    765          							
    766          						
    767          							case 11 : memcpy(&Uart2_RxMsg_Single_11[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_11));	Flag_SerialRxMsg |= RX_MSG11; break;
    768          							case 12 : memcpy(&Uart2_RxMsg_Single_12[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_12));	Flag_SerialRxMsg |= RX_MSG12;break;
    769          							case 21 : memcpy(&Uart2_RxMsg_Single_21[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_21));	Flag_SerialRxMsg |= RX_MSG21;break;
    770          							case 23 : memcpy(&Uart2_RxMsg_Multi_23[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Multi_23));	Flag_SerialRxMsg |= RX_MSG23; RTSFlag_61184 = 1;break;
    771          							case 61 : memcpy(&Uart2_RxMsg_Single_61[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_61));	Flag_SerialRxMsg |= RX_MSG61;break;
    772          							case 62 : memcpy(&Uart2_RxMsg_Single_62[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_62));	Flag_SerialRxMsg |= RX_MSG62;break;
    773          							case 101 : memcpy(&Uart2_RxMsg_Single_101[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_101));Flag_SerialRxMsg |= RX_MSG101;	break;
    774          							case 104 : memcpy(&Uart2_RxMsg_Single_104[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_104));	Flag_SerialRxMsg |= RX_MSG104;break;
    775          							case 105 : memcpy(&Uart2_RxMsg_Single_105[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_105));	Flag_SerialRxMsg |= RX_MSG105;break;
    776          							case 109 : memcpy(&Uart2_RxMsg_Single_109[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_109));	Flag_SerialRxMsg |= RX_MSG109;break;
    777          							case 121 : memcpy(&Uart2_RxMsg_Single_121[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_121));	Flag_SerialRxMsg |= RX_MSG121;break;
    778          							case 123 : memcpy(&Uart2_RxMsg_Single_123[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_123));	Flag_SerialRxMsg |= RX_MSG123;break;
    779          							case 201 : memcpy(&Uart2_RxMsg_Single_201[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_201));	Flag_SerialRxMsg |= RX_MSG201;break;
    780          							case 203 : memcpy(&Uart2_RxMsg_Single_203[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_203));	Flag_SerialRxMsg |= RX_MSG203;break;
    781          								
    782          								
    783          							case 47 : memcpy(&Uart2_RxMsg_Single_47[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_47));	break;
    784          								
    785          							case 145 : memcpy(&Uart2_RxMsg_Multi_145[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Multi_145));	Flag_SerialRxMsg |= RX_MSG145;break;
    786          							case 247 : memcpy(&Uart2_RxMsg_Single_247[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_247));	Flag_SerialRxMsg |= RX_MSG247;break;
    787          						
    788          
    789          						#if 0
    790          							
    791          						case 203 :  // for EHCU setting 61184 format 131017
    792          							Flag_SerialRxMsg |= RX_MSG203;
    793          							memcpy(&Uart2_RxMsg_Single_46[0], &Uart2_SerialRxMsg[4], 8);
    794          							break;
    795          						case 69 :	// When needed
    796          							Flag_SerialRxMsg |= RX_MSG69;
    797          							memcpy(&Uart2_RxMsg_Single_69[0], &Uart2_SerialRxMsg[4], 8);
    798          							break;
    799          						case 70 :	// When needed - RX_MSG69 Multi Packet
    800          							Flag_SerialRxMsg |= RX_MSG69_M;
    801          							memcpy(&Uart2_RxMsg_Multi_69[0], &Uart2_SerialRxMsg[4], 21);
    802          							break;
    803          						case 160 :	// 100 ms
    804          							if((Uart2_RxMsg_Single_160[0] & 0xc0) == 0xc0)
    805          								memcpy(&Uart2_RxMsg_Single_160[0], &Uart2_SerialRxMsg[4], 8);
    806          							else
    807          							{
    808          								memcpy(&Uart2_RxMsg_Single_160[1], &Uart2_SerialRxMsg[5], 7);
    809          								Uart2_RxMsg_Single_160[0] |= (Uart2_SerialRxMsg[4] & 0x3F);
    810          							}
    811          																						
    812          							if(((Uart2_SerialRxMsg[4] & 0xc0) == 0x00) || ((Uart2_SerialRxMsg[4] & 0xc0) == 0x40))
    813          							        memcpy(&Uart2_RxMsg_Single_160[0], &Uart2_SerialRxMsg[4], 8);
    814          							break;
    815          						case 161 :	// When needed
    816          							Flag_SerialRxMsg |= RX_MSG161;
    817          							memcpy(&Uart2_RxMsg_Multi_161[0], &Uart2_SerialRxMsg[4], 14);
    818          							temp_61184=0;
    819          							break;
    820          						case 162 :	// When needed
    821          							//Flag_SerialRxMsg |= RX_MSG162;
    822          							if(Uart2_RxMsg_Single_162[4] == 0)
    823          								memcpy(&Uart2_RxMsg_Single_162[0], &Uart2_SerialRxMsg[4], 8);
    824          							else
    825          								memcpy(&Uart2_RxMsg_Single_162[0], &Uart2_SerialRxMsg[4], 4);
    826          							break;	
    827          						case 163 :
    828          							Flag_SerialRxMsg |= RX_MSG163;
    829          							memcpy(&Uart2_RxMsg_Single_163[0], &Uart2_SerialRxMsg[4], 8);
    830          							break;
    831          						case 174 :
    832          							Flag_SerialRxMsg |= RX_MSG174;
    833          							memcpy(&Uart2_RxMsg_Single_174[0], &Uart2_SerialRxMsg[4], 8);
    834          							break;
    835          						case 205 :	// Stop Send Cmd - A/S Phone Number
    836          							stop_send_as_phone_data = 1;
    837          							break;
    838          
    839          						case 210 :	// Smart Key Registration, Elimination
    840          							memcpy(&Uart2_RxMsg_Smk_Reg_Eli[0], &Uart2_SerialRxMsg[4], 8);
    841          							break;
    842          						case 247 :
    843          							Flag_SerialRxMsg |= RX_MSG247;
    844          							memcpy(&Uart2_RxMsg_Single_247[0], &Uart2_SerialRxMsg[4], 8);							
    845          							break;	
    846          						case 251 :
    847          							Flag_SerialRxMsg |= RX_MSG251;
    848          							memcpy(&Uart2_RxMsg_Single_251[0], &Uart2_SerialRxMsg[4], 8);							
    849          							break;
    850          						case 252 :	// Clock Set Data
    851          							Flag_SerialRxMsg |= RX_MSG252;
    852          							memcpy(&Uart2_RxMsg_Single_252[0], &Uart2_SerialRxMsg[4], 8);							
    853          							break;
    854          						case 253 :
    855          							Flag_SerialRxMsg |= RX_MSG253;
    856          							memcpy(&Uart2_RxMsg_Single_253[0], &Uart2_SerialRxMsg[4], 8);							
    857          							break;
    858          						case 101 :
    859          						case 102 :
    860          						case 109 : 
    861          						case 61 : 
    862          						case 31 : 
    863          						case 33 : 
    864          						case 34 : 
    865          						case 123 : 
    866          							Flag_SerialRxMsg |= RX_MSG239;
    867          							memcpy(&Uart2_RxMsg_Single_239[0], &Uart2_SerialRxMsg[4], 8);		
    868          								
    869          							temp_61184++;
    870          							
    871          							break;
    872          
    873          						case 121 :
    874          							Flag_SerialRxMsg |= RX_MSG239;
    875          							Flag_SerialRxMsg |= RX_MSG239_121;
    876          							memcpy(&Uart2_RxMsg_Single_239[0], &Uart2_SerialRxMsg[4], 8);	
    877          							memcpy(&Uart2_RxMsg_Single_239_121[0], &Uart2_SerialRxMsg[4], 8);	
    878          							temp_61184++;
    879          							break;
    880          					#endif
    881          						
    882          					}
    883          				}
    884          				else
    885          				{
    886          					//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    887          					//DebugMsg_printf("Protocol Fail\r\n");
    888          				}
    889          
    890          				break;
    891          			
    892          			default :
    893          				Uart2_SerialRxCnt++;
    894          				break;
    895          		}
    896          	}
    897          
    898          	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
    899          	{   
    900          		if((USART2->SR & 0x80) == RESET)
    901          			return;
    902          
    903          		if (pWriteBufPos == pReadBufPos)
    904          		{
    905          			if(Flag_TxE2pRomData == 1)
    906          			{
    907          			    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    908          			    return;
    909          		    	}
    910          		}
    911          
    912          		if(pReadBufPos >= (RING_BUF_SIZE-1))
    913          			pReadBufPos = 0;
    914          
    915          		if((Uart2_SerialTxCnt == 0) && (pWriteBufPos != pReadBufPos))
    916          		{
    917          			memcpy(&Uart2_SerialTxMsg[3] , &ring_buf[pReadBufPos], 12);
    918          		}
    919          		
    920          		USART_SendData(USART2, (u16)(Uart2_SerialTxMsg[Uart2_SerialTxCnt++]));    
    921          		
    922          		if (Uart2_SerialTxCnt >= UART2_Tx_BUF_SIZE)
    923          		{
    924          			//Uart2_SerialTxCnt = 0;
    925          			//pReadBufPos += 12;
    926          			//USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    927          
    928          			if(Flag_TxE2pRomData == 0)
    929          			{
    930                          		//  º¸³»´Â È½¼ö Áß¿äÇÏ´Ù. ÃÊ±â¿¡ ¹ö±×°¡ »ý½Ç ¼ö ÀÖÀ¸´Ï, Å×½ºÆ® ÇÊ¿äÇÔ!!!
    931          				//	EEPROM Data¸¦ 6¹ø º¸³½´Ù.
    932          				if(SendEEPROMDataCnt > 5)	
    933          				{
    934          					Uart2_SerialTxCnt = 0;	
    935          					Uart2_SerialTxMsg[15] = 0;
    936          					Flag_TxE2pRomData = 1;
    937          						
    938          					//	EEPROM Data¸¦ ±×¸¸ º¸³»°í CAN Data¸¦ º¸³½´Ù. 
    939          					Flag_UartTxStart = 0;
    940          					
    941          					//  Enable the USART2 Transmit interrupt
    942          					USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    943          					CAN_ITConfig(CAN1, CAN_IT_FMP0,ENABLE);			
    944          				}
    945          				else
    946          				{
    947          					SendEEPROMDataCnt++;
    948          			        	Uart2_SerialTxCnt = 0;
    949          
    950          					//  Disable the USART3 Transmit interrupt
    951          					USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    952          				}
    953          			}
    954          			else
    955          			{
    956          				Uart2_SerialTxCnt = 0;
    957          				pReadBufPos += 12;
    958          			}
    959          		}  
    960          	}
    961          }
    962          
    963          void UART4_IRQHandler(void)
    964          {
    965          	//  UART4 receive interrupt routine
    966          	if (USART_GetITStatus(UART4, USART_IT_RXNE) != RESET) 
    967              	{
    968              		if(Change_UART4_for_Download==0)
    969          			UART4_Receive_CMD();
    970          		else
    971          			UART4_Receive_File();
    972          				
    973          	}
    974          	//  UART4 transmit interrupt routine
    975          	if (USART_GetITStatus(UART4, USART_IT_TXE) != RESET)
    976          	{   
    977          		UART4_transmit_CMD();
    978          	}
    979          }
    980          
    981          u8 temp_rx_buf[4];
    982          
    983          
    984          void UART4_Receive_CMD(void)
    985          {
    986          	uint8_t Temp[Serial_COM4_TxSize];
    987          	//  Read one byte to the receive data register
    988          	WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt] = USART_ReceiveData(UART4);
    989          
    990          	
    991              	//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    992          	#ifdef DEBUG_CMD_RX
    993          	DebugMsg_printf("%2x ", WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt]);
    994          	#endif
    995          
    996          	
    997          	switch (WL9FM_USART_INDEX.COM4_RxCnt)
    998          	{
    999          		case 0:
   1000          				if (WL9FM_USART_DATA.COM4_RxBuf[0] == STX)
   1001          				{
   1002          					WL9FM_USART_INDEX.COM4_RxCnt++;
   1003          				}	
   1004          				else
   1005          				{
   1006          					WL9FM_USART_INDEX.COM4_RxCnt=0;
   1007          				}
   1008          				
   1009          				break;
   1010          		case 1:
   1011          				if (WL9FM_USART_DATA.COM4_RxBuf[1]      == KeyCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
   1012          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LCDBLCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
   1013          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == BUZZERCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
   1014          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LAMPCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
   1015          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == CAMCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
   1016          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == DOWNCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
   1017          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == VersionHighCMD) WL9FM_USART_INDEX.COM4_RxCnt++;
   1018          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == VersionLowCMD) WL9FM_USART_INDEX.COM4_RxCnt++;
   1019          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == VersionSubCMD) WL9FM_USART_INDEX.COM4_RxCnt++;
   1020          				else if ((WL9FM_USART_DATA.COM4_RxBuf[1]&0x80) == 0x80)	WL9FM_USART_INDEX.COM4_RxCnt++;          
   1021                          else
   1022                          {
   1023                            	WL9FM_USART_INDEX.COM4_RxCnt = 0;
   1024                          }
   1025          				break;
   1026          
   1027          		case 3: 
   1028          				WL9FM_USART_INDEX.COM4_RxCnt = 0;
   1029          				
   1030          				//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
   1031          				#ifdef DEBUG_CMD_RX
   1032          				DebugMsg_printf("\r\n");
   1033          				#endif
   1034          
   1035          		if (WL9FM_USART_DATA.COM4_RxBuf[Serial_COM4_RxSize-1] == ETX)
   1036          		{
   1037          			switch (WL9FM_USART_DATA.COM4_RxBuf[1])
   1038          			{
   1039          				case KeyCMD   :		//	Key Command
   1040          
   1041          					break;
   1042          							
   1043          				case LCDBLCMD :		//	LCD BackLight Command
   1044          
   1045          					//	LCD BackLight Level Á¶Àý.. Level0 ~ Level8
   1046          					if (WL9FM_USART_DATA.COM4_RxBuf[2] < MaxBackLightLEVEL && (WL9FM_USART_DATA.COM4_RxBuf[2] > 0)) 												
   1047          					{
   1048          						LCDBL_PWM_LEVEL(WL9FM_USART_DATA.COM4_RxBuf[2]);
   1049          					}
   1050          
   1051          					break;
   1052          
   1053          				case BUZZERCMD :	//	Buzzer Command
   1054          					break;
   1055          
   1056          				case LAMPCMD :	//	Buzzer Command
   1057          					Lamp_name = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0xf0)>>4;
   1058          					Lamp_Value = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0x0f);
   1059          					
   1060          					Lamp_Update_State();
   1061          					break;
   1062          					
   1063          				case CAMCMD:
   1064          					cam_mode_change(WL9FM_USART_DATA.COM4_RxBuf[2]);
   1065          					break;
   1066          
   1067          				case DOWNCMD:
   1068          					Stm32_Update_CMD = WL9FM_USART_DATA.COM4_RxBuf[2];
   1069          					ST_Update=1;
   1070          					break;
   1071          				case  DUMMYCMD:
   1072          					CMD_DUMMY_SendToExynos(0);
   1073          					break;
   1074          				case VersionHighCMD:
   1075          					
   1076          					Temp[0] = 0x02;				
   1077          					Temp[1] = VersionHighCMD;				
   1078          					Temp[2] = VERSION_HIGH ;	
   1079          					Temp[3] = 0x03;	
   1080          					USARTx_EXYNOS(COM4, (char *)Temp);	
   1081          					break;
   1082          				case VersionLowCMD:
   1083          					
   1084          					Temp[0] = 0x02;				
   1085          					Temp[1] = VersionLowCMD;				
   1086          					Temp[2] = VERSION_LOW ;	
   1087          					Temp[3] = 0x03;	
   1088          					USARTx_EXYNOS(COM4, (char *)Temp);	
   1089          					break;
   1090          				case VersionSubCMD:
   1091          					
   1092          					Temp[0] = 0x02;				
   1093          					Temp[1] = VersionSubCMD;				
   1094          					Temp[2] = VERSION_SUB ;	
   1095          					Temp[3] = 0x03;	
   1096          					USARTx_EXYNOS(COM4, (char *)Temp);	
   1097          					break;
   1098          				default :
   1099          					break;								
   1100          			}
   1101                          }						
   1102          
   1103          		//memset(WL9FM_USART_DATA.COM4_RxBuf, 0x0, Serial_COM4_RxSize);					
   1104          				break;
   1105          		
   1106          		default :
   1107          
   1108          			WL9FM_USART_INDEX.COM4_RxCnt++;
   1109          			break;
   1110          	}	
   1111          }
   1112          
   1113          void UART4_Receive_File(void)
   1114          {
   1115          	
   1116          	//  Read one byte to the receive data register
   1117          	WL9FM_USART_RX_FILE_DATA.File_RxBuf[WL9FM_USART_RX_FILE_DATA.File_RxCnt] = USART_ReceiveData(UART4);
   1118          	
   1119          	switch (WL9FM_USART_RX_FILE_DATA.File_RxCnt)
   1120          	{
   1121          		case 0:
   1122          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[0] == STX)
   1123          				{
   1124          					WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
   1125          				}						
   1126          				break;
   1127          		case 1029: 
   1128          				WL9FM_USART_RX_FILE_DATA.File_RxCnt = 0;
   1129          					
   1130          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == ETX)
   1131          				{
   1132          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
   1133          					ST_Update=1;
   1134          				}
   1135          				else if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == EOT)
   1136          				{
   1137          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
   1138          					Change_UART4_for_Download =2;
   1139          					ST_Update=1;
   1140          				}
   1141          				else
   1142          				{
   1143          					ACK_NACK_SendToExynos(NAK);
   1144          				}
   1145                                          break;
   1146          		default :
   1147          
   1148          			WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
   1149          			break;
   1150          	}					
   1151          }
   1152          
   1153          
   1154          void UART4_transmit_CMD(void)
   1155          {
   1156          	//  Write one byte to the transmit data register
   1157          	USART_SendData(UART4, WL9FM_USART_DATA.COM4_TxBuf[WL9FM_USART_INDEX.COM4_TxCnt++]);
   1158          
   1159          	if (WL9FM_USART_INDEX.COM4_TxIdx >= Serial_COM4_TxSize)
   1160          	{
   1161          		WL9FM_USART_INDEX.COM4_TxIdx = Serial_COM4_TxSize;
   1162          	}    
   1163          	if (WL9FM_USART_INDEX.COM4_TxCnt == WL9FM_USART_INDEX.COM4_TxIdx)
   1164          	{
   1165          		//  Disable the UART4 Transmit interrupt
   1166          		USART_ITConfig(UART4, USART_IT_TXE, DISABLE);
   1167          
   1168          		WL9FM_USART_INDEX.COM4_TxIdx = 0; //  transmit buffer Index clear
   1169          		WL9FM_USART_INDEX.COM4_TxCnt = 0; //  transmit buffer Cnt   clear
   1170          	}              
   1171          }
   1172          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
      16   CAN1_RX0_IRQHandler
        16   -> Buzzer_SendToEXYNOS
        16   -> CAN_Receive
         0   -> OperateRingBuffer
        16   -> OperateRingBuffer
        16   -> Send_ACK_61184
        16   -> Send_CTS_61184
        16   -> __aeabi_memcpy
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
      16   OperateRingBuffer
         0   -> USART_ITConfig
        16   -> memcpy
       0   PendSV_Handler
       0   SVC_Handler
       8   SendTo_E2PROM
         0   -> USART_ITConfig
         8   -> memcpy
       8   SysTick_Handler
         8   -> TimeDelay_Decrement
       8   TIM4_IRQHandler
         8   -> Buzzer_Off
         8   -> Buzzer_On
         8   -> TIM_ClearITPendingBit
       8   TIM5_IRQHandler
         0   -> KeySwitch_Process
         8   -> TIM_ClearITPendingBit
       8   UART4_IRQHandler
         8   -> UART4_Receive_CMD
         8   -> UART4_Receive_File
         8   -> UART4_transmit_CMD
         8   -> USART_GetITStatus
       8   UART4_Receive_CMD
         8   -> CMD_DUMMY_SendToExynos
         8   -> LCDBL_PWM_LEVEL
         8   -> Lamp_Update_State
         8   -> USART_ReceiveData
         8   -> USARTx_EXYNOS
         8   -> cam_mode_change
       8   UART4_Receive_File
         0   -> ACK_NACK_SendToExynos
         8   -> USART_ReceiveData
         8   -> __aeabi_memcpy
      16   UART4_transmit_CMD
        16   -> USART_ITConfig
        16   -> USART_SendData
      24   USART2_IRQHandler
         0   -> CAN_ITConfig
        24   -> USART_GetITStatus
         0   -> USART_ITConfig
        24   -> USART_ITConfig
        24   -> USART_ReceiveData
        24   -> USART_SendData
        24   -> __aeabi_memcpy
       0   UsageFault_Handler
       0   WL9F_CAN_Buffer_Init
       8   memcpy
         8   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_43
       4  ??DataTable12_44
       4  ??DataTable12_45
       4  ??DataTable12_46
       4  ??DataTable12_47
       4  ??DataTable12_48
       4  ??DataTable12_49
       4  ??DataTable12_5
       4  ??DataTable12_50
       4  ??DataTable12_51
       4  ??DataTable12_52
       4  ??DataTable12_53
       4  ??DataTable12_54
       4  ??DataTable12_55
       4  ??DataTable12_56
       4  ??DataTable12_57
       4  ??DataTable12_58
       4  ??DataTable12_59
       4  ??DataTable12_6
       4  ??DataTable12_60
       4  ??DataTable12_61
       4  ??DataTable12_62
       4  ??DataTable12_63
       4  ??DataTable12_64
       4  ??DataTable12_65
       4  ??DataTable12_66
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       8  ?Subroutine0
       2  BusFault_Handler
     620  CAN1_RX0_IRQHandler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
     210  OperateRingBuffer
       2  PendSV_Handler
      20  RxMsg
       2  SVC_Handler
      78  SendTo_E2PROM
       1  Stm32_Update_CMD
     106  SysTick_Handler
      86  TIM4_IRQHandler
      20  TIM5_IRQHandler
      56  UART4_IRQHandler
     312  UART4_Receive_CMD
     108  UART4_Receive_File
      64  UART4_transmit_CMD
     844  USART2_IRQHandler
      32  Uart2_SerialRxMsg
          Uart2_SerialRxCnt
          Flag_TxE2pRomData
          pReadBufPos
    7728  Uart2_SerialTxMsg
          Iden
          CanRecvCnt
          Uart2_SerialTxCnt
          SendEEPROMDataCnt
          Buz1
          pWriteBufPos
          TotPacketNum
          TotMsgSize
          CommErrCnt
          pgn
          RMCUpgn
          ring_buf
       2  UsageFault_Handler
      36  WL9F_CAN_Buffer_Init
      12  memcpy
       2  old_test
       1  stop_send_as_phone_data
       1  temp_61184
       4  temp_rx_buf
       2  test
       8  test_temp

 
 7 799 bytes in section .bss
 2 844 bytes in section .text
 
 2 832 bytes of CODE memory (+ 12 bytes shared)
 7 799 bytes of DATA memory

Errors: none
Warnings: none
