###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      30/Apr/2014  15:34:23 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Platform\COMMON\SRC\stm32 #
#                    f4xx_it.c                                                #
#    Command line =  C:\Tools\WL9F\WL_F_Monitor_APP\Platform\COMMON\SRC\stm32 #
#                    f4xx_it.c -D USE_STDPERIPH_DRIVER -D STM32F4XX -D        #
#                    USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN                #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\ -o    #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\        #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Platfo #
#                    rm\COMMON\INC\ -I "C:\Tools\WL9F\WL_F_Monitor_APP\Projec #
#                    t\..\Platform\TaeHa - ECS\INC\" -I                       #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\ -I                        #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\ -Oh --use_c++_inline -I      #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\stm32f #
#                    4xx_it.lst                                               #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\stm32f4 #
#                    xx_it.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP\Platform\COMMON\SRC\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Template/stm32f4xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm32f4xx_it.h"
     32          #include "main.h"
     33          
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          
     40          //#define		DEBUG_CMD_RX
     41          //#define		DEBUG_CMD_TX
     42          //#define		DEBUG_CAN_RX
     43          //#define		DEBUG_CAN_TX
     44          #pragma pack(1)
     45          struct st_CAN_Msg
     46          {	
     47          	unsigned char Priority;
     48          	unsigned char Data_Page;
     49          	unsigned char PDU_Format;	
     50          	unsigned char PDU_Specific;		// 50
     51          	unsigned char Source_Address;	// 52
     52          };
     53          #pragma pack()
     54          
     55          CanRxMsg RxMsg;
     56          struct st_CAN_Msg Iden; 
     57          
     58          extern Realy_Control		rx_Realy_Control;
     59          extern EHCU_Status		rx_EHCU_Status;
     60          extern Auto_position_Status rx_Auto_position_Status;
     61          extern st_CANDATA_HCEPGN_65428	RX_HCEPGN_65428;
     62          /* Private define ------------------------------------------------------------*/
     63          
     64          #define RING_BUF_SIZE			768*10
     65          #define UART2_Rx_BUF_SIZE		26			// Max Multi Packet Data -> 3°³
     66          #define UART2_Tx_BUF_SIZE		17
     67          
     68          /*
     69          #define RX_MSG69		0x01
     70          #define RX_MSG69_M		0x02
     71          #define RX_MSG145		0x04
     72          #define RX_MSG161		0x08
     73          #define RX_MSG162		0x10
     74          #define RX_MSG163		0x20
     75          #define RX_MSG251		0x40
     76          #define RX_MSG252		0x80
     77          #define RX_MSG202		0x100
     78          #define RX_MSG253		0x200
     79          #define RX_MSG203		0x400
     80          #define RX_MSG239		0x800
     81          #define RX_MSG247		0x1000
     82          #define RX_MSG174		0x2000
     83          #define RX_MSG239_121	0x4000
     84          */
     85          #define RX_MSG11	0x01
     86          #define RX_MSG12	0x02
     87          #define RX_MSG21	0x04
     88          #define RX_MSG23	0x08
     89          #define RX_MSG61	0x10
     90          #define RX_MSG62	0x20
     91          #define RX_MSG101	0x40
     92          #define RX_MSG104	0x80
     93          #define RX_MSG105	0x100
     94          #define RX_MSG109	0x200
     95          #define RX_MSG121	0x400
     96          #define RX_MSG123	0x800
     97          #define RX_MSG201	0x1000
     98          #define RX_MSG203	0x2000
     99          		
    100          		
    101          #define RX_MSG47	0x4000
    102          		
    103          #define RX_MSG145	0x8000
    104          #define RX_MSG247	0x10000
    105          
    106          
    107          
    108          
    109          
    110          /* Private define ------------------------------------------------------------*/
    111          /* Private macro -------------------------------------------------------------*/
    112          /* Private variables ---------------------------------------------------------*/
    113          u8 ring_buf[RING_BUF_SIZE];		
    114          u16 pWriteBufPos = 0;
    115          u16 pReadBufPos = 0;
    116          u8 CanRecvCnt = 0;
    117          u16 TotPacketNum = 0;
    118          u32 pgn = 0;
    119          u16 TotMsgSize = 0;
    120          u8 Uart2_SerialTxMsg[UART2_Tx_BUF_SIZE];
    121          u8 Uart2_SerialRxMsg[UART2_Rx_BUF_SIZE];
    122          
    123          u8 Uart2_SerialTxCnt = 0;
    124          u8 Uart2_SerialRxCnt = 0;
    125          u16 CommErrCnt = 0;
    126          
    127          u8 SendEEPROMDataCnt = 0;
    128          u8 Flag_TxE2pRomData = 0;
    129          u8 stop_send_as_phone_data = 0;
    130          u8 Stm32_Update_CMD;
    131          
    132          u8 Buz1;
    133          
    134          extern u8 MoniInfoSendCnt;
    135          extern u16 Flag_1Sec_MoniInfo;
    136          extern u8 MoniInfoTotalPacketNum;
    137          extern u8 RecvMachInfo;
    138          extern u8 MachineBasicInformation[78];
    139          extern u8 RTSFlag_61184;
    140          extern u8 CTSFlag_61184;
    141          extern u8 RecvTotalPacket_61184;
    142          extern u8 ACK_Multi_61184[8];
    143          
    144          
    145          extern u8 Flag_UartTxStart;
    146          extern u32 Flag_SerialRxMsg;
    147          extern u8 eepRomReadData1[32];
    148          
    149          extern u8 Uart2_RxMsg_Save_Data1[8];
    150          extern u8 Uart2_RxMsg_Save_Data2[8];
    151          extern u8 Uart2_RxMsg_AS_Phone_Data[8];
    152          extern u8 Uart2_RxMsg_Smk_Reg_Eli[8];
    153          
    154          extern u8 Uart2_RxMsg_Single_46[8];
    155          extern u8 Uart2_RxMsg_Single_69[8];
    156          extern u8 Uart2_RxMsg_Multi_69[21];
    157          extern u8 Uart2_RxMsg_Single_160[8];
    158          extern u8 Uart2_RxMsg_Multi_161[16];
    159          extern u8 Uart2_RxMsg_Single_162[8];
    160          extern u8 Uart2_RxMsg_Single_163[8];
    161          extern u8 Uart2_RxMsg_Single_174[8];
    162          extern u8 Uart2_RxMsg_Single_251[8];
    163          extern u8 Uart2_RxMsg_Single_252[8];
    164          extern u8 Uart2_RxMsg_Single_253[8];
    165          extern u8 Uart2_RxMsg_Single_239[8];
    166          extern u8 Uart2_RxMsg_Single_239_121[8];
    167          extern u8 Uart2_RxMsg_Single_247[8];
    168          
    169          
    170          //61184
    171          extern u8 Uart2_RxMsg_Single_11[8];
    172          extern u8 Uart2_RxMsg_Single_12[8];
    173          extern u8 Uart2_RxMsg_Single_21[8];
    174          extern u8 Uart2_RxMsg_Multi_23[13];
    175          extern u8 Uart2_RxMsg_Single_61[8];
    176          extern u8 Uart2_RxMsg_Single_62[8];
    177          extern u8 Uart2_RxMsg_Single_101[8];
    178          extern u8 Uart2_RxMsg_Single_104[8];
    179          extern u8 Uart2_RxMsg_Single_105[8];
    180          extern u8 Uart2_RxMsg_Single_109[8];
    181          extern u8 Uart2_RxMsg_Single_121[8];
    182          extern u8 Uart2_RxMsg_Single_123[8];
    183          extern u8 Uart2_RxMsg_Single_201[8];
    184          extern u8 Uart2_RxMsg_Single_203[8];
    185          //0xFFxx
    186          extern u8 Uart2_RxMsg_Single_47[8];
    187          extern u8 Uart2_RxMsg_Multi_145[13];
    188          extern u8 Uart2_RxMsg_Single_247[8];
    189          
    190          
    191          
    192          
    193          extern u8 SerialMsgRTC[16];
    194          extern u8 Lamp_name;
    195          extern u8 Lamp_Value;
    196          
    197          //////////////// stm32 update /////////////////////
    198          extern u8 Change_UART4_for_Download;
    199          extern u8 ST_Update;
    200          
    201          /* Private function prototypes -----------------------------------------------*/
    202          /* Private functions ---------------------------------------------------------*/
    203          void WL9F_CAN_Buffer_Init(void)
    204          {
    205          	Uart2_SerialTxMsg[0]  = 0x02;	// STX
    206          	Uart2_SerialTxMsg[1]  = 0xF5;	// ID
    207          	Uart2_SerialTxMsg[2]  = 8;		// Data Length
    208          	Uart2_SerialTxMsg[15] = 0;		// CRC
    209          	Uart2_SerialTxMsg[16] = 0x03;	// ETX
    210          
    211          	pWriteBufPos = 0;
    212          
    213          	TotPacketNum = 0;
    214          	pgn = 0;
    215          
    216          	Uart2_SerialTxCnt = 0;
    217          	CommErrCnt = 0;
    218          }
    219          
    220          uint16_t test,old_test;
    221          
    222          unsigned char test_temp[8];
    223          
    224          void OperateRingBuffer(void)
    225          {
    226          	if(pWriteBufPos >= (RING_BUF_SIZE-1))	// End of Ring Buffer
    227          		pWriteBufPos = 0;
    228          
    229          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.ExtId, 4);
    230          
    231          	pWriteBufPos += 4;
    232          
    233          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.Data, 8);
    234          	
    235          	pWriteBufPos += 8;	
    236          
    237          	if(RxMsg.ExtId==0x18fff7dd || RxMsg.ExtId==0x18fff747) // rcu status
    238          	{
    239          		memcpy( &rx_Realy_Control, (u8*)&RxMsg.Data, 8);
    240          	}
    241          
    242          	else if(RxMsg.ExtId==0x18EFFF47 || RxMsg.ExtId==0x18EF2847) // auto_position
    243          	{
    244          		if(RxMsg.Data[0] == 124)
    245          		{
    246          			memcpy( &rx_Auto_position_Status, (u8*)&RxMsg.Data, 8);
    247          		}
    248          		else if(RxMsg.Data[0] == 203)
    249          		{
    250          			memcpy( &rx_EHCU_Status, (u8*)&RxMsg.Data, 8);
    251          		}
    252          		
    253          	}
    254          	else if(RxMsg.ExtId==0x18ff9447) // lamp
    255          	{
    256          		memcpy( &RX_HCEPGN_65428, (u8*)&RxMsg.Data, 8);
    257          	}
    258          	
    259          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    260          	
    261          }
    262          
    263          void SendTo_E2PROM(void)
    264          {
    265          #if 1
    266          	if (SendEEPROMDataCnt < 2)	//	2¹ø º¸³½´Ù.
    267          	{
    268          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[0], 8);
    269          		Uart2_SerialTxMsg[15] = 0xE1;
    270          	}	
    271          	else if (SendEEPROMDataCnt < 4)	//	2¹ø º¸³½´Ù.
    272          	{
    273          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[8], 8);
    274          		Uart2_SerialTxMsg[15] = 0xE2;
    275          	}	
    276          	else
    277          	{
    278          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[16], 8);
    279          		Uart2_SerialTxMsg[15] = 0xE3;
    280          	}		
    281          
    282          	//  Enable the USART3 Transmit interrupt
    283          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    284          #endif
    285          }
    286          
    287          /******************************************************************************/
    288          /*            Cortex-M4 Processor Exceptions Handlers                         */
    289          /******************************************************************************/
    290          
    291          /**
    292            * @brief   This function handles NMI exception.
    293            * @param  None
    294            * @retval None
    295            */
    296          void NMI_Handler(void)
    297          {
    298          }
    299          
    300          /**
    301            * @brief  This function handles Hard Fault exception.
    302            * @param  None
    303            * @retval None
    304            */
    305          void HardFault_Handler(void)
    306          {
    307            /* Go to infinite loop when Hard Fault exception occurs */
    308            while (1)
    309            {
    310            }
    311          }
    312          
    313          /**
    314            * @brief  This function handles Memory Manage exception.
    315            * @param  None
    316            * @retval None
    317            */
    318          void MemManage_Handler(void)
    319          {
    320            /* Go to infinite loop when Memory Manage exception occurs */
    321            while (1)
    322            {
    323            }
    324          }
    325          
    326          /**
    327            * @brief  This function handles Bus Fault exception.
    328            * @param  None
    329            * @retval None
    330            */
    331          void BusFault_Handler(void)
    332          {
    333            /* Go to infinite loop when Bus Fault exception occurs */
    334            while (1)
    335            {
    336            }
    337          }
    338          
    339          /**
    340            * @brief  This function handles Usage Fault exception.
    341            * @param  None
    342            * @retval None
    343            */
    344          void UsageFault_Handler(void)
    345          {
    346            /* Go to infinite loop when Usage Fault exception occurs */
    347            while (1)
    348            {
    349            }
    350          }
    351          
    352          /**
    353            * @brief  This function handles SVCall exception.
    354            * @param  None
    355            * @retval None
    356            */
    357          void SVC_Handler(void)
    358          {
    359          }
    360          
    361          /**
    362            * @brief  This function handles Debug Monitor exception.
    363            * @param  None
    364            * @retval None
    365            */
    366          void DebugMon_Handler(void)
    367          {
    368          }
    369          
    370          /**
    371            * @brief  This function handles PendSVC exception.
    372            * @param  None
    373            * @retval None
    374            */
    375          void PendSV_Handler(void)
    376          {
    377          }
    378          
    379          /**
    380            * @brief  This function handles SysTick Handler.
    381            * @param  None
    382            * @retval None
    383            */
    384          void SysTick_Handler(void)
    385          {
    386            	TimeDelay_Decrement();
    387          
    388              ++WL9FM_TIME.Cnt_1mSec;
    389          
    390          	if (WL9FM_TIME.Cnt_1mSec % 1 == 0)                   //  1msec
    391          	{
    392                  WL9FM_TIME.Flag_1mSec = 1;
    393          
    394          		if (WL9FM_TIME.Cnt_1mSec % 10 == 0)              //  10msec
    395          		{
    396          			WL9FM_TIME.Flag_10mSec = 1;
    397          
    398          			if (WL9FM_TIME.Cnt_1mSec % 100 == 0)         //  100msec
    399          			{
    400          				WL9FM_TIME.Flag_100mSec = 1;
    401          
    402          				if(WL9FM_TIME.Cnt_1mSec % 500 == 0)			// 500msec
    403          				{
    404          					WL9FM_TIME.Flag_500mSec = 1;
    405          					if (WL9FM_TIME.Cnt_1mSec % 1000 == 0)    //  1000 msec
    406          					{
    407          						WL9FM_TIME.Flag_1Sec = 1;
    408          						WL9FM_TIME.Cnt_1mSec = 0;
    409          					}
    410          				}
    411          
    412          				
    413          			}
    414          		}
    415          	}    
    416          }
    417          
    418          /******************************************************************************/
    419          /*                 STM32F4xx Peripherals Interrupt Handlers                   */
    420          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    421          /*  available peripheral interrupt handler's name please refer to the startup */
    422          /*  file (startup_stm32f4xx.s).                                               */
    423          /******************************************************************************/
    424          
    425          /**
    426            * @brief  This function handles PPP interrupt request.
    427            * @param  None
    428            * @retval None
    429            */
    430          /*void PPP_IRQHandler(void)
    431          {
    432          }*/
    433          
    434          /**
    435            * @}
    436            */ 
    437          
    438          /**
    439            * @brief  This function handles CAN1 global interrupt request.
    440            * @param  None
    441            * @retval None
    442            */
    443          void CAN1_RX0_IRQHandler(void)
    444          {
    445          	u32 PF; 
    446          
    447          	CAN_Receive(CAN1,CAN_FIFO0,&RxMsg);
    448          				
    449          	Iden.Source_Address = (RxMsg.ExtId & 0x000000ff)  >> 0;
    450          	Iden.PDU_Specific = (RxMsg.ExtId  & 0x0000ff00) >> 8;
    451          	
    452          	// Iden.Source_Address == 71	 -->>	MCU
    453          	// Iden.Source_Address == 228	 -->>	EHCU	
    454          	// Iden.Source_Address == 29	 -->>	Smart Key
    455          	// Iden.Source_Address == 23	 -->>	Cluster
    456          	// Iden.Source_Address == 221	 -->>	RCU
    457          	// Iden.Source_Address == 0	 -->>	ECM
    458          	// Iden.Source_Address == 3	 -->>	TCU
    459          	
    460          	if((Iden.Source_Address == 71) || (Iden.Source_Address == 23) || (Iden.Source_Address == 29) || 
    461          		(Iden.Source_Address == 228) || (Iden.Source_Address == 221)|| (Iden.Source_Address == 0x4a)|| (Iden.Source_Address == 0xf4)
    462          		|| (Iden.Source_Address == 0x00)|| (Iden.Source_Address == 0x03))
    463          		{
    464          			if(++CanRecvCnt >= 100)
    465          			{
    466          				CanRecvCnt = 0;
    467          	
    468          				if(pWriteBufPos >= (768*10-1)) // End of Ring Buffer
    469          					pWriteBufPos = 0;
    470          	
    471          				memcpy(&ring_buf[pWriteBufPos], (u8*)&SerialMsgRTC[0], 12);
    472          			
    473          				pWriteBufPos += 12;
    474          				
    475          			}
    476          	
    477          	
    478          			PF = (RxMsg.ExtId  & 0x00ff0000) >> 16;
    479          	
    480          			if((PF == 254) || (PF == 255) || (PF == 239) )
    481          			{	
    482          				if(Iden.PDU_Specific == 251)
    483          				{
    484          					MoniInfoSendCnt = 0;
    485          					Flag_1Sec_MoniInfo = 0;
    486          					MoniInfoTotalPacketNum = 0;
    487          				}
    488          				else
    489          				{
    490          					if( (Iden.PDU_Specific == 84)  ) 
    491          					{
    492          					
    493          						Buz1 = (RxMsg.Data[2] & 0x30 ) >> 4; 		// 1 :On 	0 : Off
    494          					
    495          						if( (Buz1 == 1))
    496          						{
    497          							Buzzer_SendToEXYNOS(1);
    498          						}
    499          						else
    500          						{
    501          							Buzzer_SendToEXYNOS(0);
    502          						}
    503          					}
    504          					//if(Iden.PDU_Specific == 0x9b)
    505          						OperateRingBuffer();
    506          				}
    507          			}
    508          			else if((PF == 235) || (PF == 236))
    509          			{
    510          				if((Iden.PDU_Specific == 255)||(Iden.PDU_Specific == 0x28))
    511          				{
    512          					if(PF == 236)		// TP.CM_BAM
    513          					{
    514          						if(RxMsg.Data[0] == 32) 	// Control Byte (Normal)
    515          						{
    516          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    517          							if(pgn == 65340)
    518          							{
    519          								TotPacketNum = RxMsg.Data[3];		// Total number of packets
    520          								TotMsgSize = (RxMsg.Data[2] << 8) | RxMsg.Data[1];
    521          							}
    522          							else
    523          							{
    524          								Uart2_SerialTxMsg[15] = 0;
    525          								OperateRingBuffer();
    526          							}
    527          							return;
    528          						}
    529          
    530          						else if(RxMsg.Data[0] == 17)	// Control Byte (CTS) 0x11
    531          						{
    532          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    533          							if(pgn == 61184)
    534          							{
    535          								RTSFlag_61184 = 2;
    536          							}
    537          							
    538          						}
    539          						else if(RxMsg.Data[0] == 19)	// Control Byte (ACK) 0x13 
    540          						{
    541          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    542          							if(pgn == 61184)
    543          							{
    544          								RTSFlag_61184 = 0;
    545          							}
    546          						}
    547          						else if(RxMsg.Data[0] == 16)	// Control Byte (RTS) 0x10
    548          						{
    549          							Uart2_SerialTxMsg[15] = 0;
    550          							OperateRingBuffer();
    551          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    552          							if(pgn == 61184)
    553          							{
    554          								 Send_CTS_61184(RxMsg.Data);
    555          								 CTSFlag_61184 = 1;
    556          								 RecvTotalPacket_61184 = RxMsg.Data[3];
    557          								 memcpy((u8*)ACK_Multi_61184,(u8*)RxMsg.Data,8);
    558          							}
    559          							
    560          						}
    561          
    562          								
    563          					}
    564          	
    565          					if(pgn != 0)
    566          					{
    567          						if(PF == 235)
    568          						{
    569          							if(pgn == 65340)
    570          							{
    571          								memcpy(&MachineBasicInformation[(RxMsg.Data[0]-1)*7], &RxMsg.Data[1] , 7);
    572          								if(RxMsg.Data[0] == TotPacketNum)
    573          								{
    574          									pgn = TotPacketNum = 0;
    575          									RecvMachInfo = 1;
    576          								}
    577          							}
    578          							
    579          							else
    580          							{
    581          								Uart2_SerialTxMsg[15] = 0;
    582          								OperateRingBuffer();
    583          							}
    584          
    585          							if(pgn == 61184)
    586          							{
    587          								if(RecvTotalPacket_61184 == RxMsg.Data[0])
    588          								{
    589          									RecvTotalPacket_61184 = 0;
    590          									Send_ACK_61184(ACK_Multi_61184);
    591          								}
    592          							
    593          							}
    594          						}
    595          					}
    596          				}
    597          			}
    598          	
    599          			CommErrCnt = 0;
    600          		}
    601          
    602          }
    603          
    604          /**
    605            * @brief  This function handles TIM4 global interrupt request.
    606            * @param  None
    607            * @retval None
    608            */
    609          void TIM4_IRQHandler(void)  //  10msec Timer / TimeBase UP Counter
    610          {
    611              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
    612              
    613              //  BUZZER Status°¡ "2" ÀÏ °æ¿ì BUZZER OnTime ¸¸Å­ BUZZER On
    614              if (WL9FM_BUZZER.Status == 2)
    615              {
    616                  if (WL9FM_BUZZER.OnCnt++ < WL9FM_BUZZER.OnTime)
    617                  {
    618                      Buzzer_On();
    619                  }
    620                  else
    621                  {
    622                      WL9FM_BUZZER.Status = 0;               
    623                  }
    624              }        
    625              //  BUZZER Status°¡ "1" ÀÏ °æ¿ì UnLimit BUZZER On
    626              else if (WL9FM_BUZZER.Status == 1)
    627              {
    628                  Buzzer_On();    
    629              }    
    630              else
    631              {
    632                  Buzzer_Off();
    633                  
    634                  WL9FM_BUZZER.Status = 0;               
    635                  WL9FM_BUZZER.OnTime = 0;
    636                  WL9FM_BUZZER.OnCnt  = 0;
    637              }
    638          
    639          #if 1
    640          	CommErrCnt++;
    641          
    642          	if(CommErrCnt >= 1000)
    643          		CommErrCnt = 1001;
    644          #endif
    645          }
    646          
    647          /**
    648            * @brief  This function handles TIM5 global interrupt request.
    649            * @param  None
    650            * @retval None
    651            */
    652          void TIM5_IRQHandler(void)  //  5msec Timer / TimeBase UP Counter    
    653          {
    654              TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
    655              
    656              KeySwitch_Process();    //  KeySwitch.c Func
    657          }
    658          
    659          /**
    660            * @brief  This function handles USART3 global interrupt request.
    661            * @param  None
    662            * @retval None
    663            */
    664            // STM32F407 <-> exynos4412 can_data
    665          
    666          unsigned char temp_61184;
    667          
    668          void USART2_IRQHandler(void)
    669          {
    670          	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    671          	{
    672          		Uart2_SerialRxMsg[Uart2_SerialRxCnt] = (u8)USART_ReceiveData(USART2);
    673          
    674          		  //  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    675          		#ifdef DEBUG_CAN_RX
    676          		DebugMsg_printf("%2x ", Uart2_SerialRxMsg[Uart2_SerialRxCnt]);
    677          		#endif
    678          		
    679          		switch(Uart2_SerialRxCnt)
    680          		{
    681          			case 0:
    682          				if(Uart2_SerialRxMsg[0] == 0x02)		// STX
    683          					Uart2_SerialRxCnt++;
    684          				break;
    685          			case 1:
    686          				if(Uart2_SerialRxMsg[1] == 0xF5)		// ID
    687          					Uart2_SerialRxCnt++;
    688          				else
    689          					Uart2_SerialRxCnt = 0;
    690          				break;
    691          			case 25:
    692          				Uart2_SerialRxCnt = 0;
    693          
    694          				if(Uart2_SerialRxMsg[25] == 0x03)		// ETX
    695          				{
    696                              			//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    697          					#ifdef DEBUG_CAN_RX
    698          					DebugMsg_printf("\r\n");
    699          					#endif
    700          					
    701          					switch(Uart2_SerialRxMsg[3])		// Cmd
    702          					{
    703          						case 1 :		// UART TX Start Flag
    704          							Flag_UartTxStart = 1;
    705          							Flag_TxE2pRomData=0;
    706          							SendEEPROMDataCnt=0;
    707          							break;
    708          						case 2 :	// Save Data1
    709          							memcpy(&Uart2_RxMsg_Save_Data1[0], &Uart2_SerialRxMsg[4], 8);
    710          							break;
    711          						case 3 :	// Save Data2
    712          							memcpy(&Uart2_RxMsg_Save_Data2[0], &Uart2_SerialRxMsg[4], 8);
    713          							break;
    714          						case 4 :	// A/S Phone Number -> Save to EEPROM
    715          							memcpy(&Uart2_RxMsg_AS_Phone_Data[0], &Uart2_SerialRxMsg[4], 8);
    716          							break;
    717          
    718          							
    719          						
    720          							case 11 : memcpy(&Uart2_RxMsg_Single_11[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_11));	Flag_SerialRxMsg |= RX_MSG11; break;
    721          							case 12 : memcpy(&Uart2_RxMsg_Single_12[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_12));	Flag_SerialRxMsg |= RX_MSG12;break;
    722          							case 21 : memcpy(&Uart2_RxMsg_Single_21[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_21));	Flag_SerialRxMsg |= RX_MSG21;break;
    723          							case 23 : memcpy(&Uart2_RxMsg_Multi_23[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Multi_23));	Flag_SerialRxMsg |= RX_MSG23; RTSFlag_61184 = 1;break;
    724          							case 61 : memcpy(&Uart2_RxMsg_Single_61[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_61));	Flag_SerialRxMsg |= RX_MSG61;break;
    725          							case 62 : memcpy(&Uart2_RxMsg_Single_62[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_62));	Flag_SerialRxMsg |= RX_MSG62;break;
    726          							case 101 : memcpy(&Uart2_RxMsg_Single_101[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_101));Flag_SerialRxMsg |= RX_MSG101;	break;
    727          							case 104 : memcpy(&Uart2_RxMsg_Single_104[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_104));	Flag_SerialRxMsg |= RX_MSG104;break;
    728          							case 105 : memcpy(&Uart2_RxMsg_Single_105[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_105));	Flag_SerialRxMsg |= RX_MSG105;break;
    729          							case 109 : memcpy(&Uart2_RxMsg_Single_109[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_109));	Flag_SerialRxMsg |= RX_MSG109;break;
    730          							case 121 : memcpy(&Uart2_RxMsg_Single_121[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_121));	Flag_SerialRxMsg |= RX_MSG121;break;
    731          							case 123 : memcpy(&Uart2_RxMsg_Single_123[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_123));	Flag_SerialRxMsg |= RX_MSG123;break;
    732          							case 201 : memcpy(&Uart2_RxMsg_Single_201[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_201));	Flag_SerialRxMsg |= RX_MSG201;break;
    733          							case 203 : memcpy(&Uart2_RxMsg_Single_203[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_203));	Flag_SerialRxMsg |= RX_MSG203;break;
    734          								
    735          								
    736          							case 47 : memcpy(&Uart2_RxMsg_Single_47[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_47));	break;
    737          								
    738          							case 145 : memcpy(&Uart2_RxMsg_Multi_145[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Multi_145));	Flag_SerialRxMsg |= RX_MSG145;break;
    739          							case 247 : memcpy(&Uart2_RxMsg_Single_247[0], &Uart2_SerialRxMsg[4], sizeof(Uart2_RxMsg_Single_247));	Flag_SerialRxMsg |= RX_MSG247;break;
    740          						
    741          
    742          						#if 0
    743          							
    744          						case 203 :  // for EHCU setting 61184 format 131017
    745          							Flag_SerialRxMsg |= RX_MSG203;
    746          							memcpy(&Uart2_RxMsg_Single_46[0], &Uart2_SerialRxMsg[4], 8);
    747          							break;
    748          						case 69 :	// When needed
    749          							Flag_SerialRxMsg |= RX_MSG69;
    750          							memcpy(&Uart2_RxMsg_Single_69[0], &Uart2_SerialRxMsg[4], 8);
    751          							break;
    752          						case 70 :	// When needed - RX_MSG69 Multi Packet
    753          							Flag_SerialRxMsg |= RX_MSG69_M;
    754          							memcpy(&Uart2_RxMsg_Multi_69[0], &Uart2_SerialRxMsg[4], 21);
    755          							break;
    756          						case 160 :	// 100 ms
    757          							if((Uart2_RxMsg_Single_160[0] & 0xc0) == 0xc0)
    758          								memcpy(&Uart2_RxMsg_Single_160[0], &Uart2_SerialRxMsg[4], 8);
    759          							else
    760          							{
    761          								memcpy(&Uart2_RxMsg_Single_160[1], &Uart2_SerialRxMsg[5], 7);
    762          								Uart2_RxMsg_Single_160[0] |= (Uart2_SerialRxMsg[4] & 0x3F);
    763          							}
    764          																						
    765          							if(((Uart2_SerialRxMsg[4] & 0xc0) == 0x00) || ((Uart2_SerialRxMsg[4] & 0xc0) == 0x40))
    766          							        memcpy(&Uart2_RxMsg_Single_160[0], &Uart2_SerialRxMsg[4], 8);
    767          							break;
    768          						case 161 :	// When needed
    769          							Flag_SerialRxMsg |= RX_MSG161;
    770          							memcpy(&Uart2_RxMsg_Multi_161[0], &Uart2_SerialRxMsg[4], 14);
    771          							temp_61184=0;
    772          							break;
    773          						case 162 :	// When needed
    774          							//Flag_SerialRxMsg |= RX_MSG162;
    775          							if(Uart2_RxMsg_Single_162[4] == 0)
    776          								memcpy(&Uart2_RxMsg_Single_162[0], &Uart2_SerialRxMsg[4], 8);
    777          							else
    778          								memcpy(&Uart2_RxMsg_Single_162[0], &Uart2_SerialRxMsg[4], 4);
    779          							break;	
    780          						case 163 :
    781          							Flag_SerialRxMsg |= RX_MSG163;
    782          							memcpy(&Uart2_RxMsg_Single_163[0], &Uart2_SerialRxMsg[4], 8);
    783          							break;
    784          						case 174 :
    785          							Flag_SerialRxMsg |= RX_MSG174;
    786          							memcpy(&Uart2_RxMsg_Single_174[0], &Uart2_SerialRxMsg[4], 8);
    787          							break;
    788          						case 205 :	// Stop Send Cmd - A/S Phone Number
    789          							stop_send_as_phone_data = 1;
    790          							break;
    791          
    792          						case 210 :	// Smart Key Registration, Elimination
    793          							memcpy(&Uart2_RxMsg_Smk_Reg_Eli[0], &Uart2_SerialRxMsg[4], 8);
    794          							break;
    795          						case 247 :
    796          							Flag_SerialRxMsg |= RX_MSG247;
    797          							memcpy(&Uart2_RxMsg_Single_247[0], &Uart2_SerialRxMsg[4], 8);							
    798          							break;	
    799          						case 251 :
    800          							Flag_SerialRxMsg |= RX_MSG251;
    801          							memcpy(&Uart2_RxMsg_Single_251[0], &Uart2_SerialRxMsg[4], 8);							
    802          							break;
    803          						case 252 :	// Clock Set Data
    804          							Flag_SerialRxMsg |= RX_MSG252;
    805          							memcpy(&Uart2_RxMsg_Single_252[0], &Uart2_SerialRxMsg[4], 8);							
    806          							break;
    807          						case 253 :
    808          							Flag_SerialRxMsg |= RX_MSG253;
    809          							memcpy(&Uart2_RxMsg_Single_253[0], &Uart2_SerialRxMsg[4], 8);							
    810          							break;
    811          						case 101 :
    812          						case 102 :
    813          						case 109 : 
    814          						case 61 : 
    815          						case 31 : 
    816          						case 33 : 
    817          						case 34 : 
    818          						case 123 : 
    819          							Flag_SerialRxMsg |= RX_MSG239;
    820          							memcpy(&Uart2_RxMsg_Single_239[0], &Uart2_SerialRxMsg[4], 8);		
    821          								
    822          							temp_61184++;
    823          							
    824          							break;
    825          
    826          						case 121 :
    827          							Flag_SerialRxMsg |= RX_MSG239;
    828          							Flag_SerialRxMsg |= RX_MSG239_121;
    829          							memcpy(&Uart2_RxMsg_Single_239[0], &Uart2_SerialRxMsg[4], 8);	
    830          							memcpy(&Uart2_RxMsg_Single_239_121[0], &Uart2_SerialRxMsg[4], 8);	
    831          							temp_61184++;
    832          							break;
    833          					#endif
    834          						
    835          					}
    836          				}
    837          				else
    838          				{
    839          					//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    840          					//DebugMsg_printf("Protocol Fail\r\n");
    841          				}
    842          
    843          				break;
    844          			
    845          			default :
    846          				Uart2_SerialRxCnt++;
    847          				break;
    848          		}
    849          	}
    850          
    851          	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
    852          	{   
    853          		if((USART2->SR & 0x80) == RESET)
    854          			return;
    855          
    856          		if (pWriteBufPos == pReadBufPos)
    857          		{
    858          			if(Flag_TxE2pRomData == 1)
    859          			{
    860          			    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    861          			    return;
    862          		    	}
    863          		}
    864          
    865          		if(pReadBufPos >= (RING_BUF_SIZE-1))
    866          			pReadBufPos = 0;
    867          
    868          		if((Uart2_SerialTxCnt == 0) && (pWriteBufPos != pReadBufPos))
    869          		{
    870          			memcpy(&Uart2_SerialTxMsg[3] , &ring_buf[pReadBufPos], 12);
    871          		}
    872          		
    873          		USART_SendData(USART2, (u16)(Uart2_SerialTxMsg[Uart2_SerialTxCnt++]));    
    874          		
    875          		if (Uart2_SerialTxCnt >= UART2_Tx_BUF_SIZE)
    876          		{
    877          			//Uart2_SerialTxCnt = 0;
    878          			//pReadBufPos += 12;
    879          			//USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    880          
    881          			if(Flag_TxE2pRomData == 0)
    882          			{
    883                          		//  º¸³»´Â È½¼ö Áß¿äÇÏ´Ù. ÃÊ±â¿¡ ¹ö±×°¡ »ý½Ç ¼ö ÀÖÀ¸´Ï, Å×½ºÆ® ÇÊ¿äÇÔ!!!
    884          				//	EEPROM Data¸¦ 6¹ø º¸³½´Ù.
    885          				if(SendEEPROMDataCnt > 5)	
    886          				{
    887          					Uart2_SerialTxCnt = 0;	
    888          					Uart2_SerialTxMsg[15] = 0;
    889          					Flag_TxE2pRomData = 1;
    890          						
    891          					//	EEPROM Data¸¦ ±×¸¸ º¸³»°í CAN Data¸¦ º¸³½´Ù. 
    892          					Flag_UartTxStart = 0;
    893          					
    894          					//  Enable the USART2 Transmit interrupt
    895          					USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    896          					CAN_ITConfig(CAN1, CAN_IT_FMP0,ENABLE);			
    897          				}
    898          				else
    899          				{
    900          					SendEEPROMDataCnt++;
    901          			        	Uart2_SerialTxCnt = 0;
    902          
    903          					//  Disable the USART3 Transmit interrupt
    904          					USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    905          				}
    906          			}
    907          			else
    908          			{
    909          				Uart2_SerialTxCnt = 0;
    910          				pReadBufPos += 12;
    911          			}
    912          		}  
    913          	}
    914          }
    915          
    916          void UART4_IRQHandler(void)
    917          {
    918          	//  UART4 receive interrupt routine
    919          	if (USART_GetITStatus(UART4, USART_IT_RXNE) != RESET) 
    920              	{
    921              		if(Change_UART4_for_Download==0)
    922          			UART4_Receive_CMD();
    923          		else
    924          			UART4_Receive_File();
    925          				
    926          	}
    927          	//  UART4 transmit interrupt routine
    928          	if (USART_GetITStatus(UART4, USART_IT_TXE) != RESET)
    929          	{   
    930          		UART4_transmit_CMD();
    931          	}
    932          }
    933          
    934          u8 temp_rx_buf[4];
    935          
    936          
    937          void UART4_Receive_CMD(void)
    938          {
    939          	
    940          	//  Read one byte to the receive data register
    941          	WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt] = USART_ReceiveData(UART4);
    942          
    943          	
    944              	//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    945          	#ifdef DEBUG_CMD_RX
    946          	DebugMsg_printf("%2x ", WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt]);
    947          	#endif
    948          
    949          	
    950          	switch (WL9FM_USART_INDEX.COM4_RxCnt)
    951          	{
    952          		case 0:
    953          				if (WL9FM_USART_DATA.COM4_RxBuf[0] == STX)
    954          				{
    955          					WL9FM_USART_INDEX.COM4_RxCnt++;
    956          				}	
    957          				else
    958          				{
    959          					WL9FM_USART_INDEX.COM4_RxCnt=0;
    960          				}
    961          				
    962          				break;
    963          		case 1:
    964          				if (WL9FM_USART_DATA.COM4_RxBuf[1]      == KeyCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    965          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LCDBLCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    966          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == BUZZERCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    967          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LAMPCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    968          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == CAMCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    969          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == DOWNCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    970          				else if ((WL9FM_USART_DATA.COM4_RxBuf[1]&0x80) == 0x80)	WL9FM_USART_INDEX.COM4_RxCnt++;
    971                                          
    972                                  else
    973                                  {
    974                                    	WL9FM_USART_INDEX.COM4_RxCnt = 0;
    975                                  }
    976          				break;
    977          
    978          		case 3: 
    979          				WL9FM_USART_INDEX.COM4_RxCnt = 0;
    980          				
    981          				//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    982          				#ifdef DEBUG_CMD_RX
    983          				DebugMsg_printf("\r\n");
    984          				#endif
    985          
    986          		if (WL9FM_USART_DATA.COM4_RxBuf[Serial_COM4_RxSize-1] == ETX)
    987          		{
    988          			switch (WL9FM_USART_DATA.COM4_RxBuf[1])
    989          			{
    990          				case KeyCMD   :		//	Key Command
    991          
    992          					break;
    993          							
    994          				case LCDBLCMD :		//	LCD BackLight Command
    995          
    996          					//	LCD BackLight Level Á¶Àý.. Level0 ~ Level8
    997          					if (WL9FM_USART_DATA.COM4_RxBuf[2] < MaxBackLightLEVEL) 												
    998          					{
    999          						LCDBL_PWM_LEVEL(WL9FM_USART_DATA.COM4_RxBuf[2]);
   1000          					}
   1001          
   1002          					break;
   1003          
   1004          				case BUZZERCMD :	//	Buzzer Command
   1005          					break;
   1006          
   1007          				case LAMPCMD :	//	Buzzer Command
   1008          					Lamp_name = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0xf0)>>4;
   1009          					Lamp_Value = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0x0f);
   1010          					
   1011          					Lamp_Update_State();
   1012          					break;
   1013          					
   1014          				case CAMCMD:
   1015          					cam_mode_change(WL9FM_USART_DATA.COM4_RxBuf[2]);
   1016          					break;
   1017          
   1018          				case DOWNCMD:
   1019          					Stm32_Update_CMD = WL9FM_USART_DATA.COM4_RxBuf[2];
   1020          					ST_Update=1;
   1021          					break;
   1022          				case  DUMMYCMD:
   1023          					CMD_DUMMY_SendToExynos(0);
   1024          					break;
   1025          
   1026          				default :
   1027          					break;								
   1028          			}
   1029                          }						
   1030          
   1031          		//memset(WL9FM_USART_DATA.COM4_RxBuf, 0x0, Serial_COM4_RxSize);					
   1032          				break;
   1033          		
   1034          		default :
   1035          
   1036          			WL9FM_USART_INDEX.COM4_RxCnt++;
   1037          			break;
   1038          	}	
   1039          }
   1040          
   1041          void UART4_Receive_File(void)
   1042          {
   1043          	
   1044          	//  Read one byte to the receive data register
   1045          	WL9FM_USART_RX_FILE_DATA.File_RxBuf[WL9FM_USART_RX_FILE_DATA.File_RxCnt] = USART_ReceiveData(UART4);
   1046          	
   1047          	switch (WL9FM_USART_RX_FILE_DATA.File_RxCnt)
   1048          	{
   1049          		case 0:
   1050          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[0] == STX)
   1051          				{
   1052          					WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
   1053          				}						
   1054          				break;
   1055          		case 1029: 
   1056          				WL9FM_USART_RX_FILE_DATA.File_RxCnt = 0;
   1057          					
   1058          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == ETX)
   1059          				{
   1060          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
   1061          					ST_Update=1;
   1062          				}
   1063          				else if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == EOT)
   1064          				{
   1065          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
   1066          					Change_UART4_for_Download =2;
   1067          					ST_Update=1;
   1068          				}
   1069          				else
   1070          				{
   1071          					ACK_NACK_SendToExynos(NAK);
   1072          				}
   1073                                          break;
   1074          		default :
   1075          
   1076          			WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
   1077          			break;
   1078          	}					
   1079          }
   1080          
   1081          
   1082          void UART4_transmit_CMD(void)
   1083          {
   1084          	//  Write one byte to the transmit data register
   1085          	USART_SendData(UART4, WL9FM_USART_DATA.COM4_TxBuf[WL9FM_USART_INDEX.COM4_TxCnt++]);
   1086          
   1087          	if (WL9FM_USART_INDEX.COM4_TxIdx >= Serial_COM4_TxSize)
   1088          	{
   1089          		WL9FM_USART_INDEX.COM4_TxIdx = Serial_COM4_TxSize;
   1090          	}    
   1091          	if (WL9FM_USART_INDEX.COM4_TxCnt == WL9FM_USART_INDEX.COM4_TxIdx)
   1092          	{
   1093          		//  Disable the UART4 Transmit interrupt
   1094          		USART_ITConfig(UART4, USART_IT_TXE, DISABLE);
   1095          
   1096          		WL9FM_USART_INDEX.COM4_TxIdx = 0; //  transmit buffer Index clear
   1097          		WL9FM_USART_INDEX.COM4_TxCnt = 0; //  transmit buffer Cnt   clear
   1098          	}              
   1099          }
   1100          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
      16   CAN1_RX0_IRQHandler
        16   -> Buzzer_SendToEXYNOS
        16   -> CAN_Receive
         0   -> OperateRingBuffer
        16   -> OperateRingBuffer
        16   -> Send_ACK_61184
        16   -> Send_CTS_61184
        16   -> __aeabi_memcpy
        16   -> memcpy
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
      16   OperateRingBuffer
         0   -> USART_ITConfig
        16   -> memcpy
       0   PendSV_Handler
       0   SVC_Handler
       8   SendTo_E2PROM
         0   -> USART_ITConfig
         8   -> memcpy
       8   SysTick_Handler
         8   -> TimeDelay_Decrement
       8   TIM4_IRQHandler
         8   -> Buzzer_Off
         8   -> Buzzer_On
         8   -> TIM_ClearITPendingBit
       8   TIM5_IRQHandler
         0   -> KeySwitch_Process
         8   -> TIM_ClearITPendingBit
       8   UART4_IRQHandler
         8   -> UART4_Receive_CMD
         8   -> UART4_Receive_File
         8   -> UART4_transmit_CMD
         8   -> USART_GetITStatus
       8   UART4_Receive_CMD
         0   -> CMD_DUMMY_SendToExynos
         0   -> LCDBL_PWM_LEVEL
         0   -> Lamp_Update_State
         8   -> USART_ReceiveData
         0   -> cam_mode_change
       8   UART4_Receive_File
         0   -> ACK_NACK_SendToExynos
         8   -> USART_ReceiveData
         8   -> __aeabi_memcpy
      16   UART4_transmit_CMD
        16   -> USART_ITConfig
        16   -> USART_SendData
      24   USART2_IRQHandler
         0   -> CAN_ITConfig
        24   -> USART_GetITStatus
         0   -> USART_ITConfig
        24   -> USART_ITConfig
        24   -> USART_ReceiveData
        24   -> USART_SendData
        24   -> __aeabi_memcpy
       0   UsageFault_Handler
       0   WL9F_CAN_Buffer_Init
       8   memcpy
         8   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_43
       4  ??DataTable12_44
       4  ??DataTable12_45
       4  ??DataTable12_46
       4  ??DataTable12_47
       4  ??DataTable12_48
       4  ??DataTable12_49
       4  ??DataTable12_5
       4  ??DataTable12_50
       4  ??DataTable12_51
       4  ??DataTable12_52
       4  ??DataTable12_53
       4  ??DataTable12_54
       4  ??DataTable12_55
       4  ??DataTable12_56
       4  ??DataTable12_57
       4  ??DataTable12_58
       4  ??DataTable12_59
       4  ??DataTable12_6
       4  ??DataTable12_60
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       8  ?Subroutine0
       2  BusFault_Handler
     500  CAN1_RX0_IRQHandler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
     186  OperateRingBuffer
       2  PendSV_Handler
      20  RxMsg
       2  SVC_Handler
      78  SendTo_E2PROM
       1  Stm32_Update_CMD
     106  SysTick_Handler
      86  TIM4_IRQHandler
      20  TIM5_IRQHandler
      56  UART4_IRQHandler
     222  UART4_Receive_CMD
     108  UART4_Receive_File
      64  UART4_transmit_CMD
     838  USART2_IRQHandler
      32  Uart2_SerialRxMsg
          Uart2_SerialRxCnt
          Flag_TxE2pRomData
          pReadBufPos
    7724  Uart2_SerialTxMsg
          Iden
          CanRecvCnt
          Uart2_SerialTxCnt
          SendEEPROMDataCnt
          Buz1
          pWriteBufPos
          TotPacketNum
          TotMsgSize
          CommErrCnt
          pgn
          ring_buf
       2  UsageFault_Handler
      36  WL9F_CAN_Buffer_Init
      12  memcpy
       2  old_test
       1  stop_send_as_phone_data
       1  temp_61184
       4  temp_rx_buf
       2  test
       8  test_temp

 
 7 795 bytes in section .bss
 2 580 bytes in section .text
 
 2 568 bytes of CODE memory (+ 12 bytes shared)
 7 795 bytes of DATA memory

Errors: none
Warnings: none
