###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      24/Mar/2014  16:55:01 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -     #
#                    CAN Test\Platform\COMMON\SRC\stm32f4xx_it.c              #
#    Command line =  "C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -    #
#                    CAN Test\Platform\COMMON\SRC\stm32f4xx_it.c" -D          #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN "C:\Tools\WL9F\WL9F MONITOR -    #
#                    STM32_APP - ST_Update - CAN Test\Project\Debug\List\"    #
#                    -o "C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update   #
#                    - CAN Test\Project\Debug\Obj\" --debug --endian=little   #
#                    --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config          #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    "C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -    #
#                    CAN Test\Project\..\Platform\COMMON\INC\" -I             #
#                    "C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -    #
#                    CAN Test\Project\..\Platform\TaeHa - ECS\INC\" -I        #
#                    "C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -    #
#                    CAN Test\Project\..\Libraries\CMSIS\Device\ST\STM32F4xx\ #
#                    Include\" -I "C:\Tools\WL9F\WL9F MONITOR - STM32_APP -   #
#                    ST_Update - CAN Test\Project\..\Libraries\STM32F4xx_StdP #
#                    eriph_Driver\inc\" -Oh --use_c++_inline -I               #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -     #
#                    CAN Test\Project\Debug\List\stm32f4xx_it.lst             #
#    Object file  =  C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update -     #
#                    CAN Test\Project\Debug\Obj\stm32f4xx_it.o                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL9F MONITOR - STM32_APP - ST_Update - CAN Test\Platform\COMMON\SRC\stm32f4xx_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Template/stm32f4xx_it.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   Main Interrupt Service Routines.
      8            *          This file provides template for all exceptions handler and 
      9            *          peripherals interrupt service routine.
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     14            *
     15            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     16            * You may not use this file except in compliance with the License.
     17            * You may obtain a copy of the License at:
     18            *
     19            *        http://www.st.com/software_license_agreement_liberty_v2
     20            *
     21            * Unless required by applicable law or agreed to in writing, software 
     22            * distributed under the License is distributed on an "AS IS" BASIS, 
     23            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     24            * See the License for the specific language governing permissions and
     25            * limitations under the License.
     26            *
     27            ******************************************************************************
     28            */
     29          
     30          /* Includes ------------------------------------------------------------------*/
     31          #include "stm32f4xx_it.h"
     32          #include "main.h"
     33          
     34          /** @addtogroup Template_Project
     35            * @{
     36            */
     37          
     38          /* Private typedef -----------------------------------------------------------*/
     39          
     40          //#define		DEBUG_CMD_RX
     41          //#define		DEBUG_CMD_TX
     42          //#define		DEBUG_CAN_RX
     43          //#define		DEBUG_CAN_TX
     44          #pragma pack(1)
     45          struct st_CAN_Msg
     46          {	
     47          	unsigned char Priority;
     48          	unsigned char Data_Page;
     49          	unsigned char PDU_Format;	
     50          	unsigned char PDU_Specific;		// 50
     51          	unsigned char Source_Address;	// 52
     52          };
     53          #pragma pack()
     54          
     55          CanRxMsg RxMsg;
     56          struct st_CAN_Msg Iden; 
     57          
     58          extern Realy_Control		rx_Realy_Control;
     59          extern EHCU_Status		rx_EHCU_Status;
     60          extern Auto_position_Status rx_Auto_position_Status;
     61          extern st_CANDATA_HCEPGN_65428	RX_HCEPGN_65428;
     62          /* Private define ------------------------------------------------------------*/
     63          
     64          #define RING_BUF_SIZE			768*10
     65          #define UART2_Rx_BUF_SIZE		26			// Max Multi Packet Data -> 3°³
     66          #define UART2_Tx_BUF_SIZE		17
     67          
     68          #define RX_MSG69		0x01
     69          #define RX_MSG69_M		0x02
     70          #define RX_MSG145		0x04
     71          #define RX_MSG161		0x08
     72          #define RX_MSG162		0x10
     73          #define RX_MSG163		0x20
     74          #define RX_MSG251		0x40
     75          #define RX_MSG252		0x80
     76          #define RX_MSG202		0x100
     77          #define RX_MSG253		0x200
     78          #define RX_MSG203		0x400
     79          #define RX_MSG239		0x800
     80          #define RX_MSG247		0x1000
     81          /* Private define ------------------------------------------------------------*/
     82          /* Private macro -------------------------------------------------------------*/
     83          /* Private variables ---------------------------------------------------------*/
     84          u8 ring_buf[RING_BUF_SIZE];		
     85          u16 pWriteBufPos = 0;
     86          u16 pReadBufPos = 0;
     87          u8 CanRecvCnt = 0;
     88          u16 TotPacketNum = 0;
     89          u32 pgn = 0;
     90          u16 TotMsgSize = 0;
     91          u8 Uart2_SerialTxMsg[UART2_Tx_BUF_SIZE];
     92          u8 Uart2_SerialRxMsg[UART2_Rx_BUF_SIZE];
     93          
     94          u8 Uart2_SerialTxCnt = 0;
     95          u8 Uart2_SerialRxCnt = 0;
     96          u16 CommErrCnt = 0;
     97          
     98          u8 SendEEPROMDataCnt = 0;
     99          u8 Flag_TxE2pRomData = 0;
    100          u8 stop_send_as_phone_data = 0;
    101          u8 Stm32_Update_CMD;
    102          
    103          u8 Buz1, Buz2;
    104          
    105          extern u8 MoniInfoSendCnt;
    106          extern u16 Flag_1Sec_MoniInfo;
    107          extern u8 MoniInfoTotalPacketNum;
    108          extern u8 RecvMachInfo;
    109          extern u8 MachineBasicInformation[78];
    110          
    111          extern u8 Flag_UartTxStart;
    112          extern u32 Flag_SerialRxMsg;
    113          extern u8 eepRomReadData1[32];
    114          
    115          extern u8 Uart2_RxMsg_Save_Data1[8];
    116          extern u8 Uart2_RxMsg_Save_Data2[8];
    117          extern u8 Uart2_RxMsg_AS_Phone_Data[8];
    118          extern u8 Uart2_RxMsg_Smk_Reg_Eli[8];
    119          
    120          extern u8 Uart2_RxMsg_Single_46[8];
    121          extern u8 Uart2_RxMsg_Single_69[8];
    122          extern u8 Uart2_RxMsg_Multi_69[21];
    123          extern u8 Uart2_RxMsg_Single_160[8];
    124          extern u8 Uart2_RxMsg_Multi_161[16];
    125          extern u8 Uart2_RxMsg_Single_162[8];
    126          extern u8 Uart2_RxMsg_Single_163[8];
    127          extern u8 Uart2_RxMsg_Single_251[8];
    128          extern u8 Uart2_RxMsg_Single_252[8];
    129          extern u8 Uart2_RxMsg_Single_253[8];
    130          extern u8 Uart2_RxMsg_Single_239[8];
    131          extern u8 Uart2_RxMsg_Single_247[8];
    132          
    133          extern u8 SerialMsgRTC[16];
    134          extern u8 Lamp_name;
    135          extern u8 Lamp_Value;
    136          
    137          //////////////// stm32 update /////////////////////
    138          extern u8 Change_UART4_for_Download;
    139          extern u8 ST_Update;
    140          
    141          /* Private function prototypes -----------------------------------------------*/
    142          /* Private functions ---------------------------------------------------------*/
    143          void WL9F_CAN_Buffer_Init(void)
    144          {
    145          	Uart2_SerialTxMsg[0]  = 0x02;	// STX
    146          	Uart2_SerialTxMsg[1]  = 0xF5;	// ID
    147          	Uart2_SerialTxMsg[2]  = 8;		// Data Length
    148          	Uart2_SerialTxMsg[15] = 0;		// CRC
    149          	Uart2_SerialTxMsg[16] = 0x03;	// ETX
    150          
    151          	pWriteBufPos = 0;
    152          
    153          	TotPacketNum = 0;
    154          	pgn = 0;
    155          
    156          	Uart2_SerialTxCnt = 0;
    157          	CommErrCnt = 0;
    158          }
    159          
    160          uint16_t test,old_test;
    161          
    162          unsigned char test_temp[8];
    163          
    164          void OperateRingBuffer(void)
    165          {
    166          	if(pWriteBufPos >= (RING_BUF_SIZE-1))	// End of Ring Buffer
    167          		pWriteBufPos = 0;
    168          
    169          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.ExtId, 4);
    170          
    171          	pWriteBufPos += 4;
    172          
    173          	memcpy(&ring_buf[pWriteBufPos], (u8*)&RxMsg.Data, 8);
    174          	
    175          	pWriteBufPos += 8;	
    176          
    177          	if(RxMsg.ExtId==0x18fff7dd) // rcu status
    178          	{
    179          		memcpy( &rx_Realy_Control, (u8*)&RxMsg.Data, 8);
    180          	}
    181          	else if(RxMsg.ExtId==0x18ffEDE4) // ECU status
    182          	{
    183          		memcpy( &rx_EHCU_Status, (u8*)&RxMsg.Data, 8);
    184          	}
    185          	else if(RxMsg.ExtId==0x18ffEc47) // auto_position
    186          	{
    187          		memcpy( &rx_Auto_position_Status, (u8*)&RxMsg.Data, 8);
    188          	}
    189          	else if(RxMsg.ExtId==0x18ff9447) // lamp
    190          	{
    191          		memcpy( &RX_HCEPGN_65428, (u8*)&RxMsg.Data, 8);
    192          	}
    193          	
    194          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    195          	
    196          }
    197          
    198          void SendTo_E2PROM(void)
    199          {
    200          #if 1
    201          	if (SendEEPROMDataCnt < 2)	//	2¹ø º¸³½´Ù.
    202          	{
    203          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[0], 8);
    204          		Uart2_SerialTxMsg[15] = 0xE1;
    205          	}	
    206          	else if (SendEEPROMDataCnt < 4)	//	2¹ø º¸³½´Ù.
    207          	{
    208          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[8], 8);
    209          		Uart2_SerialTxMsg[15] = 0xE2;
    210          	}	
    211          	else
    212          	{
    213          		memcpy(&Uart2_SerialTxMsg[7], &eepRomReadData1[16], 8);
    214          		Uart2_SerialTxMsg[15] = 0xE3;
    215          	}		
    216          
    217          	//  Enable the USART3 Transmit interrupt
    218          	USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    219          #endif
    220          }
    221          
    222          /******************************************************************************/
    223          /*            Cortex-M4 Processor Exceptions Handlers                         */
    224          /******************************************************************************/
    225          
    226          /**
    227            * @brief   This function handles NMI exception.
    228            * @param  None
    229            * @retval None
    230            */
    231          void NMI_Handler(void)
    232          {
    233          }
    234          
    235          /**
    236            * @brief  This function handles Hard Fault exception.
    237            * @param  None
    238            * @retval None
    239            */
    240          void HardFault_Handler(void)
    241          {
    242            /* Go to infinite loop when Hard Fault exception occurs */
    243            while (1)
    244            {
    245            }
    246          }
    247          
    248          /**
    249            * @brief  This function handles Memory Manage exception.
    250            * @param  None
    251            * @retval None
    252            */
    253          void MemManage_Handler(void)
    254          {
    255            /* Go to infinite loop when Memory Manage exception occurs */
    256            while (1)
    257            {
    258            }
    259          }
    260          
    261          /**
    262            * @brief  This function handles Bus Fault exception.
    263            * @param  None
    264            * @retval None
    265            */
    266          void BusFault_Handler(void)
    267          {
    268            /* Go to infinite loop when Bus Fault exception occurs */
    269            while (1)
    270            {
    271            }
    272          }
    273          
    274          /**
    275            * @brief  This function handles Usage Fault exception.
    276            * @param  None
    277            * @retval None
    278            */
    279          void UsageFault_Handler(void)
    280          {
    281            /* Go to infinite loop when Usage Fault exception occurs */
    282            while (1)
    283            {
    284            }
    285          }
    286          
    287          /**
    288            * @brief  This function handles SVCall exception.
    289            * @param  None
    290            * @retval None
    291            */
    292          void SVC_Handler(void)
    293          {
    294          }
    295          
    296          /**
    297            * @brief  This function handles Debug Monitor exception.
    298            * @param  None
    299            * @retval None
    300            */
    301          void DebugMon_Handler(void)
    302          {
    303          }
    304          
    305          /**
    306            * @brief  This function handles PendSVC exception.
    307            * @param  None
    308            * @retval None
    309            */
    310          void PendSV_Handler(void)
    311          {
    312          }
    313          
    314          /**
    315            * @brief  This function handles SysTick Handler.
    316            * @param  None
    317            * @retval None
    318            */
    319          void SysTick_Handler(void)
    320          {
    321            	TimeDelay_Decrement();
    322          
    323              ++WL9FM_TIME.Cnt_1mSec;
    324          
    325          	if (WL9FM_TIME.Cnt_1mSec % 1 == 0)                   //  1msec
    326          	{
    327                  WL9FM_TIME.Flag_1mSec = 1;
    328          
    329          		if (WL9FM_TIME.Cnt_1mSec % 10 == 0)              //  10msec
    330          		{
    331          			WL9FM_TIME.Flag_10mSec = 1;
    332          
    333          			if (WL9FM_TIME.Cnt_1mSec % 100 == 0)         //  100msec
    334          			{
    335          				WL9FM_TIME.Flag_100mSec = 1;
    336          
    337          				if (WL9FM_TIME.Cnt_1mSec % 1000 == 0)    //  1000 msec
    338          				{
    339          					WL9FM_TIME.Flag_1Sec = 1;
    340          					WL9FM_TIME.Cnt_1mSec = 0;
    341          				}
    342          			}
    343          		}
    344          	}    
    345          }
    346          
    347          /******************************************************************************/
    348          /*                 STM32F4xx Peripherals Interrupt Handlers                   */
    349          /*  Add here the Interrupt Handler for the used peripheral(s) (PPP), for the  */
    350          /*  available peripheral interrupt handler's name please refer to the startup */
    351          /*  file (startup_stm32f4xx.s).                                               */
    352          /******************************************************************************/
    353          
    354          /**
    355            * @brief  This function handles PPP interrupt request.
    356            * @param  None
    357            * @retval None
    358            */
    359          /*void PPP_IRQHandler(void)
    360          {
    361          }*/
    362          
    363          /**
    364            * @}
    365            */ 
    366          
    367          /**
    368            * @brief  This function handles CAN1 global interrupt request.
    369            * @param  None
    370            * @retval None
    371            */
    372          void CAN1_RX0_IRQHandler(void)
    373          {
    374          	u32 PF; 
    375          
    376          	CAN_Receive(CAN1,CAN_FIFO0,&RxMsg);
    377          				
    378          	Iden.Source_Address = (RxMsg.ExtId & 0x000000ff)  >> 0;
    379          	Iden.PDU_Specific = (RxMsg.ExtId  & 0x0000ff00) >> 8;
    380          	
    381          	// Iden.Source_Address == 71	 -->>	MCU
    382          	// Iden.Source_Address == 228	 -->>	EHCU	
    383          	// Iden.Source_Address == 29	 -->>	Smart Key
    384          	// Iden.Source_Address == 23	 -->>	Cluster
    385          	// Iden.Source_Address == 221	 -->>	RCU
    386          	
    387          	if((Iden.Source_Address == 71) || (Iden.Source_Address == 23) || (Iden.Source_Address == 29) || 
    388          		(Iden.Source_Address == 228) || (Iden.Source_Address == 221)|| (Iden.Source_Address == 0x4a)|| (Iden.Source_Address == 0xf4))
    389          		{
    390          			if(++CanRecvCnt >= 100)
    391          			{
    392          				CanRecvCnt = 0;
    393          	
    394          				if(pWriteBufPos >= (768*10-1)) // End of Ring Buffer
    395          					pWriteBufPos = 0;
    396          	
    397          				memcpy(&ring_buf[pWriteBufPos], (u8*)&SerialMsgRTC[0], 12);
    398          			
    399          				pWriteBufPos += 12;
    400          				
    401          			}
    402          	
    403          	
    404          			PF = (RxMsg.ExtId  & 0x00ff0000) >> 16;
    405          	
    406          			if((PF == 254) || (PF == 255) || (PF == 239) )
    407          			{	
    408          				if(Iden.PDU_Specific == 251)
    409          				{
    410          					MoniInfoSendCnt = 0;
    411          					Flag_1Sec_MoniInfo = 0;
    412          					MoniInfoTotalPacketNum = 0;
    413          				}
    414          				else
    415          				{
    416          					if( (Iden.PDU_Specific == 153) || (Iden.PDU_Specific == 170) ) 
    417          					{
    418          						if( Iden.PDU_Specific == 153 )
    419          							Buz1 = (RxMsg.Data[7] & 0x30 ) >> 4; 		// 1 :On 	0 : Off
    420          						else if( Iden.PDU_Specific == 170 )
    421          							Buz2 = (RxMsg.Data[0] & 0x0C) >> 2;			// 1 :On 	0 : Off
    422          					
    423          						if( (Buz1 == 1) || (Buz2 == 1) )
    424          						{
    425          							Buzzer_SendToEXYNOS(1);
    426          						}
    427          						else
    428          						{
    429          							Buzzer_SendToEXYNOS(0);
    430          						}
    431          					}
    432          					//if(Iden.PDU_Specific == 0x9b)
    433          						OperateRingBuffer();
    434          				}
    435          			}
    436          			else if((PF == 235) || (PF == 236))
    437          			{
    438          				if((Iden.PDU_Specific == 255)||(Iden.PDU_Specific == 0x28))
    439          				{
    440          					if(PF == 236)		// TP.CM_BAM
    441          					{
    442          						if(RxMsg.Data[0] == 32) 	// Control Byte
    443          						{
    444          							pgn = (RxMsg.Data[6] << 8) | (RxMsg.Data[5]);
    445          							if(pgn == 65340)
    446          							{
    447          								TotPacketNum = RxMsg.Data[3];		// Total number of packets
    448          								TotMsgSize = (RxMsg.Data[2] << 8) | RxMsg.Data[1];
    449          							}
    450          							else
    451          							{
    452          								Uart2_SerialTxMsg[15] = 0;
    453          								OperateRingBuffer();
    454          							}
    455          							return;
    456          						}
    457          					}
    458          	
    459          					if(pgn != 0)
    460          					{
    461          						if(PF == 235)
    462          						{
    463          							if(pgn == 65340)
    464          							{
    465          								memcpy(&MachineBasicInformation[(RxMsg.Data[0]-1)*7], &RxMsg.Data[1] , 7);
    466          								if(RxMsg.Data[0] == TotPacketNum)
    467          								{
    468          									pgn = TotPacketNum = 0;
    469          									RecvMachInfo = 1;
    470          								}
    471          							}
    472          							else
    473          							{
    474          								Uart2_SerialTxMsg[15] = 0;
    475          								OperateRingBuffer();
    476          							}
    477          						}
    478          					}
    479          				}
    480          			}
    481          	
    482          			CommErrCnt = 0;
    483          		}
    484          
    485          }
    486          
    487          /**
    488            * @brief  This function handles TIM4 global interrupt request.
    489            * @param  None
    490            * @retval None
    491            */
    492          void TIM4_IRQHandler(void)  //  10msec Timer / TimeBase UP Counter
    493          {
    494              TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
    495              
    496              //  BUZZER Status°¡ "2" ÀÏ °æ¿ì BUZZER OnTime ¸¸Å­ BUZZER On
    497              if (WL9FM_BUZZER.Status == 2)
    498              {
    499                  if (WL9FM_BUZZER.OnCnt++ < WL9FM_BUZZER.OnTime)
    500                  {
    501                      Buzzer_On();
    502                  }
    503                  else
    504                  {
    505                      WL9FM_BUZZER.Status = 0;               
    506                  }
    507              }        
    508              //  BUZZER Status°¡ "1" ÀÏ °æ¿ì UnLimit BUZZER On
    509              else if (WL9FM_BUZZER.Status == 1)
    510              {
    511                  Buzzer_On();    
    512              }    
    513              else
    514              {
    515                  Buzzer_Off();
    516                  
    517                  WL9FM_BUZZER.Status = 0;               
    518                  WL9FM_BUZZER.OnTime = 0;
    519                  WL9FM_BUZZER.OnCnt  = 0;
    520              }
    521          
    522          #if 1
    523          	CommErrCnt++;
    524          
    525          	if(CommErrCnt >= 1000)
    526          		CommErrCnt = 1001;
    527          #endif
    528          }
    529          
    530          /**
    531            * @brief  This function handles TIM5 global interrupt request.
    532            * @param  None
    533            * @retval None
    534            */
    535          void TIM5_IRQHandler(void)  //  5msec Timer / TimeBase UP Counter    
    536          {
    537              TIM_ClearITPendingBit(TIM5, TIM_IT_Update);
    538              
    539              KeySwitch_Process();    //  KeySwitch.c Func
    540          }
    541          
    542          /**
    543            * @brief  This function handles USART3 global interrupt request.
    544            * @param  None
    545            * @retval None
    546            */
    547            // STM32F407 <-> exynos4412 can_data
    548          
    549          unsigned char temp_61184;
    550          
    551          void USART2_IRQHandler(void)
    552          {
    553          	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
    554          	{
    555          		Uart2_SerialRxMsg[Uart2_SerialRxCnt] = (u8)USART_ReceiveData(USART2);
    556          
    557          		  //  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    558          		#ifdef DEBUG_CAN_RX
    559          		DebugMsg_printf("%2x ", Uart2_SerialRxMsg[Uart2_SerialRxCnt]);
    560          		#endif
    561          		
    562          		switch(Uart2_SerialRxCnt)
    563          		{
    564          			case 0:
    565          				if(Uart2_SerialRxMsg[0] == 0x02)		// STX
    566          					Uart2_SerialRxCnt++;
    567          				break;
    568          			case 1:
    569          				if(Uart2_SerialRxMsg[1] == 0xF5)		// ID
    570          					Uart2_SerialRxCnt++;
    571          				else
    572          					Uart2_SerialRxCnt = 0;
    573          				break;
    574          			case 25:
    575          				Uart2_SerialRxCnt = 0;
    576          
    577          				if(Uart2_SerialRxMsg[25] == 0x03)		// ETX
    578          				{
    579                              			//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    580          					#ifdef DEBUG_CAN_RX
    581          					DebugMsg_printf("\r\n");
    582          					#endif
    583          					
    584          					switch(Uart2_SerialRxMsg[3])		// Cmd
    585          					{
    586          						case 1 :		// UART TX Start Flag
    587          							Flag_UartTxStart = 1;
    588          							Flag_TxE2pRomData=0;
    589          							SendEEPROMDataCnt=0;
    590          							break;
    591          						case 203 :  // for EHCU setting 61184 format 131017
    592          							Flag_SerialRxMsg |= RX_MSG203;
    593          							memcpy(&Uart2_RxMsg_Single_46[0], &Uart2_SerialRxMsg[4], 8);
    594          							break;
    595          						case 69 :	// When needed
    596          							Flag_SerialRxMsg |= RX_MSG69;
    597          							memcpy(&Uart2_RxMsg_Single_69[0], &Uart2_SerialRxMsg[4], 8);
    598          							break;
    599          						case 70 :	// When needed - RX_MSG69 Multi Packet
    600          							Flag_SerialRxMsg |= RX_MSG69_M;
    601          							memcpy(&Uart2_RxMsg_Multi_69[0], &Uart2_SerialRxMsg[4], 21);
    602          							break;
    603          						case 160 :	// 100 ms
    604          							if((Uart2_RxMsg_Single_160[0] & 0xc0) == 0xc0)
    605          								memcpy(&Uart2_RxMsg_Single_160[0], &Uart2_SerialRxMsg[4], 8);
    606          							else
    607          							{
    608          								memcpy(&Uart2_RxMsg_Single_160[1], &Uart2_SerialRxMsg[5], 7);
    609          								Uart2_RxMsg_Single_160[0] |= (Uart2_SerialRxMsg[4] & 0x3F);
    610          							}
    611          																						
    612          							if(((Uart2_SerialRxMsg[4] & 0xc0) == 0x00) || ((Uart2_SerialRxMsg[4] & 0xc0) == 0x40))
    613          							        memcpy(&Uart2_RxMsg_Single_160[0], &Uart2_SerialRxMsg[4], 8);
    614          							break;
    615          						case 161 :	// When needed
    616          							Flag_SerialRxMsg |= RX_MSG161;
    617          							memcpy(&Uart2_RxMsg_Multi_161[0], &Uart2_SerialRxMsg[4], 14);
    618          							temp_61184=0;
    619          							break;
    620          						case 162 :	// When needed
    621          							//Flag_SerialRxMsg |= RX_MSG162;
    622          							if(Uart2_RxMsg_Single_162[4] == 0)
    623          								memcpy(&Uart2_RxMsg_Single_162[0], &Uart2_SerialRxMsg[4], 8);
    624          							else
    625          								memcpy(&Uart2_RxMsg_Single_162[0], &Uart2_SerialRxMsg[4], 4);
    626          							break;	
    627          						case 163 :
    628          							Flag_SerialRxMsg |= RX_MSG163;
    629          							memcpy(&Uart2_RxMsg_Single_163[0], &Uart2_SerialRxMsg[4], 8);
    630          							break;
    631          						case 205 :	// Stop Send Cmd - A/S Phone Number
    632          							stop_send_as_phone_data = 1;
    633          							break;
    634          						case 200 :	// Save Data1
    635          							memcpy(&Uart2_RxMsg_Save_Data1[0], &Uart2_SerialRxMsg[4], 8);
    636          							break;
    637          						case 201 :	// Save Data2
    638          							memcpy(&Uart2_RxMsg_Save_Data2[0], &Uart2_SerialRxMsg[4], 8);
    639          							break;
    640          						case 202 :	// A/S Phone Number -> Save to EEPROM
    641          							Flag_SerialRxMsg |= RX_MSG202;
    642          							memcpy(&Uart2_RxMsg_AS_Phone_Data[0], &Uart2_SerialRxMsg[4], 8);
    643          							break;
    644          						case 210 :	// Smart Key Registration, Elimination
    645          							memcpy(&Uart2_RxMsg_Smk_Reg_Eli[0], &Uart2_SerialRxMsg[4], 8);
    646          							break;
    647          						case 247 :
    648          							Flag_SerialRxMsg |= RX_MSG247;
    649          							memcpy(&Uart2_RxMsg_Single_247[0], &Uart2_SerialRxMsg[4], 8);							
    650          							break;	
    651          						case 251 :
    652          							Flag_SerialRxMsg |= RX_MSG251;
    653          							memcpy(&Uart2_RxMsg_Single_251[0], &Uart2_SerialRxMsg[4], 8);							
    654          							break;
    655          						case 252 :	// Clock Set Data
    656          							Flag_SerialRxMsg |= RX_MSG252;
    657          							memcpy(&Uart2_RxMsg_Single_252[0], &Uart2_SerialRxMsg[4], 8);							
    658          							break;
    659          						case 253 :
    660          							Flag_SerialRxMsg |= RX_MSG253;
    661          							memcpy(&Uart2_RxMsg_Single_253[0], &Uart2_SerialRxMsg[4], 8);							
    662          							break;
    663          						case 101 :
    664          						case 102 :
    665          						case 109 : 
    666          						case 61 : 
    667          						case 31 : 
    668          						case 33 : 
    669          						case 34 : 
    670          						case 121 : 
    671          						case 123 : 
    672          							Flag_SerialRxMsg |= RX_MSG239;
    673          							memcpy(&Uart2_RxMsg_Single_239[0], &Uart2_SerialRxMsg[4], 8);		
    674          
    675          							temp_61184++;
    676          							
    677          							break;
    678          						
    679          					}
    680          				}
    681          				else
    682          				{
    683          					//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    684          					//DebugMsg_printf("Protocol Fail\r\n");
    685          				}
    686          
    687          				break;
    688          			
    689          			default :
    690          				Uart2_SerialRxCnt++;
    691          				break;
    692          		}
    693          	}
    694          
    695          	if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
    696          	{   
    697          		if((USART2->SR & 0x80) == RESET)
    698          			return;
    699          
    700          		if (pWriteBufPos == pReadBufPos)
    701          		{
    702          			if(Flag_TxE2pRomData == 1)
    703          			{
    704          			    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    705          			    return;
    706          		    	}
    707          		}
    708          
    709          		if(pReadBufPos >= (RING_BUF_SIZE-1))
    710          			pReadBufPos = 0;
    711          
    712          		if((Uart2_SerialTxCnt == 0) && (pWriteBufPos != pReadBufPos))
    713          		{
    714          			memcpy(&Uart2_SerialTxMsg[3] , &ring_buf[pReadBufPos], 12);
    715          		}
    716          		
    717          		USART_SendData(USART2, (u16)(Uart2_SerialTxMsg[Uart2_SerialTxCnt++]));    
    718          		
    719          		if (Uart2_SerialTxCnt >= UART2_Tx_BUF_SIZE)
    720          		{
    721          			//Uart2_SerialTxCnt = 0;
    722          			//pReadBufPos += 12;
    723          			//USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    724          
    725          			if(Flag_TxE2pRomData == 0)
    726          			{
    727                          		//  º¸³»´Â È½¼ö Áß¿äÇÏ´Ù. ÃÊ±â¿¡ ¹ö±×°¡ »ý½Ç ¼ö ÀÖÀ¸´Ï, Å×½ºÆ® ÇÊ¿äÇÔ!!!
    728          				//	EEPROM Data¸¦ 6¹ø º¸³½´Ù.
    729          				if(SendEEPROMDataCnt > 5)	
    730          				{
    731          					Uart2_SerialTxCnt = 0;	
    732          					Uart2_SerialTxMsg[15] = 0;
    733          					Flag_TxE2pRomData = 1;
    734          						
    735          					//	EEPROM Data¸¦ ±×¸¸ º¸³»°í CAN Data¸¦ º¸³½´Ù. 
    736          					Flag_UartTxStart = 0;
    737          					
    738          					//  Enable the USART2 Transmit interrupt
    739          					USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
    740          					CAN_ITConfig(CAN1, CAN_IT_FMP0,ENABLE);			
    741          				}
    742          				else
    743          				{
    744          					SendEEPROMDataCnt++;
    745          			        	Uart2_SerialTxCnt = 0;
    746          
    747          					//  Disable the USART3 Transmit interrupt
    748          					USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    749          				}
    750          			}
    751          			else
    752          			{
    753          				Uart2_SerialTxCnt = 0;
    754          				pReadBufPos += 12;
    755          			}
    756          		}  
    757          	}
    758          }
    759          
    760          void UART4_IRQHandler(void)
    761          {
    762          	//  UART4 receive interrupt routine
    763          	if (USART_GetITStatus(UART4, USART_IT_RXNE) != RESET) 
    764              	{
    765              		if(Change_UART4_for_Download==0)
    766          			UART4_Receive_CMD();
    767          		else
    768          			UART4_Receive_File();
    769          				
    770          	}
    771          	//  UART4 transmit interrupt routine
    772          	if (USART_GetITStatus(UART4, USART_IT_TXE) != RESET)
    773          	{   
    774          		UART4_transmit_CMD();
    775          	}
    776          }
    777          
    778          u8 temp_rx_buf[4];
    779          
    780          
    781          void UART4_Receive_CMD(void)
    782          {
    783          	
    784          	//  Read one byte to the receive data register
    785          	WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt] = USART_ReceiveData(UART4);
    786          
    787          	
    788              	//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    789          	#ifdef DEBUG_CMD_RX
    790          	DebugMsg_printf("%2x ", WL9FM_USART_DATA.COM4_RxBuf[WL9FM_USART_INDEX.COM4_RxCnt]);
    791          	#endif
    792          
    793          	
    794          	switch (WL9FM_USART_INDEX.COM4_RxCnt)
    795          	{
    796          		case 0:
    797          				if (WL9FM_USART_DATA.COM4_RxBuf[0] == STX)
    798          				{
    799          					WL9FM_USART_INDEX.COM4_RxCnt++;
    800          				}	
    801          				else
    802          				{
    803          					WL9FM_USART_INDEX.COM4_RxCnt=0;
    804          				}
    805          				
    806          				break;
    807          		case 1:
    808          				if (WL9FM_USART_DATA.COM4_RxBuf[1]      == KeyCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    809          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LCDBLCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    810          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == BUZZERCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    811          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == LAMPCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    812          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == CAMCMD)		WL9FM_USART_INDEX.COM4_RxCnt++;
    813          				else if (WL9FM_USART_DATA.COM4_RxBuf[1] == DOWNCMD)	WL9FM_USART_INDEX.COM4_RxCnt++;
    814          				else if ((WL9FM_USART_DATA.COM4_RxBuf[1]&0x80) == 0x80)	WL9FM_USART_INDEX.COM4_RxCnt++;
    815                                          
    816                                  else
    817                                  {
    818                                    	WL9FM_USART_INDEX.COM4_RxCnt = 0;
    819                                  }
    820          				break;
    821          
    822          		case 3: 
    823          				WL9FM_USART_INDEX.COM4_RxCnt = 0;
    824          				
    825          				//  µð¹ö±ëÇÒ ¶§¸¸ »ç¿ëÇÒ °Í
    826          				#ifdef DEBUG_CMD_RX
    827          				DebugMsg_printf("\r\n");
    828          				#endif
    829          
    830          		if (WL9FM_USART_DATA.COM4_RxBuf[Serial_COM4_RxSize-1] == ETX)
    831          		{
    832          			switch (WL9FM_USART_DATA.COM4_RxBuf[1])
    833          			{
    834          				case KeyCMD   :		//	Key Command
    835          
    836          					break;
    837          							
    838          				case LCDBLCMD :		//	LCD BackLight Command
    839          
    840          					//	LCD BackLight Level Á¶Àý.. Level0 ~ Level8
    841          					if (WL9FM_USART_DATA.COM4_RxBuf[2] < MaxBackLightLEVEL) 												
    842          					{
    843          						LCDBL_PWM_LEVEL(WL9FM_USART_DATA.COM4_RxBuf[2]);
    844          					}
    845          
    846          					break;
    847          
    848          				case BUZZERCMD :	//	Buzzer Command
    849          					break;
    850          
    851          				case LAMPCMD :	//	Buzzer Command
    852          					Lamp_name = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0xf0)>>4;
    853          					Lamp_Value = (WL9FM_USART_DATA.COM4_RxBuf[2] & 0x0f);
    854          					
    855          					Lamp_Update_State();
    856          					break;
    857          					
    858          				case CAMCMD:
    859          					cam_mode_change(WL9FM_USART_DATA.COM4_RxBuf[2]);
    860          					break;
    861          
    862          				case DOWNCMD:
    863          					Stm32_Update_CMD = WL9FM_USART_DATA.COM4_RxBuf[2];
    864          					ST_Update=1;
    865          					break;
    866          				case  DUMMYCMD:
    867          					CMD_DUMMY_SendToExynos(0);
    868          					break;
    869          
    870          				default :
    871          					break;								
    872          			}
    873                          }						
    874          
    875          		//memset(WL9FM_USART_DATA.COM4_RxBuf, 0x0, Serial_COM4_RxSize);					
    876          				break;
    877          		
    878          		default :
    879          
    880          			WL9FM_USART_INDEX.COM4_RxCnt++;
    881          			break;
    882          	}	
    883          }
    884          
    885          void UART4_Receive_File(void)
    886          {
    887          	
    888          	//  Read one byte to the receive data register
    889          	WL9FM_USART_RX_FILE_DATA.File_RxBuf[WL9FM_USART_RX_FILE_DATA.File_RxCnt] = USART_ReceiveData(UART4);
    890          	
    891          	switch (WL9FM_USART_RX_FILE_DATA.File_RxCnt)
    892          	{
    893          		case 0:
    894          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[0] == STX)
    895          				{
    896          					WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
    897          				}						
    898          				break;
    899          		case 1029: 
    900          				WL9FM_USART_RX_FILE_DATA.File_RxCnt = 0;
    901          					
    902          				if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == ETX)
    903          				{
    904          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
    905          					ST_Update=1;
    906          				}
    907          				else if (WL9FM_USART_RX_FILE_DATA.File_RxBuf[1029] == EOT)
    908          				{
    909          					memcpy(&WL9FM_USART_FILE_DATA , &WL9FM_USART_RX_FILE_DATA, Serial_file_RxSize);	
    910          					Change_UART4_for_Download =2;
    911          					ST_Update=1;
    912          				}
    913          				else
    914          				{
    915          					ACK_NACK_SendToExynos(NAK);
    916          				}
    917                                          break;
    918          		default :
    919          
    920          			WL9FM_USART_RX_FILE_DATA.File_RxCnt++;
    921          			break;
    922          	}					
    923          }
    924          
    925          
    926          void UART4_transmit_CMD(void)
    927          {
    928          	//  Write one byte to the transmit data register
    929          	USART_SendData(UART4, WL9FM_USART_DATA.COM4_TxBuf[WL9FM_USART_INDEX.COM4_TxCnt++]);
    930          
    931          	if (WL9FM_USART_INDEX.COM4_TxIdx >= Serial_COM4_TxSize)
    932          	{
    933          		WL9FM_USART_INDEX.COM4_TxIdx = Serial_COM4_TxSize;
    934          	}    
    935          	if (WL9FM_USART_INDEX.COM4_TxCnt == WL9FM_USART_INDEX.COM4_TxIdx)
    936          	{
    937          		//  Disable the UART4 Transmit interrupt
    938          		USART_ITConfig(UART4, USART_IT_TXE, DISABLE);
    939          
    940          		WL9FM_USART_INDEX.COM4_TxIdx = 0; //  transmit buffer Index clear
    941          		WL9FM_USART_INDEX.COM4_TxCnt = 0; //  transmit buffer Cnt   clear
    942          	}              
    943          }
    944          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
      16   CAN1_RX0_IRQHandler
        16   -> Buzzer_SendToEXYNOS
        16   -> CAN_Receive
         0   -> OperateRingBuffer
        16   -> OperateRingBuffer
        16   -> __aeabi_memcpy
        16   -> memcpy
       0   DebugMon_Handler
       0   HardFault_Handler
       0   MemManage_Handler
       0   NMI_Handler
      16   OperateRingBuffer
         0   -> USART_ITConfig
        16   -> memcpy
       0   PendSV_Handler
       0   SVC_Handler
       8   SendTo_E2PROM
         0   -> USART_ITConfig
         8   -> memcpy
       8   SysTick_Handler
         8   -> TimeDelay_Decrement
       8   TIM4_IRQHandler
         8   -> Buzzer_Off
         8   -> Buzzer_On
         8   -> TIM_ClearITPendingBit
       8   TIM5_IRQHandler
         0   -> KeySwitch_Process
         8   -> TIM_ClearITPendingBit
       8   UART4_IRQHandler
         8   -> UART4_Receive_CMD
         8   -> UART4_Receive_File
         8   -> UART4_transmit_CMD
         8   -> USART_GetITStatus
       8   UART4_Receive_CMD
         0   -> CMD_DUMMY_SendToExynos
         0   -> LCDBL_PWM_LEVEL
         0   -> Lamp_Update_State
         8   -> USART_ReceiveData
         0   -> cam_mode_change
       8   UART4_Receive_File
         0   -> ACK_NACK_SendToExynos
         8   -> USART_ReceiveData
         8   -> __aeabi_memcpy
      16   UART4_transmit_CMD
        16   -> USART_ITConfig
        16   -> USART_SendData
      24   USART2_IRQHandler
         0   -> CAN_ITConfig
        24   -> USART_GetITStatus
         0   -> USART_ITConfig
        24   -> USART_ITConfig
        24   -> USART_ReceiveData
        24   -> USART_SendData
        24   -> __aeabi_memcpy
       0   UsageFault_Handler
       0   WL9F_CAN_Buffer_Init
       8   memcpy
         8   -> __aeabi_memcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable12
       4  ??DataTable12_1
       4  ??DataTable12_10
       4  ??DataTable12_11
       4  ??DataTable12_12
       4  ??DataTable12_13
       4  ??DataTable12_14
       4  ??DataTable12_15
       4  ??DataTable12_16
       4  ??DataTable12_17
       4  ??DataTable12_18
       4  ??DataTable12_19
       4  ??DataTable12_2
       4  ??DataTable12_20
       4  ??DataTable12_21
       4  ??DataTable12_22
       4  ??DataTable12_23
       4  ??DataTable12_24
       4  ??DataTable12_25
       4  ??DataTable12_26
       4  ??DataTable12_27
       4  ??DataTable12_28
       4  ??DataTable12_29
       4  ??DataTable12_3
       4  ??DataTable12_30
       4  ??DataTable12_31
       4  ??DataTable12_32
       4  ??DataTable12_33
       4  ??DataTable12_34
       4  ??DataTable12_35
       4  ??DataTable12_36
       4  ??DataTable12_37
       4  ??DataTable12_38
       4  ??DataTable12_39
       4  ??DataTable12_4
       4  ??DataTable12_40
       4  ??DataTable12_41
       4  ??DataTable12_42
       4  ??DataTable12_43
       4  ??DataTable12_44
       4  ??DataTable12_45
       4  ??DataTable12_46
       4  ??DataTable12_47
       4  ??DataTable12_48
       4  ??DataTable12_49
       4  ??DataTable12_5
       4  ??DataTable12_50
       4  ??DataTable12_51
       4  ??DataTable12_6
       4  ??DataTable12_7
       4  ??DataTable12_8
       4  ??DataTable12_9
       8  ?Subroutine0
       2  BusFault_Handler
     356  CAN1_RX0_IRQHandler
       2  DebugMon_Handler
       2  HardFault_Handler
       2  MemManage_Handler
       2  NMI_Handler
     168  OperateRingBuffer
       2  PendSV_Handler
      20  RxMsg
       2  SVC_Handler
      78  SendTo_E2PROM
       1  Stm32_Update_CMD
      84  SysTick_Handler
      86  TIM4_IRQHandler
      20  TIM5_IRQHandler
      56  UART4_IRQHandler
     222  UART4_Receive_CMD
     108  UART4_Receive_File
      64  UART4_transmit_CMD
     808  USART2_IRQHandler
      34  Uart2_SerialRxMsg
          Uart2_SerialRxCnt
          Flag_TxE2pRomData
          stop_send_as_phone_data
          temp_61184
          pReadBufPos
    7728  Uart2_SerialTxMsg
          Iden
          CanRecvCnt
          Uart2_SerialTxCnt
          SendEEPROMDataCnt
          Buz1
          Buz2
          pWriteBufPos
          TotPacketNum
          TotMsgSize
          CommErrCnt
          pgn
          ring_buf
       2  UsageFault_Handler
      38  WL9F_CAN_Buffer_Init
      12  memcpy
       2  old_test
       4  temp_rx_buf
       2  test
       8  test_temp

 
 7 799 bytes in section .bss
 2 332 bytes in section .text
 
 2 320 bytes of CODE memory (+ 12 bytes shared)
 7 799 bytes of DATA memory

Errors: none
Warnings: none
