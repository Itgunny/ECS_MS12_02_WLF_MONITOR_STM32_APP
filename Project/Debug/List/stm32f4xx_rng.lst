###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      04/Mar/2013  20:44:04 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\src\stm32f4xx_rng.c                          #
#    Command line =  "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\src\stm32f4xx_rng.c" -D                      #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN "C:\Tools\IAR Systems\Embedded   #
#                    Workbench 6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\L #
#                    ist\" -o "C:\Tools\IAR Systems\Embedded Workbench        #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\Obj\"       #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "C:\Tools\IAR Systems\Embedded Workbench         #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Platform\COMMO #
#                    N\INC\" -I "C:\Tools\IAR Systems\Embedded Workbench      #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Platform\TaeHa #
#                     - ECS\INC\" -I "C:\Tools\IAR Systems\Embedded           #
#                    Workbench 6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Libr #
#                    aries\CMSIS\Device\ST\STM32F4xx\Include\" -I             #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\" -Oh --use_c++_inline -I     #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\List\stm32f #
#                    4xx_rng.lst                                              #
#    Object file  =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\Obj\stm32f4 #
#                    xx_rng.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\IAR Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_APP\Libraries\STM32F4xx_StdPeriph_Driver\src\stm32f4xx_rng.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_rng.c
      4            * @author  MCD Application Team
      5            * @version V1.0.2
      6            * @date    05-March-2012
      7              * @brief This file provides firmware functions to manage the following 
      8            *          functionalities of the Random Number Generator (RNG) peripheral:           
      9            *           - Initialization and Configuration 
     10            *           - Get 32 bit Random number      
     11            *           - Interrupts and flags management       
     12            *         
     13            *  @verbatim
     14            *                               
     15            *          ===================================================================      
     16            *                                   How to use this driver
     17            *          ===================================================================          
     18            *          1. Enable The RNG controller clock using 
     19            *            RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
     20            *              
     21            *          2. Activate the RNG peripheral using RNG_Cmd() function.
     22            *          
     23            *          3. Wait until the 32 bit Random number Generator contains a valid 
     24            *            random data (using polling/interrupt mode). For more details, 
     25            *            refer to "Interrupts and flags management functions" module 
     26            *            description.
     27            *           
     28            *          4. Get the 32 bit Random number using RNG_GetRandomNumber() function
     29            *          
     30            *          5. To get another 32 bit Random number, go to step 3.       
     31            *
     32            *         
     33            *              
     34            *  @endverbatim
     35            *         
     36            ******************************************************************************
     37            * @attention
     38            *
     39            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     40            *
     41            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     42            * You may not use this file except in compliance with the License.
     43            * You may obtain a copy of the License at:
     44            *
     45            *        http://www.st.com/software_license_agreement_liberty_v2
     46            *
     47            * Unless required by applicable law or agreed to in writing, software 
     48            * distributed under the License is distributed on an "AS IS" BASIS, 
     49            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     50            * See the License for the specific language governing permissions and
     51            * limitations under the License.
     52            *
     53            ******************************************************************************
     54            */
     55          
     56          /* Includes ------------------------------------------------------------------*/
     57          #include "stm32f4xx_rng.h"
     58          #include "stm32f4xx_rcc.h"
     59          
     60          /** @addtogroup STM32F4xx_StdPeriph_Driver
     61            * @{
     62            */
     63          
     64          /** @defgroup RNG 
     65            * @brief RNG driver modules
     66            * @{
     67            */ 
     68          
     69          /* Private typedef -----------------------------------------------------------*/
     70          /* Private define ------------------------------------------------------------*/
     71          /* Private macro -------------------------------------------------------------*/
     72          /* Private variables ---------------------------------------------------------*/
     73          /* Private function prototypes -----------------------------------------------*/
     74          /* Private functions ---------------------------------------------------------*/
     75          
     76          /** @defgroup RNG_Private_Functions
     77            * @{
     78            */ 
     79          
     80          /** @defgroup RNG_Group1 Initialization and Configuration functions
     81           *  @brief    Initialization and Configuration functions 
     82           *
     83          @verbatim    
     84           ===============================================================================
     85                                Initialization and Configuration functions
     86           ===============================================================================  
     87            This section provides functions allowing to 
     88             - Initialize the RNG peripheral
     89             - Enable or disable the RNG peripheral
     90             
     91          @endverbatim
     92            * @{
     93            */
     94          
     95          /**
     96            * @brief  Deinitializes the RNG peripheral registers to their default reset values.
     97            * @param  None
     98            * @retval None
     99            */
    100          void RNG_DeInit(void)
    101          {
    102            /* Enable RNG reset state */
    103            RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
    104          
    105            /* Release RNG from reset state */
    106            RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
    107          }
    108          
    109          /**
    110            * @brief  Enables or disables the RNG peripheral.
    111            * @param  NewState: new state of the RNG peripheral.
    112            *          This parameter can be: ENABLE or DISABLE.
    113            * @retval None
    114            */
    115          void RNG_Cmd(FunctionalState NewState)
    116          {
    117            /* Check the parameters */
    118            assert_param(IS_FUNCTIONAL_STATE(NewState));
    119          
    120            if (NewState != DISABLE)
    121            {
    122              /* Enable the RNG */
    123              RNG->CR |= RNG_CR_RNGEN;
    124            }
    125            else
    126            {
    127              /* Disable the RNG */
    128              RNG->CR &= ~RNG_CR_RNGEN;
    129            }
    130          }
    131          /**
    132            * @}
    133            */
    134          
    135          /** @defgroup RNG_Group2 Get 32 bit Random number function
    136           *  @brief    Get 32 bit Random number function 
    137           *
    138          
    139          @verbatim    
    140           ===============================================================================
    141                                Get 32 bit Random number function
    142           ===============================================================================  
    143            This section provides a function allowing to get the 32 bit Random number  
    144            
    145            @note  Before to call this function you have to wait till DRDY flag is set,
    146                   using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
    147             
    148          @endverbatim
    149            * @{
    150            */
    151          
    152          
    153          /**
    154            * @brief  Returns a 32-bit random number.
    155            *   
    156            * @note   Before to call this function you have to wait till DRDY (data ready)
    157            *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
    158            * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
    159            *         function), the RNG_FLAG_DRDY flag is automatically cleared.
    160            * @note   In the case of a seed error, the generation of random numbers is 
    161            *         interrupted for as long as the SECS bit is '1'. If a number is 
    162            *         available in the RNG_DR register, it must not be used because it may 
    163            *         not have enough entropy. In this case, it is recommended to clear the 
    164            *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
    165            *         and enable the RNG peripheral (using RNG_Cmd() function) to 
    166            *         reinitialize and restart the RNG.
    167            * @note   In the case of a clock error, the RNG is no more able to generate 
    168            *         random numbers because the PLL48CLK clock is not correct. User have 
    169            *         to check that the clock controller is correctly configured to provide
    170            *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
    171            *         function) . The clock error has no impact on the previously generated 
    172            *         random numbers, and the RNG_DR register contents can be used.
    173            *         
    174            * @param  None
    175            * @retval 32-bit random number.
    176            */
    177          uint32_t RNG_GetRandomNumber(void)
    178          {
    179            /* Return the 32 bit random number from the DR register */
    180            return RNG->DR;
    181          }
    182          
    183          
    184          /**
    185            * @}
    186            */
    187          
    188          /** @defgroup RNG_Group3 Interrupts and flags management functions
    189           *  @brief   Interrupts and flags management functions
    190           *
    191          @verbatim   
    192           ===============================================================================
    193                             Interrupts and flags management functions
    194           ===============================================================================  
    195          
    196            This section provides functions allowing to configure the RNG Interrupts and 
    197            to get the status and clear flags and Interrupts pending bits.
    198            
    199            The RNG provides 3 Interrupts sources and 3 Flags:
    200            
    201            Flags :
    202            ---------- 
    203               1. RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
    204                                   random data. it is cleared by reading the valid data 
    205                                   (using RNG_GetRandomNumber() function).
    206          
    207               2. RNG_FLAG_CECS : In the case of a seed error detection. 
    208                
    209               3. RNG_FLAG_SECS : In the case of a clock error detection.
    210                        
    211          
    212            Interrupts :
    213            ------------
    214             if enabled, an RNG interrupt is pending :
    215              
    216             1.  In the case of the RNG_DR register contains valid random data. 
    217                 This interrupt source is cleared once the RNG_DR register has been read 
    218                 (using RNG_GetRandomNumber() function) until a new valid value is 
    219                 computed. 
    220             
    221             or 
    222             2. In the case of a seed error : One of the following faulty sequences has 
    223                been detected:
    224                - More than 64 consecutive bits at the same value (0 or 1)
    225                - More than 32 consecutive alternance of 0 and 1 (0101010101...01)
    226                This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
    227                function.
    228             
    229             or
    230             3. In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
    231                was not correctly detected (fPLL48CLK< fHCLK/16).
    232                This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_CEI)
    233                function.
    234                @note In this case, User have to check that the clock controller is 
    235                      correctly configured to provide the RNG clock. 
    236          
    237            Managing the RNG controller events :
    238            ------------------------------------ 
    239            The user should identify which mode will be used in his application to manage 
    240            the RNG controller events: Polling mode or Interrupt mode.
    241            
    242            1.  In the Polling Mode it is advised to use the following functions:
    243                - RNG_GetFlagStatus() : to check if flags events occur. 
    244                - RNG_ClearFlag()     : to clear the flags events.
    245            
    246            @note RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
    247                  by reading the Random number data.      
    248            
    249            2.  In the Interrupt Mode it is advised to use the following functions:
    250                - RNG_ITConfig()       : to enable or disable the interrupt source.
    251                - RNG_GetITStatus()    : to check if Interrupt occurs.
    252                - RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
    253                                          (corresponding Flag). 
    254            
    255          
    256          @endverbatim
    257            * @{
    258            */ 
    259          
    260          /**
    261            * @brief  Enables or disables the RNG interrupt.
    262            * @note   The RNG provides 3 interrupt sources,
    263            *           - Computed data is ready event (DRDY), and           
    264            *           - Seed error Interrupt (SEI) and 
    265            *           - Clock error Interrupt (CEI), 
    266            *         all these interrupts sources are enabled by setting the IE bit in 
    267            *         CR register. However, each interrupt have its specific status bit
    268            *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
    269            *         (see RNG_ClearITPendingBit() function).
    270            * @param  NewState: new state of the RNG interrupt.
    271            *          This parameter can be: ENABLE or DISABLE.
    272            * @retval None
    273            */
    274          void RNG_ITConfig(FunctionalState NewState)
    275          {
    276            /* Check the parameters */
    277            assert_param(IS_FUNCTIONAL_STATE(NewState));
    278          
    279            if (NewState != DISABLE)
    280            {
    281              /* Enable the RNG interrupt */
    282              RNG->CR |= RNG_CR_IE;
    283            }
    284            else
    285            {
    286              /* Disable the RNG interrupt */
    287              RNG->CR &= ~RNG_CR_IE;
    288            }
    289          }
    290          
    291          /**
    292            * @brief  Checks whether the specified RNG flag is set or not.
    293            * @param  RNG_FLAG: specifies the RNG flag to check.
    294            *          This parameter can be one of the following values:
    295            *            @arg RNG_FLAG_DRDY: Data Ready flag.
    296            *            @arg RNG_FLAG_CECS: Clock Error Current flag.
    297            *            @arg RNG_FLAG_SECS: Seed Error Current flag.
    298            * @retval The new state of RNG_FLAG (SET or RESET).
    299            */
    300          FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
    301          {
    302            FlagStatus bitstatus = RESET;
    303            /* Check the parameters */
    304            assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
    305          
    306            /* Check the status of the specified RNG flag */
    307            if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
    308            {
    309              /* RNG_FLAG is set */
    310              bitstatus = SET;
    311            }
    312            else
    313            {
    314              /* RNG_FLAG is reset */
    315              bitstatus = RESET;
    316            }
    317            /* Return the RNG_FLAG status */
    318            return  bitstatus;
    319          }
    320          
    321          
    322          /**
    323            * @brief  Clears the RNG flags.
    324            * @param  RNG_FLAG: specifies the flag to clear. 
    325            *          This parameter can be any combination of the following values:
    326            *            @arg RNG_FLAG_CECS: Clock Error Current flag.
    327            *            @arg RNG_FLAG_SECS: Seed Error Current flag.
    328            * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
    329            *         This flag is cleared only by reading the Random number data (using 
    330            *         RNG_GetRandomNumber() function).                           
    331            * @retval None
    332            */
    333          void RNG_ClearFlag(uint8_t RNG_FLAG)
    334          {
    335            /* Check the parameters */
    336            assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
    337            /* Clear the selected RNG flags */
    338            RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
    339          }
    340          
    341          /**
    342            * @brief  Checks whether the specified RNG interrupt has occurred or not.
    343            * @param  RNG_IT: specifies the RNG interrupt source to check.
    344            *          This parameter can be one of the following values:
    345            *            @arg RNG_IT_CEI: Clock Error Interrupt.
    346            *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
    347            * @retval The new state of RNG_IT (SET or RESET).
    348            */
    349          ITStatus RNG_GetITStatus(uint8_t RNG_IT)
    350          {
    351            ITStatus bitstatus = RESET;
    352            /* Check the parameters */
    353            assert_param(IS_RNG_GET_IT(RNG_IT));
    354          
    355            /* Check the status of the specified RNG interrupt */
    356            if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
    357            {
    358              /* RNG_IT is set */
    359              bitstatus = SET;
    360            }
    361            else
    362            {
    363              /* RNG_IT is reset */
    364              bitstatus = RESET;
    365            }
    366            /* Return the RNG_IT status */
    367            return bitstatus;
    368          }
    369          
    370          
    371          /**
    372            * @brief  Clears the RNG interrupt pending bit(s).
    373            * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
    374            *          This parameter can be any combination of the following values:
    375            *            @arg RNG_IT_CEI: Clock Error Interrupt.
    376            *            @arg RNG_IT_SEI: Seed Error Interrupt.
    377            * @retval None
    378            */
    379          void RNG_ClearITPendingBit(uint8_t RNG_IT)
    380          {
    381            /* Check the parameters */
    382            assert_param(IS_RNG_IT(RNG_IT));
    383          
    384            /* Clear the selected RNG interrupt pending bit */
    385            RNG->SR = (uint8_t)~RNG_IT;
    386          }
    387          /**
    388            * @}
    389            */ 
    390            
    391          /**
    392            * @}
    393            */ 
    394          
    395          /**
    396            * @}
    397            */ 
    398          
    399          
    400          /**
    401            * @}
    402            */ 
    403          
    404          
    405          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   RNG_ClearFlag
         8   -> assert_failed
       8   RNG_ClearITPendingBit
         8   -> assert_failed
       8   RNG_Cmd
         8   -> assert_failed
       8   RNG_DeInit
         0   -> RCC_AHB2PeriphResetCmd
         8   -> RCC_AHB2PeriphResetCmd
      16   RNG_GetFlagStatus
        16   -> assert_failed
      16   RNG_GetITStatus
        16   -> assert_failed
       0   RNG_GetRandomNumber
       8   RNG_ITConfig
         8   -> assert_failed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     128  ?<Constant "C:\\Tools\\IAR Systems\\...">
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
      34  RNG_ClearFlag
      34  RNG_ClearITPendingBit
      40  RNG_Cmd
      22  RNG_DeInit
      42  RNG_GetFlagStatus
      40  RNG_GetITStatus
       6  RNG_GetRandomNumber
      42  RNG_ITConfig

 
 400 bytes in section .text
 
 400 bytes of CODE memory

Errors: none
Warnings: none
