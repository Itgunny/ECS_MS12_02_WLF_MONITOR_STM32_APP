###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      09/Mar/2013  21:41:15 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Platform\TaeHa -          #
#                    ECS\SRC\WL9F_Display_APP.c                               #
#    Command line =  "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Platform\TaeHa -          #
#                    ECS\SRC\WL9F_Display_APP.c" -D USE_STDPERIPH_DRIVER -D   #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\List\" -o   #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\Obj\"       #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "C:\Tools\IAR Systems\Embedded Workbench         #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Platform\COMMO #
#                    N\INC\" -I "C:\Tools\IAR Systems\Embedded Workbench      #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Platform\TaeHa #
#                     - ECS\INC\" -I "C:\Tools\IAR Systems\Embedded           #
#                    Workbench 6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Libr #
#                    aries\CMSIS\Device\ST\STM32F4xx\Include\" -I             #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\" -Oh --use_c++_inline -I     #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\List\WL9F_D #
#                    isplay_APP.lst                                           #
#    Object file  =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\Obj\WL9F_Di #
#                    splay_APP.o                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\IAR Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_APP\Platform\TaeHa - ECS\SRC\WL9F_Display_APP.c
      1          /**
      2            ******************************************************************************
      3            * @file    WL9F_Monitor_APP.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   WL9F_Monitor_APP.c module
      8            *
      9            * Project Name       : WL9F Display APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Display_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "main.h"
     23          #include "WL9F_Display_APP.h"	
     24          #include "WL9F_Display_Variable.h"
     25          
     26          /* Private typedef -----------------------------------------------------------*/
     27          /* Private define ------------------------------------------------------------*/
     28          /* Private macro -------------------------------------------------------------*/
     29          /* Private variables ---------------------------------------------------------*/
     30          /* Private function prototypes -----------------------------------------------*/
     31          /* Private functions ---------------------------------------------------------*/
     32          
     33          void Init_RTC(void)
     34          {
     35              WL9FM_RTC.Year   = 0;
     36          	WL9FM_RTC.Month  = 1;
     37          	WL9FM_RTC.Date   = 1;
     38          	WL9FM_RTC.Day    = 1;
     39          	WL9FM_RTC.Hour   = 12;
     40          	WL9FM_RTC.Minute = 0;
     41          	WL9FM_RTC.Second = 0;
     42          
     43          	WRITE_RTC(WL9FM_RTC);
     44          }
     45          void InitE2PROM(void)
     46          {
     47          	u8 i;
     48          	u8 tmpBuf1[8];
     49          	u8 tmpBuf2[8];
     50          	u8 tmpBuf3[8];
     51          	u8 tmpBuf4[21];
     52          	
     53          	SaveE2PROM1 = (WL9FM_SaveE2PROM1*)&tmpBuf1[0];
     54          	SaveE2PROM2 = (WL9FM_SaveE2PROM2*)&tmpBuf2[0];
     55          	SaveE2PROM3 = (WL9FM_SaveE2PROM3*)&tmpBuf3[0];
     56          	SaveE2PROMoniInfo = (WL9FM_SaveE2PROMoniInfo*)&tmpBuf4[0];
     57          
     58          	SaveE2PROM1->WorkLoad 				= 0;
     59          	SaveE2PROM1->testWorkLoad 			= 0;
     60          	SaveE2PROM1->Unit 					= 3;	//	¼·¾¾ ( C ) , km/h
     61          	SaveE2PROM1->DispType	 			= 0;
     62          	SaveE2PROM1->InfoViewPriority 		= 0;
     63          	SaveE2PROM1->UnitPressure 			= 0;
     64          	SaveE2PROM1->Reserved0 				= 0;
     65          	SaveE2PROM1->Lang 					= 0;
     66          	SaveE2PROM1->ManualBackLight 		= 7;
     67          	SaveE2PROM1->AutoBackLight 			= 0;
     68          	SaveE2PROM1->TopInfoView 			= 1;	// 	Hyd Temp
     69          	SaveE2PROM1->BottomInfoView 		= 3;	// 	Cool Temp
     70          	SaveE2PROM1->InfoViewCnt 			= 2;
     71          	SaveE2PROM1->HR_Start 				= 0;
     72          	SaveE2PROM1->RearCamReverseMode 	= 0;	// 	Off
     73          	SaveE2PROM1->ActiveCamNum 			= 1;
     74          	SaveE2PROM1->FirstCam 				= 0;
     75          	SaveE2PROM1->SecondCam 				= 1;
     76          	SaveE2PROM1->ThirdCam 				= 2;
     77          	SaveE2PROM1->Reserved1 				= 0;
     78          
     79          	SaveE2PROM2->LightMode 				= 0;
     80          	SaveE2PROM2->JobTimeView 			= 0;
     81          	SaveE2PROM2->OdoMeterView 			= 0;
     82          	SaveE2PROM2->JobOdoSelect 			= 0;
     83          	SaveE2PROM2->LightLowTime 			= 8;
     84          	SaveE2PROM2->LightUpperTime 		= 16;
     85          	SaveE2PROM2->AutoLightDay 			= 0;
     86          	SaveE2PROM2->AutoLightNight 		= 0;
     87          	SaveE2PROM2->Reserved1 				= 0;
     88          
     89          	SaveE2PROM3->Phone_1  				= 0;
     90          	SaveE2PROM3->Phone_2  				= 8;
     91          	SaveE2PROM3->Phone_3  				= 0;
     92          	SaveE2PROM3->Phone_4  				= 5;
     93          	SaveE2PROM3->Phone_5  				= 5;
     94          	SaveE2PROM3->Phone_6  				= 5;
     95          	SaveE2PROM3->Phone_7  				= 8;
     96          	SaveE2PROM3->Phone_8  				= 2;
     97          	SaveE2PROM3->Phone_9  				= 7;
     98          	SaveE2PROM3->Phone_10 				= 2;
     99          	SaveE2PROM3->Phone_11 				= 0xf;
    100          	SaveE2PROM3->Phone_12 				= 0xf;
    101          
    102          #if 1	// Monitor Change History - temp
    103          	SaveE2PROMoniInfo->ManufactureYear  = 0;
    104          	SaveE2PROMoniInfo->ManufactureMonth = 0;
    105          	SaveE2PROMoniInfo->ManufactureDay   = 0;
    106          	SaveE2PROMoniInfo->MoniPorgramVer   = 0;
    107          	SaveE2PROMoniInfo->MoniSerialNo[0]  = 0;	// 0
    108          	SaveE2PROMoniInfo->MoniSerialNo[1]  = 0;	// 9
    109          	SaveE2PROMoniInfo->MoniSerialNo[2]  = 0;	// 0
    110          	SaveE2PROMoniInfo->MoniSerialNo[3]  = 0;	// 8
    111          	SaveE2PROMoniInfo->MoniSerialNo[4]  = 0;	// M
    112          	SaveE2PROMoniInfo->MoniSerialNo[5]  = 0;	// 0
    113          	SaveE2PROMoniInfo->MoniSerialNo[6]  = 0;	// 0
    114          	SaveE2PROMoniInfo->MoniSerialNo[7]  = 0;	// 0
    115          	SaveE2PROMoniInfo->MoniSerialNo[8]  = 0;	// 0
    116          	SaveE2PROMoniInfo->MoniSerialNo[9]  = 0;	// 0
    117          	SaveE2PROMoniInfo->MoniSerialNo[10] = 0;	// *
    118          	SaveE2PROMoniInfo->MoniModel[0]     = 0;	// N
    119          	SaveE2PROMoniInfo->MoniModel[1]     = 0;	// -
    120          	SaveE2PROMoniInfo->MoniModel[2]     = 0;	// H
    121          	SaveE2PROMoniInfo->MoniModel[3]     = 0;	// -
    122          	SaveE2PROMoniInfo->MoniModel[4]     = 0;	// W
    123          	SaveE2PROMoniInfo->MoniModel[5]     = 0;	// *
    124          #endif
    125          
    126          	SerialPutString("\n\rInitialize : 10 %%\n\r");
    127          
    128          	EEPROM_Write(0, 0);	// tmp
    129          	EEPROM_Write(0, 0);	// tmp
    130          	EEPROM_Write(0, 0);	// tmp
    131          
    132          	for(i = 0 ; i < 8 ; i++)
    133          	{
    134          		EEPROM_Write(i+8, tmpBuf1[i]);
    135          		TimeDelay_msec(5);
    136          		EEPROM_Write(i+16, tmpBuf2[i]);
    137          		TimeDelay_msec(5);
    138          		EEPROM_Write(i+24, tmpBuf3[i]);
    139          		TimeDelay_msec(5);
    140          	}
    141          
    142          	SerialPutString("Initialize : 30 %%\n\r");
    143          	
    144          #if 1	// Monitor Change History - temp
    145          	for(i = 0 ; i < 21 ; i++)
    146          	{
    147          		EEPROM_Write(i+50, tmpBuf4[i]);
    148          		TimeDelay_msec(5);
    149          	}
    150          #endif
    151          
    152          	for(i = 0 ; i < 79 ; i++)
    153          	{
    154          		EEPROM_Write(i+100, 0xff);
    155          		TimeDelay_msec(5);
    156          	}
    157          
    158          	SerialPutString("Initialize : 60 %%\n\r");
    159          
    160          	for(i = 0 ; i < 30 ; i++)
    161          	{
    162          		EEPROM_Write(i+200, 0xff);
    163          		TimeDelay_msec(5);
    164          	}
    165          
    166          	for(i = 0 ; i < 29 ; i++)
    167          	{
    168          		EEPROM_Write(i+230, 0xff);
    169          		TimeDelay_msec(5);
    170          	}
    171          
    172          	SerialPutString("Initialize : 95 %%\n\r");
    173          	Init_RTC();
    174          	SerialPutString("Initialize : 100 %%\n\r\n\r");
    175          }
    176          
    177          void ReadE2PROM_ToSend()
    178          {
    179          #if 0
    180          	u8 i;
    181          
    182          	adc_value = (ADC1->DR & 0x0000FFFF);
    183          	
    184          	i = EepromRead(0);	
    185          	i = EepromRead(0);
    186          	i = EepromRead(0);
    187              i = 0;
    188              
    189          	adc_value = (ADC1->DR & 0x0000FFFF);
    190          
    191          	for(i = 0 ; i < 24 ; i++)
    192          		eepRomReadData1[i] = EepromRead(i+8);
    193          
    194          	for(i = 0 ; i < 8 ; i++)
    195          		Uart3_RxMsg_Save_Data1[i] = eepRomReadData1[i];
    196          
    197          	for(i = 0 ; i < 8 ; i++)
    198          		Uart3_RxMsg_Save_Data2[i] = eepRomReadData1[i+8];
    199          
    200          	for(i = 0 ; i < 8 ; i++)
    201          		Uart3_RxMsg_AS_Phone_Data[i] = eepRomReadData1[i+16];
    202          
    203          	for(i = 0 ; i < 21 ; i++)
    204          		MoniInfoData[i] = EepromRead(i+50);
    205          	
    206          	for(i = 0 ; i < 79 ; i++)
    207          		McuInfoData1[i] = EepromRead(i+100);
    208          
    209          	for(i = 0 ; i < 4 ; i++)
    210          		McuInfoData2[i] = EepromRead(i+200);
    211          
    212          	for(i = 0 ; i < 4 ; i++)
    213          		McuInfoData3[i] = EepromRead(i+210);
    214          
    215          	for(i = 0 ; i < 4 ; i++)
    216          		McuInfoData4[i] = EepromRead(i+220);
    217          
    218          	memset(&tmpMcuInfoData[1] , 0xff, 77);
    219          	memcpy((u8*)&tmpMcuInfoData[0], (u8*)&McuInfoData1[0], 5);
    220          	memcpy((u8*)&tmpMcuInfoData[5], (u8*)&McuInfoData2[0], 4);
    221          	memcpy((u8*)&tmpMcuInfoData[9], (u8*)&McuInfoData3[0], 4);
    222          	memcpy((u8*)&tmpMcuInfoData[13], (u8*)&McuInfoData4[0], 4);
    223          
    224          
    225          	adc_value = (ADC1->DR & 0x0000FFFF);
    226          	
    227          	eepRomReadData1[12] = (adc_value & 0xff);
    228          	eepRomReadData1[13] = (adc_value & 0xff00) >> 8;
    229          //	DebugMsg_printf("%2x %2x\r\n", eepRomReadData1[13], eepRomReadData1[12]);
    230          
    231          #endif
    232          }
    233          
    234          /**
    235            * @brief  1msec OperationFunc
    236            * @param  None
    237            * @retval None
    238            */
    239          void WL9F_1mSecOperationFunc(void)
    240          {
    241          
    242          }
    243          
    244          /**
    245            * @brief  10msec OperationFunc
    246            * @param  None
    247            * @retval None
    248            */
    249          void WL9F_10mSecOperationFunc(void)
    250          {
    251          
    252          }
    253          
    254          /**
    255            * @brief  100msec OperationFunc
    256            * @param  None
    257            * @retval None
    258            */
    259          void WL9F_100mSecOperationFunc(void)
    260          {
    261          
    262          }
    263          
    264          /**
    265            * @brief  1sec OperationFunc
    266            * @param  None
    267            * @retval None
    268            */
    269          void WL9F_1SecOperationFunc(void)
    270          {
    271          
    272          }
    273          
    274          void WL9F_System_Init_Start(void)
    275          {
    276              WL9FM_PowerIG(PowerIG_OFF);					//  ->	GPIO_Control.c PowerIG¸¦ OFF·Î ¸¸µé¾î ³õ°í, 
    277          	WL9FM_EXYNOS_POWER_ONOFF(EXYNOS_POWER_ON);	//	->	GPIO_Control.c EXYNOS-4412 Power On..
    278          	//WL9FM_EXYNOS_PMIC_ONOFF();
    279          
    280          	DPRAM_Init();								//	-> 	DPRAM_Control.c (Dual Port RAM Init)
    281          	Hardware_Version_Init();					//  ->  Hardware_Version.c (Hardware Version ADC Start)
    282          	Buzzer_Init();              				//  ->  Buzzer.c (Buzzer Timer Start)
    283          	FM3164_Watchdog_Init(0x00);					//  ->  FM31X4.c (Integrated Processor Companion ON)
    284          	KeySwitch_Init();           				//  ->  KeySwitch.c
    285          	
    286          	LED_POWER_ONOFF(LED_ON);					//	->	LCD_Control.c (LED On/Off)
    287          	LCD_POWER_ONOFF(LCDPWR_ON);					//	-> 	LCD_Control.c (LCD 12V Power On/Off)
    288          
    289          	WL9FM_CAMERA_nRESET();						//	-> 	TW2835, TW8832 Power On..
    290          	LCD_Control_Init();							//	-> 	LCD_Control.c (LCDBL, ON/OFF)
    291          	TW2835_Control_Init();						//	-> 	TW2835_Control.c (CAMERA -> Decoder)
    292          	TW8832_Control_Init();						//	-> 	TW8832_Control.c (LCD Interface)
    293          
    294              USART_COMInit(COMPORT2);       				//  ->	UART_Control.c
    295              USART_COMInit(COMPORT4);       				//      COM2 : CAN Data
    296              											//		COM4 : CMD Data
    297              CAN_COMInit();
    298          												//	-> 	CAN_Control.c
    299          	//InitE2PROM();
    300          	ReadE2PROM_ToSend();						//	->	EEPROM Data Read
    301          
    302          	//WL9FM_PowerIG(PowerIG_ON);				//	->	GPIO_Control.c ÃÊ±âÈ­°¡ ³¡³ª¸é, PowerIG¸¦ ON ÇÑ´Ù.!!
    303          
    304          }
    305          
    306          /**
    307            * @brief  Application Program Start Point.
    308            * @param  None
    309            * @retval None
    310            */
    311          void WL9F_Display_APP(void)
    312          {
    313          	DebugUART_Init();			//	->	Main.c
    314              DebugMsg_printf("== START -> DebugMsg from Exynos-4412 \r\n");    
    315          
    316          	System_Configuration();		//  ->  System_Init.c
    317          	                            //      RCC, NVIC, GPIO Initialize
    318          
    319          	System_Initialize();		//	-> 	System_Init.c
    320          								//		IAP¿Í µ¿ÀÏÇÑ ÃÊ±âÈ­¸¦ ÇÑ´Ù. -> »óÅÂ º¯°æ ¾øÀ½.
    321          	
    322          //	System °­Á¦ RESET½ÃÅ°±â À§ÇÏ¿© goto lable Ãß°¡..
    323          SYSTEM_RESET :
    324          
    325          	System_Variable_Init();
    326          	WL9F_System_Init_Start();
    327          	
    328          	/* Infinite loop */
    329          	while (1)
    330          	{  
    331          		if (WL9FM_TIME.Flag_1mSec == 1)     //  1msec
    332          		{
    333          			WL9FM_TIME.Flag_1mSec = 0;
    334          
    335          			//  WL9F_1mSecOperationState -> Func ½ÇÇà..
    336          			//  if (WL9F_1mSecOperationState != 0) WL9F_1mSecOperationFunc[WL9F_1mSecOperationState]();    
    337          			WL9F_1mSecOperationFunc();
    338          		}            
    339          		
    340          		if (WL9FM_TIME.Flag_10mSec == 1)    //  10msec
    341          		{
    342          			WL9FM_TIME.Flag_10mSec = 0;
    343          
    344          			//  WL9F_10mSecOperationState -> Func ½ÇÇà..
    345          			//  if (WL9F_10mSecOperationState != 0) WL9F_10mSecOperationFunc[WL9F_10mSecOperationState]();    
    346          			WL9F_10mSecOperationFunc();
    347          		}
    348          		
    349          		if (WL9FM_TIME.Flag_100mSec == 1)   //  100 msec
    350          		{
    351          			WL9FM_TIME.Flag_100mSec = 0;
    352          
    353          			//  WL9F_100mSecOperationState -> Func ½ÇÇà..
    354          			//  if (WL9F_100mSecOperationState != 0) WL9F_100mSecOperationFunc[WL9F_100mSecOperationState]();    
    355          			WL9F_100mSecOperationFunc();
    356          
    357          			#if 0
    358          			//	WL9F Monitor RESET Code
    359          			if((SystemReset == 1) || (gRebootCmd == 1))
    360          			{
    361          				goto SYSTEM_RESET;
    362          			}
    363          			#endif
    364          		}
    365          		
    366          		if (WL9FM_TIME.Flag_1Sec == 1)      //  1000 msec
    367          		{
    368          			WL9FM_TIME.Flag_1Sec = 0;
    369          
    370          			//  WL9F_1SecOperationState -> Func ½ÇÇà..
    371          			//  if (WL9F_1SecOperationState != 0) WL9F_1SecOperationFunc[WL9F_1SecOperationState]();    
    372          			WL9F_1SecOperationFunc();
    373          		}
    374          	}
    375          }
    376          
    377          /*********(C) COPYRIGHT 2010 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   InitE2PROM
        72   -> EEPROM_Write
        72   -> Init_RTC
        72   -> TimeDelay_msec
      16   Init_RTC
        16   -> WRITE_RTC
       0   ReadE2PROM_ToSend
       0   WL9F_100mSecOperationFunc
       0   WL9F_10mSecOperationFunc
       0   WL9F_1SecOperationFunc
       0   WL9F_1mSecOperationFunc
       8   WL9F_Display_APP
         8   -> DebugUART_Init
         8   -> System_Configuration
         8   -> System_Initialize
         8   -> System_Variable_Init
         8   -> WL9F_System_Init_Start
       8   WL9F_System_Init_Start
         8   -> Buzzer_Init
         0   -> CAN_COMInit
         8   -> DPRAM_Init
         8   -> FM3164_Watchdog_Init
         8   -> Hardware_Version_Init
         8   -> KeySwitch_Init
         8   -> LCD_Control_Init
         8   -> LCD_POWER_ONOFF
         8   -> LED_POWER_ONOFF
         8   -> TW2835_Control_Init
         8   -> TW8832_Control_Init
         8   -> USART_COMInit
         8   -> WL9FM_CAMERA_nRESET
         8   -> WL9FM_EXYNOS_POWER_ONOFF
         8   -> WL9FM_PowerIG


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
     456  InitE2PROM
      48  Init_RTC
       1  KeySwitch_Value
       2  ReadE2PROM_ToSend
      16  SaveE2PROM1
          SaveE2PROM2
          SaveE2PROM3
          SaveE2PROMoniInfo
       8  WL9FM_BUZZER
       4  WL9FM_LCDBL
       8  WL9FM_RTC
      20  WL9FM_TIME
     520  WL9FM_USART_DATA
       8  WL9FM_USART_INDEX
       2  WL9F_100mSecOperationFunc
       2  WL9F_10mSecOperationFunc
       2  WL9F_1SecOperationFunc
       2  WL9F_1mSecOperationFunc
      66  WL9F_Display_APP
      84  WL9F_System_Init_Start

 
 585 bytes in section .bss
 676 bytes in section .text
 
 676 bytes of CODE memory
 585 bytes of DATA memory

Errors: none
Warnings: 1
