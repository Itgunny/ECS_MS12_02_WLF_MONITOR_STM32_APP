###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      18/Dec/2015  11:50:00 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -            #
#                    STM32_APP\Platform\TaeHa - ECS\SRC\TW8816_OSD.c          #
#    Command line =  "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\Platform\TaeHa - ECS\SRC\TW8816_OSD.c" -D      #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN "D:\Project\[SVN] ECS-RD12-16 -  #
#                    WL9F Monitor - STM32_APP\Project\Debug\List\" -o         #
#                    "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\Project\Debug\Obj\" --debug --endian=little    #
#                    --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config          #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I "D:\Project\[SVN]   #
#                    ECS-RD12-16 - WL9F Monitor -                             #
#                    STM32_APP\Project\..\Platform\COMMON\INC\" -I            #
#                    "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\Project\..\Platform\TaeHa - ECS\INC\" -I       #
#                    "D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -           #
#                    STM32_APP\Project\..\Libraries\CMSIS\Device\ST\STM32F4xx #
#                    \Include\" -I "D:\Project\[SVN] ECS-RD12-16 - WL9F       #
#                    Monitor - STM32_APP\Project\..\Libraries\STM32F4xx_StdPe #
#                    riph_Driver\inc\" -Oh --use_c++_inline -I "C:\Program    #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -            #
#                    STM32_APP\Project\Debug\List\TW8816_OSD.lst              #
#    Object file  =  D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor -            #
#                    STM32_APP\Project\Debug\Obj\TW8816_OSD.o                 #
#                                                                             #
#                                                                             #
###############################################################################

D:\Project\[SVN] ECS-RD12-16 - WL9F Monitor - STM32_APP\Platform\TaeHa - ECS\SRC\TW8816_OSD.c
      1          /**
      2            ******************************************************************************
      3            * @file    TW8816_OSD.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   TW8816_OSD.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_APP.h"	
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          /* Private function prototypes -----------------------------------------------*/
     29          /* Private functions ---------------------------------------------------------*/
     30          #if 1
     31          void SetFontOSDWindow(void)
     32          {
     33          	WriteTW8816(0xff, 0x00);
     34                  DownloadUDFont();
     35          /*
     36          	WriteTW8816(0x94, 0x00);
     37          	WriteTW8816(0x9e, 0x00);
     38          	WriteTW8816(0x9f, 0x01);
     39          	WriteTW8816(0xa0, 0x00);
     40          	WriteTW8816(0xa1, 0x00);
     41          	WriteTW8816(0xa2, 0x00);
     42          	WriteTW8816(0xa3, 0x22);
     43          	WriteTW8816(0xa4, 0x0e);
     44          	WriteTW8816(0xa5, 0x32);
     45          	WriteTW8816(0xa6, 0x00);
     46          	WriteTW8816(0xa7, 0x00);
     47          	WriteTW8816(0xa8, 0x00);
     48          	WriteTW8816(0xa9, 0x50);
     49          	WriteTW8816(0xaa, 0x00);
     50          	WriteTW8816(0xab, 0x55);
     51          	WriteTW8816(0xac, 0x0f);
     52          	WriteTW8816(0xad, 0x00);
     53          	WriteTW8816(0xae, 0x00);
     54          */
     55          	
     56          	WriteTW8816(0x94, 0x02);
     57                  WriteTW8816(0x94, 0x80);
     58          	
     59          }
     60          
     61          void SetDisplayCH1(void)
     62          {
     63          	WriteTW8816(0xff, 0x00);
     64                  
     65          	WriteTW8816(0x95, 0x80);
     66          	WriteTW8816(0x96, 0x1C);
     67          	WriteTW8816(0x97, 0x43);
     68          	WriteTW8816(0x98, 0x06);
     69          
     70          	WriteTW8816(0x95, 0x80);
     71          	WriteTW8816(0x96, 0x1D);
     72          	WriteTW8816(0x97, 0x48);
     73          	WriteTW8816(0x98, 0x06);
     74          
     75          	WriteTW8816(0x95, 0x80);
     76          	WriteTW8816(0x96, 0x1E);
     77          	WriteTW8816(0x97, 0x31);
     78          	WriteTW8816(0x98, 0x06);
     79          }
     80          
     81          void SetDisplayCH2(void)
     82          {
     83          	WriteTW8816(0xff, 0x00);
     84          
     85          	WriteTW8816(0x95, 0x80);
     86          	WriteTW8816(0x96, 0x1c);
     87          	WriteTW8816(0x97, 0x43);
     88          	WriteTW8816(0x98, 0x06);
     89          
     90          	WriteTW8816(0x95, 0x80);
     91          	WriteTW8816(0x96, 0x1d);
     92          	WriteTW8816(0x97, 0x48);
     93          	WriteTW8816(0x98, 0x06);
     94          
     95          	WriteTW8816(0x95, 0x80);
     96          	WriteTW8816(0x96, 0x1e);
     97          	WriteTW8816(0x97, 0x32);
     98          	WriteTW8816(0x98, 0x06);
     99          }
    100          
    101          void SetDisplayCH3(void)
    102          {
    103          	WriteTW8816(0xff, 0x00);
    104          
    105          	WriteTW8816(0x95, 0x80);
    106          	WriteTW8816(0x96, 0x1c);
    107          	WriteTW8816(0x97, 0x43);
    108          	WriteTW8816(0x98, 0x06);
    109          
    110          	WriteTW8816(0x95, 0x80);
    111          	WriteTW8816(0x96, 0x1d);
    112          	WriteTW8816(0x97, 0x48);
    113          	WriteTW8816(0x98, 0x06);
    114          
    115          	WriteTW8816(0x95, 0x80);
    116          	WriteTW8816(0x96, 0x1e);
    117          	WriteTW8816(0x97, 0x33);
    118          	WriteTW8816(0x98, 0x06);
    119          }
    120          
    121          void SetDisplayCH4(void)
    122          {
    123          	WriteTW8816(0xff, 0x00);
    124          
    125          	WriteTW8816(0x95, 0x80);
    126          	WriteTW8816(0x96, 0x1c);
    127          	WriteTW8816(0x97, 0x43);
    128          	WriteTW8816(0x98, 0x06);
    129          
    130          	WriteTW8816(0x95, 0x80);
    131          	WriteTW8816(0x96, 0x1d);
    132          	WriteTW8816(0x97, 0x48);
    133          	WriteTW8816(0x98, 0x06);
    134          
    135          	WriteTW8816(0x95, 0x80);
    136          	WriteTW8816(0x96, 0x1e);
    137          	WriteTW8816(0x97, 0x34);
    138          	WriteTW8816(0x98, 0x06);
    139          }
    140          
    141          void SetDisplayCHBlank(void)
    142          {
    143          	WriteTW8816(0xff, 0x00);
    144          
    145          	WriteTW8816(0x95, 0x80);
    146          	WriteTW8816(0x96, 0x1c);
    147          	WriteTW8816(0x97, 0x20);
    148          	WriteTW8816(0x98, 0x06);
    149          
    150          	WriteTW8816(0x95, 0x80);
    151          	WriteTW8816(0x96, 0x1d);
    152          	WriteTW8816(0x97, 0x20);
    153          	WriteTW8816(0x98, 0x06);
    154          
    155          	WriteTW8816(0x95, 0x80);
    156          	WriteTW8816(0x96, 0x1e);
    157          	WriteTW8816(0x97, 0x20);
    158          	WriteTW8816(0x98, 0x06);
    159          }
    160          
    161          void SetDisplayNosignal(void)
    162          {
    163          	WriteTW8816(0xff, 0x00);
    164          
    165          	WriteTW8816(0x95, 0x80);
    166          	WriteTW8816(0x96, 0xd8);
    167          	WriteTW8816(0x97, 0x4e);
    168          	WriteTW8816(0x98, 0x06);
    169          
    170          	WriteTW8816(0x95, 0x80);
    171          	WriteTW8816(0x96, 0xd9);
    172          	WriteTW8816(0x97, 0x4f);
    173          	WriteTW8816(0x98, 0x06);
    174          
    175          	WriteTW8816(0x95, 0x80);
    176          	WriteTW8816(0x96, 0xda);
    177          	WriteTW8816(0x97, 0x20);
    178          	WriteTW8816(0x98, 0x06);
    179          
    180          	WriteTW8816(0x95, 0x80);
    181          	WriteTW8816(0x96, 0xdb);
    182          	WriteTW8816(0x97, 0x53);
    183          	WriteTW8816(0x98, 0x06);
    184          
    185          	WriteTW8816(0x95, 0x80);
    186          	WriteTW8816(0x96, 0xdc);
    187          	WriteTW8816(0x97, 0x49);
    188          	WriteTW8816(0x98, 0x06);
    189          
    190          	WriteTW8816(0x95, 0x80);
    191          	WriteTW8816(0x96, 0xdd);
    192          	WriteTW8816(0x97, 0x47);
    193          	WriteTW8816(0x98, 0x06);
    194          
    195          	WriteTW8816(0x95, 0x80);
    196          	WriteTW8816(0x96, 0xde);
    197          	WriteTW8816(0x97, 0x4e);
    198          	WriteTW8816(0x98, 0x06);
    199          
    200          	WriteTW8816(0x95, 0x80);
    201          	WriteTW8816(0x96, 0xdf);
    202          	WriteTW8816(0x97, 0x41);
    203          	WriteTW8816(0x98, 0x06);
    204          
    205          	WriteTW8816(0x95, 0x80);
    206          	WriteTW8816(0x96, 0xe0);
    207          	WriteTW8816(0x97, 0x4c);
    208          	WriteTW8816(0x98, 0x06);
    209          	
    210          }
    211          
    212          void SetDisplayNosignalBlank(void)
    213          {
    214          	WriteTW8816(0xff, 0x00);
    215          
    216          	WriteTW8816(0x95, 0x80);
    217          	WriteTW8816(0x96, 0xd8);
    218          	WriteTW8816(0x97, 0x20);
    219          	WriteTW8816(0x98, 0x06);
    220          
    221          	WriteTW8816(0x95, 0x80);
    222          	WriteTW8816(0x96, 0xd9);
    223          	WriteTW8816(0x97, 0x20);
    224          	WriteTW8816(0x98, 0x06);
    225          
    226          	WriteTW8816(0x95, 0x80);
    227          	WriteTW8816(0x96, 0xda);
    228          	WriteTW8816(0x97, 0x20);
    229          	WriteTW8816(0x98, 0x06);
    230          
    231          	WriteTW8816(0x95, 0x80);
    232          	WriteTW8816(0x96, 0xdb);
    233          	WriteTW8816(0x97, 0x20);
    234          	WriteTW8816(0x98, 0x06);
    235          
    236          	WriteTW8816(0x95, 0x80);
    237          	WriteTW8816(0x96, 0xdc);
    238          	WriteTW8816(0x97, 0x20);
    239          	WriteTW8816(0x98, 0x06);
    240          
    241          	WriteTW8816(0x95, 0x80);
    242          	WriteTW8816(0x96, 0xdd);
    243          	WriteTW8816(0x97, 0x20);
    244          	WriteTW8816(0x98, 0x06);
    245          
    246          	WriteTW8816(0x95, 0x80);
    247          	WriteTW8816(0x96, 0xde);
    248          	WriteTW8816(0x97, 0x20);
    249          	WriteTW8816(0x98, 0x06);
    250          
    251          	WriteTW8816(0x95, 0x80);
    252          	WriteTW8816(0x96, 0xdf);
    253          	WriteTW8816(0x97, 0x20);
    254          	WriteTW8816(0x98, 0x06);
    255          
    256          	WriteTW8816(0x95, 0x80);
    257          	WriteTW8816(0x96, 0xe0);
    258          	WriteTW8816(0x97, 0x20);
    259          	WriteTW8816(0x98, 0x06);
    260          	
    261          }
    262          
    263          void SetDisplayWarning(void)
    264          {
    265                  u8 i;
    266                  WriteTW8816(0x94, 0x02);
    267                  for(i = 0; i < 27; i++){
    268                      WriteTW8816(0x94, 0x80);
    269                      WriteTW8816(0x95, 0x81);
    270                      WriteTW8816(0x96, (i + 0x9b));
    271                      WriteTW8816(0x97, (i + 0x7B));
    272                      WriteTW8816(0x98, 0x06);    
    273                  }
    274          }
    275          #else
    276          
    277          
    278          void SetFontOSDWindow(void)
    279          {
    280          	I2C2_ByteWrite_8816(0xff, 0x00);
    281          
    282          	I2C2_ByteWrite_8816(0x94, 0x00);
    283          	I2C2_ByteWrite_8816(0x9e, 0x00);
    284          	I2C2_ByteWrite_8816(0x9f, 0x01);
    285          	I2C2_ByteWrite_8816(0xa0, 0x00);
    286          	I2C2_ByteWrite_8816(0xa1, 0x00);
    287          	I2C2_ByteWrite_8816(0xa2, 0x00);
    288          	I2C2_ByteWrite_8816(0xa3, 0x22);
    289          	I2C2_ByteWrite_8816(0xa4, 0x0e);
    290          	I2C2_ByteWrite_8816(0xa5, 0x32);
    291          	I2C2_ByteWrite_8816(0xa6, 0x00);
    292          	I2C2_ByteWrite_8816(0xa7, 0x00);
    293          	I2C2_ByteWrite_8816(0xa8, 0x00);
    294          	I2C2_ByteWrite_8816(0xa9, 0x50);
    295          	I2C2_ByteWrite_8816(0xaa, 0x00);
    296          	I2C2_ByteWrite_8816(0xab, 0x55);
    297          	I2C2_ByteWrite_8816(0xac, 0x0f);
    298          	I2C2_ByteWrite_8816(0xad, 0x00);
    299          	I2C2_ByteWrite_8816(0xae, 0x00);
    300          
    301          	I2C2_ByteWrite_8816(0x94, 0x11);
    302          	I2C2_ByteWrite_8816(0x94, 0x02);
    303          	
    304          }
    305          
    306          void SetDisplayCH1(void)
    307          {
    308          	I2C2_ByteWrite_8816(0xff, 0x00);
    309          
    310          	I2C2_ByteWrite_8816(0x95, 0x80);
    311          	I2C2_ByteWrite_8816(0x96, 0x1d);
    312          	I2C2_ByteWrite_8816(0x97, 0x43);
    313          	I2C2_ByteWrite_8816(0x98, 0x06);
    314          
    315          	I2C2_ByteWrite_8816(0x95, 0x80);
    316          	I2C2_ByteWrite_8816(0x96, 0x1e);
    317          	I2C2_ByteWrite_8816(0x97, 0x48);
    318          	I2C2_ByteWrite_8816(0x98, 0x06);
    319          
    320          	I2C2_ByteWrite_8816(0x95, 0x80);
    321          	I2C2_ByteWrite_8816(0x96, 0x1f);
    322          	I2C2_ByteWrite_8816(0x97, 0x31);
    323          	I2C2_ByteWrite_8816(0x98, 0x06);
    324          }
    325          
    326          void SetDisplayCH2(void)
    327          {
    328          	I2C2_ByteWrite_8816(0xff, 0x00);
    329          
    330          	I2C2_ByteWrite_8816(0x95, 0x80);
    331          	I2C2_ByteWrite_8816(0x96, 0x1d);
    332          	I2C2_ByteWrite_8816(0x97, 0x43);
    333          	I2C2_ByteWrite_8816(0x98, 0x06);
    334          
    335          	I2C2_ByteWrite_8816(0x95, 0x80);
    336          	I2C2_ByteWrite_8816(0x96, 0x1e);
    337          	I2C2_ByteWrite_8816(0x97, 0x48);
    338          	I2C2_ByteWrite_8816(0x98, 0x06);
    339          
    340          	I2C2_ByteWrite_8816(0x95, 0x80);
    341          	I2C2_ByteWrite_8816(0x96, 0x1f);
    342          	I2C2_ByteWrite_8816(0x97, 0x32);
    343          	I2C2_ByteWrite_8816(0x98, 0x06);
    344          }
    345          
    346          void SetDisplayCH3(void)
    347          {
    348          	I2C2_ByteWrite_8816(0xff, 0x00);
    349          
    350          	I2C2_ByteWrite_8816(0x95, 0x80);
    351          	I2C2_ByteWrite_8816(0x96, 0x1d);
    352          	I2C2_ByteWrite_8816(0x97, 0x43);
    353          	I2C2_ByteWrite_8816(0x98, 0x06);
    354          
    355          	I2C2_ByteWrite_8816(0x95, 0x80);
    356          	I2C2_ByteWrite_8816(0x96, 0x1e);
    357          	I2C2_ByteWrite_8816(0x97, 0x48);
    358          	I2C2_ByteWrite_8816(0x98, 0x06);
    359          
    360          	I2C2_ByteWrite_8816(0x95, 0x80);
    361          	I2C2_ByteWrite_8816(0x96, 0x1f);
    362          	I2C2_ByteWrite_8816(0x97, 0x33);
    363          	I2C2_ByteWrite_8816(0x98, 0x06);
    364          }
    365          
    366          void SetDisplayCH4(void)
    367          {
    368          	I2C2_ByteWrite_8816(0xff, 0x00);
    369          
    370          	I2C2_ByteWrite_8816(0x95, 0x80);
    371          	I2C2_ByteWrite_8816(0x96, 0x1d);
    372          	I2C2_ByteWrite_8816(0x97, 0x43);
    373          	I2C2_ByteWrite_8816(0x98, 0x06);
    374          
    375          	I2C2_ByteWrite_8816(0x95, 0x80);
    376          	I2C2_ByteWrite_8816(0x96, 0x1e);
    377          	I2C2_ByteWrite_8816(0x97, 0x48);
    378          	I2C2_ByteWrite_8816(0x98, 0x06);
    379          
    380          	I2C2_ByteWrite_8816(0x95, 0x80);
    381          	I2C2_ByteWrite_8816(0x96, 0x1f);
    382          	I2C2_ByteWrite_8816(0x97, 0x34);
    383          	I2C2_ByteWrite_8816(0x98, 0x06);
    384          }
    385          
    386          void SetDisplayCHBlank(void)
    387          {
    388          	I2C2_ByteWrite_8816(0xff, 0x00);
    389          
    390          	I2C2_ByteWrite_8816(0x95, 0x80);
    391          	I2C2_ByteWrite_8816(0x96, 0x1d);
    392          	I2C2_ByteWrite_8816(0x97, 0x20);
    393          	I2C2_ByteWrite_8816(0x98, 0x06);
    394          
    395          	I2C2_ByteWrite_8816(0x95, 0x80);
    396          	I2C2_ByteWrite_8816(0x96, 0x1e);
    397          	I2C2_ByteWrite_8816(0x97, 0x20);
    398          	I2C2_ByteWrite_8816(0x98, 0x06);
    399          
    400          	I2C2_ByteWrite_8816(0x95, 0x80);
    401          	I2C2_ByteWrite_8816(0x96, 0x1f);
    402          	I2C2_ByteWrite_8816(0x97, 0x20);
    403          	I2C2_ByteWrite_8816(0x98, 0x06);
    404          }
    405          
    406          void SetDisplayNosignal(void)
    407          {
    408          	I2C2_ByteWrite_8816(0xff, 0x00);
    409          
    410          	I2C2_ByteWrite_8816(0x95, 0x80);
    411          	I2C2_ByteWrite_8816(0x96, 0xd8);
    412          	I2C2_ByteWrite_8816(0x97, 0x4e);
    413          	I2C2_ByteWrite_8816(0x98, 0x06);
    414          
    415          	I2C2_ByteWrite_8816(0x95, 0x80);
    416          	I2C2_ByteWrite_8816(0x96, 0xd9);
    417          	I2C2_ByteWrite_8816(0x97, 0x4f);
    418          	I2C2_ByteWrite_8816(0x98, 0x06);
    419          
    420          	I2C2_ByteWrite_8816(0x95, 0x80);
    421          	I2C2_ByteWrite_8816(0x96, 0xda);
    422          	I2C2_ByteWrite_8816(0x97, 0x20);
    423          	I2C2_ByteWrite_8816(0x98, 0x06);
    424          
    425          	I2C2_ByteWrite_8816(0x95, 0x80);
    426          	I2C2_ByteWrite_8816(0x96, 0xdb);
    427          	I2C2_ByteWrite_8816(0x97, 0x53);
    428          	I2C2_ByteWrite_8816(0x98, 0x06);
    429          
    430          	I2C2_ByteWrite_8816(0x95, 0x80);
    431          	I2C2_ByteWrite_8816(0x96, 0xdc);
    432          	I2C2_ByteWrite_8816(0x97, 0x49);
    433          	I2C2_ByteWrite_8816(0x98, 0x06);
    434          
    435          	I2C2_ByteWrite_8816(0x95, 0x80);
    436          	I2C2_ByteWrite_8816(0x96, 0xdd);
    437          	I2C2_ByteWrite_8816(0x97, 0x47);
    438          	I2C2_ByteWrite_8816(0x98, 0x06);
    439          
    440          	I2C2_ByteWrite_8816(0x95, 0x80);
    441          	I2C2_ByteWrite_8816(0x96, 0xde);
    442          	I2C2_ByteWrite_8816(0x97, 0x4e);
    443          	I2C2_ByteWrite_8816(0x98, 0x06);
    444          
    445          	I2C2_ByteWrite_8816(0x95, 0x80);
    446          	I2C2_ByteWrite_8816(0x96, 0xdf);
    447          	I2C2_ByteWrite_8816(0x97, 0x41);
    448          	I2C2_ByteWrite_8816(0x98, 0x06);
    449          
    450          	I2C2_ByteWrite_8816(0x95, 0x80);
    451          	I2C2_ByteWrite_8816(0x96, 0xe0);
    452          	I2C2_ByteWrite_8816(0x97, 0x4c);
    453          	I2C2_ByteWrite_8816(0x98, 0x06);
    454          	
    455          }
    456          
    457          void SetDisplayNosignalBlank(void)
    458          {
    459          	I2C2_ByteWrite_8816(0xff, 0x00);
    460          
    461          	I2C2_ByteWrite_8816(0x95, 0x80);
    462          	I2C2_ByteWrite_8816(0x96, 0xd8);
    463          	I2C2_ByteWrite_8816(0x97, 0x20);
    464          	I2C2_ByteWrite_8816(0x98, 0x06);
    465          
    466          	I2C2_ByteWrite_8816(0x95, 0x80);
    467          	I2C2_ByteWrite_8816(0x96, 0xd9);
    468          	I2C2_ByteWrite_8816(0x97, 0x20);
    469          	I2C2_ByteWrite_8816(0x98, 0x06);
    470          
    471          	I2C2_ByteWrite_8816(0x95, 0x80);
    472          	I2C2_ByteWrite_8816(0x96, 0xda);
    473          	I2C2_ByteWrite_8816(0x97, 0x20);
    474          	I2C2_ByteWrite_8816(0x98, 0x06);
    475          
    476          	I2C2_ByteWrite_8816(0x95, 0x80);
    477          	I2C2_ByteWrite_8816(0x96, 0xdb);
    478          	I2C2_ByteWrite_8816(0x97, 0x20);
    479          	I2C2_ByteWrite_8816(0x98, 0x06);
    480          
    481          	I2C2_ByteWrite_8816(0x95, 0x80);
    482          	I2C2_ByteWrite_8816(0x96, 0xdc);
    483          	I2C2_ByteWrite_8816(0x97, 0x20);
    484          	I2C2_ByteWrite_8816(0x98, 0x06);
    485          
    486          	I2C2_ByteWrite_8816(0x95, 0x80);
    487          	I2C2_ByteWrite_8816(0x96, 0xdd);
    488          	I2C2_ByteWrite_8816(0x97, 0x20);
    489          	I2C2_ByteWrite_8816(0x98, 0x06);
    490          
    491          	I2C2_ByteWrite_8816(0x95, 0x80);
    492          	I2C2_ByteWrite_8816(0x96, 0xde);
    493          	I2C2_ByteWrite_8816(0x97, 0x20);
    494          	I2C2_ByteWrite_8816(0x98, 0x06);
    495          
    496          	I2C2_ByteWrite_8816(0x95, 0x80);
    497          	I2C2_ByteWrite_8816(0x96, 0xdf);
    498          	I2C2_ByteWrite_8816(0x97, 0x20);
    499          	I2C2_ByteWrite_8816(0x98, 0x06);
    500          
    501          	I2C2_ByteWrite_8816(0x95, 0x80);
    502          	I2C2_ByteWrite_8816(0x96, 0xe0);
    503          	I2C2_ByteWrite_8816(0x97, 0x20);
    504          	I2C2_ByteWrite_8816(0x98, 0x06);
    505          	
    506          }
    507          
    508          
    509          #endif
    510          
    511          
    512          /*********(C) COPYRIGHT 2010 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   SetDisplayCH1
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayCH2
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayCH3
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayCH4
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayCHBlank
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayNosignal
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayNosignalBlank
         0   -> WriteTW8816
         8   -> WriteTW8816
       8   SetDisplayWarning
         8   -> WriteTW8816
       8   SetFontOSDWindow
         8   -> DownloadUDFont
         0   -> WriteTW8816
         8   -> WriteTW8816


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      18  ??Subroutine1_0
       8  ?Subroutine0
      94  SetDisplayCH1
      94  SetDisplayCH2
      94  SetDisplayCH3
      94  SetDisplayCH4
      86  SetDisplayCHBlank
     286  SetDisplayNosignal
     276  SetDisplayNosignalBlank
      68  SetDisplayWarning
      34  SetFontOSDWindow

 
 1 152 bytes in section .text
 
 1 152 bytes of CODE memory

Errors: none
Warnings: none
