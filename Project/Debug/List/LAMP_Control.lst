###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      14/Apr/2014  09:10:45 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa -          #
#                    ECS\SRC\LAMP_Control.c                                   #
#    Command line =  "C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa -         #
#                    ECS\SRC\LAMP_Control.c" -D USE_STDPERIPH_DRIVER -D       #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\ -o    #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\        #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Platfo #
#                    rm\COMMON\INC\ -I "C:\Tools\WL9F\WL_F_Monitor_APP\Projec #
#                    t\..\Platform\TaeHa - ECS\INC\" -I                       #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\ -I                        #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\ -Oh --use_c++_inline -I      #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\LAMP_C #
#                    ontrol.lst                                               #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\LAMP_Co #
#                    ntrol.o                                                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa - ECS\SRC\LAMP_Control.c
      1          /**
      2            ******************************************************************************
      3            * @file    LAMP_Control.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   LAMP_Control.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_APP.h"	
     23          
     24          
     25          
     26          /* Private typedef -----------------------------------------------------------*/
     27          /* Private define ------------------------------------------------------------*/ 
     28          st_CANDATA_HCEPGN_65428	RX_HCEPGN_65428;
     29          Realy_Control		rx_Realy_Control;
     30          EHCU_Status		rx_EHCU_Status;
     31          Auto_position_Status rx_Auto_position_Status;
     32          /* Private macro -------------------------------------------------------------*/
     33          /* Private variables ---------------------------------------------------------*/
     34          u8 Lamp_name;
     35          u8 Lamp_Value;
     36          
     37          unsigned char Ride_Control_flag;
     38          unsigned char AutoRide_Control_flag;
     39          
     40          unsigned char Attachment_Unlock_flag;
     41          unsigned char Attachment_Lock_flag;
     42          
     43          unsigned char Auto_Grease_Green_flag;
     44          unsigned char Auto_Grease_Red_flag;
     45          
     46          unsigned int Led_SIG_TEMP[10];
     47          unsigned int Led_BL_TEMP[10];
     48          
     49          unsigned char Illumination_Sig;
     50          /* Private function prototypes -----------------------------------------------*/
     51          /* Private functions ---------------------------------------------------------*/
     52          
     53          //------------------------------------------------------------------------------
     54          // Function Name 	: Work_Light_left_LampSystem
     55          // Description 	: Work_Light_left_LampSystem  동작에 조건 판단.
     56          // Input 			: None
     57          // Return 		: None
     58          // Period 		: 10ms
     59          // rx_Realy_Control.work_lamp_Status 3435
     60          // rx_Realy_Control.rear_work_Status 3446
     61          //------------------------------------------------------------------------------
     62          unsigned char Work_Light_left_LampSystem(void)
     63          {
     64          	unsigned char work_Light_Lamp_flag;
     65          
     66          	if(rx_Realy_Control.Work_Lamp_Status < 0x03)
     67          	{
     68          		if(rx_Realy_Control.Work_Lamp_Status == 0) 
     69          			work_Light_Lamp_flag =0;
     70          		else if(rx_Realy_Control.Work_Lamp_Status == 1)
     71          			work_Light_Lamp_flag =1;
     72          		else
     73          			work_Light_Lamp_flag =0;
     74          	}
     75          	else 
     76          		work_Light_Lamp_flag = 0;
     77          
     78          	return work_Light_Lamp_flag;
     79          }
     80          //------------------------------------------------------------------------------
     81          // Function Name 	: Work_Light_right_LampSystem
     82          // Description 	: Work_Light_right_LampSystem  동작에 조건 판단.
     83          // Input 			: None
     84          // Return 		: None
     85          // Period 		: 10ms
     86          // rx_Realy_Control.work_lamp_Status 3435
     87          // rx_Realy_Control.rear_work_Status 3446
     88          //------------------------------------------------------------------------------
     89          unsigned char Work_Light_right_LampSystem(void)
     90          {
     91          	unsigned char work_Light_Lamp_flag;
     92          
     93          	if((rx_Realy_Control.Work_Lamp_Status < 0x03) && (rx_Realy_Control.Rear_Work_lamp_Status < 0x03)) 
     94          	{
     95          		if((rx_Realy_Control.Work_Lamp_Status == 0) && (rx_Realy_Control.Rear_Work_lamp_Status == 0)) 
     96          			work_Light_Lamp_flag =0;
     97          		else if((rx_Realy_Control.Work_Lamp_Status == 1) && (rx_Realy_Control.Rear_Work_lamp_Status == 1))
     98          			work_Light_Lamp_flag =1;
     99          		else
    100          			work_Light_Lamp_flag =0;
    101          	}
    102          	else 
    103          		work_Light_Lamp_flag = 0;
    104          
    105          	return work_Light_Lamp_flag;
    106          }
    107          //------------------------------------------------------------------------------
    108          // Function Name 	: Main_Light_LampSystem
    109          // Description 	: Main_Light_LampSystem  동작에 조건 판단.
    110          // Input 			: None
    111          // Return 		: None
    112          // Period 		: 10ms
    113          // rx_Realy_Control.Head_lamp_Status 3436
    114          // rx_Realy_Control.Illumination_Status 3438
    115          //------------------------------------------------------------------------------
    116          unsigned char Main_Light_left_LampSystem(void)
    117          {
    118          	unsigned char Main_Light_Lamp_flag;
    119          
    120          	if((rx_Realy_Control.Head_lamp_Status < 0x03) && (rx_Realy_Control.Illumination_Status < 0x03)) 
    121          	{
    122          		if((rx_Realy_Control.Head_lamp_Status == 0) && (rx_Realy_Control.Illumination_Status == 0)) 
    123          			Main_Light_Lamp_flag =0;
    124          		else if(rx_Realy_Control.Illumination_Status == 1)
    125          			Main_Light_Lamp_flag =1;
    126          		else
    127          			Main_Light_Lamp_flag =0;
    128          	}
    129          	else 
    130          		Main_Light_Lamp_flag = 0;
    131          
    132          	return Main_Light_Lamp_flag;
    133          }
    134          
    135          //------------------------------------------------------------------------------
    136          // Function Name 	: Main_Light_LampSystem
    137          // Description 	: Main_Light_LampSystem  동작에 조건 판단.
    138          // Input 			: None
    139          // Return 		: None
    140          // Period 		: 10ms
    141          // rx_Realy_Control.Head_lamp_Status 3436
    142          // rx_Realy_Control.Illumination_Status 3438
    143          //------------------------------------------------------------------------------
    144          unsigned char Main_Light_Right_LampSystem(void)
    145          {
    146          	unsigned char Main_Light_Lamp_flag;
    147          
    148          	if((rx_Realy_Control.Head_lamp_Status < 0x03) && (rx_Realy_Control.Illumination_Status < 0x03)) 
    149          	{
    150          		if((rx_Realy_Control.Head_lamp_Status == 0) && (rx_Realy_Control.Illumination_Status == 0)) 
    151          			Main_Light_Lamp_flag =0;
    152          		else if(rx_Realy_Control.Illumination_Status == 1)
    153          			Main_Light_Lamp_flag = ((rx_Realy_Control.Head_lamp_Status == 0x01) ? 0x01 : 0x00);
    154          		else
    155          			Main_Light_Lamp_flag =0;
    156          	}
    157          	else 
    158          		Main_Light_Lamp_flag = 0;
    159          
    160          	return Main_Light_Lamp_flag;
    161          }
    162          
    163          
    164          //------------------------------------------------------------------------------
    165          // Function Name 	: Fine_Modulation_LampSystem
    166          // Description 	: Fine_Modulation_LampSystem  동작에 조건 판단.
    167          // Input 			: None
    168          // Return 		: None
    169          // Period 		: 10ms
    170          //------------------------------------------------------------------------------
    171          unsigned char Fine_Modulation_LampSystem(void)
    172          {
    173          	unsigned char Fine_Modulation_Lamp_flag;
    174          
    175          	if(rx_EHCU_Status.Fine_Modulation < 0x03) 	
    176          		Fine_Modulation_Lamp_flag = 	((rx_EHCU_Status.Fine_Modulation == 0x01) ? 0x01 : 0x00);
    177          	else 
    178          		Fine_Modulation_Lamp_flag = 0;
    179          
    180          	return Fine_Modulation_Lamp_flag;
    181          }
    182          
    183          //------------------------------------------------------------------------------
    184          // Function Name 	: Beacon_LampSystem
    185          // Description 	: Beacon_LampSystem  동작에 조건 판단.
    186          // Input 			: None
    187          // Return 		: None
    188          // Period 		: 10ms
    189          //------------------------------------------------------------------------------
    190          unsigned char Beacon_LampSystem(void)
    191          {
    192          	unsigned char Beacon_Lamp_flag;
    193          
    194          	if(rx_Realy_Control.beacon < 0x03) 	
    195          		Beacon_Lamp_flag = 	((rx_Realy_Control.beacon == 0x01) ? 0x01 : 0x00);
    196          	else 
    197          		Beacon_Lamp_flag = 0;
    198          
    199          	return Beacon_Lamp_flag;
    200          }
    201          
    202          //------------------------------------------------------------------------------
    203          // Function Name 	: Mirror_heat_LampSystem
    204          // Description 	: Mirror_heat_Lamp  동작에 조건 판단.
    205          // Input 			: None
    206          // Return 		: None
    207          // Period 		: 10ms
    208          //------------------------------------------------------------------------------
    209          unsigned char Mirror_heat_LampSystem(void)
    210          {
    211          	unsigned char Mirror_heat_flag;
    212          
    213          	if(RX_HCEPGN_65428.Mirror_Heater_Status < 0x03) 	
    214          		Mirror_heat_flag = 	((RX_HCEPGN_65428.Mirror_Heater_Status == 0x01) ? 0x01 : 0x00);
    215          	else 
    216          		Mirror_heat_flag = 0;
    217          
    218          	return Mirror_heat_flag;
    219          }
    220          
    221          //------------------------------------------------------------------------------
    222          // Function Name 	: Mirror_heat_LampSystem
    223          // Description 	: Mirror_heat_Lamp  동작에 조건 판단.
    224          // Input 			: None
    225          // Return 		: None
    226          // Period 		: 10ms
    227          //------------------------------------------------------------------------------
    228          unsigned char Rear_Wiper_LampSystem(void)
    229          {
    230          	unsigned char rear_wiper_flag;
    231          
    232          	if(rx_Realy_Control.Rear_Wiper < 0x03) 	
    233          		rear_wiper_flag = 	((rx_Realy_Control.Rear_Wiper == 0x00) ? 0x00 : 0x01);
    234          	else 
    235          		rear_wiper_flag = 0;
    236          
    237          	return rear_wiper_flag;
    238          }
    239          //------------------------------------------------------------------------------
    240          // Function Name 	: Ride_Control_LampSystem
    241          // Description 	: Ride_Control_Lamp 동작에 조건 판단.
    242          // Input 			: None
    243          // Return 		: None
    244          // Period 		: 10ms
    245          //------------------------------------------------------------------------------
    246          void Ride_Control_LampSystem(void)
    247          {
    248          	if(rx_Realy_Control.Ride_Control < 0x03)
    249          	{
    250          		if(rx_Realy_Control.Ride_Control == 0)
    251          		{
    252          			Ride_Control_flag = 0;
    253          			AutoRide_Control_flag = 0;
    254          		}
    255          		else if(rx_Realy_Control.Ride_Control == 1)
    256          		{
    257          			Ride_Control_flag = 1;
    258          			AutoRide_Control_flag = 0;
    259          		}
    260          		else if(rx_Realy_Control.Ride_Control == 2)
    261          		{
    262          			Ride_Control_flag = 0;
    263          			AutoRide_Control_flag = 1;
    264          		}
    265          	}
    266          	else
    267          	{
    268          		Ride_Control_flag = 0;
    269          		AutoRide_Control_flag = 0;
    270          	}
    271          }
    272          
    273          //------------------------------------------------------------------------------
    274          // Function Name 	: Quick_Coupler_LampSystem
    275          // Description 	: Quick_Coupler_Lamp 동작에 조건 판단.
    276          // Input 			: None
    277          // Return 		: None
    278          // Period 		: 10ms
    279          //------------------------------------------------------------------------------
    280          void Quick_Coupler_LampSystem(void)
    281          {
    282          	if(rx_Realy_Control.Quick_Coupler < 0x03)
    283          	{
    284          		if(rx_Realy_Control.Quick_Coupler == 0)
    285          		{
    286          			Attachment_Unlock_flag = 1;
    287          			Attachment_Lock_flag = 0;
    288          		}
    289          		else if(rx_Realy_Control.Quick_Coupler == 1)
    290          		{
    291          			Attachment_Unlock_flag = 0;
    292          			Attachment_Lock_flag = 1;
    293          		}
    294          		else
    295          		{
    296          			Attachment_Unlock_flag = 0;
    297          			Attachment_Lock_flag = 0;
    298          		}
    299          	}
    300          	else
    301          	{
    302          		Attachment_Unlock_flag = 0;
    303          		Attachment_Lock_flag = 0;
    304          	}
    305          }
    306          
    307          //------------------------------------------------------------------------------
    308          // Function Name 	: Boom_Detent_LampSystem
    309          // Description 	: Boom_Detent_LampSystem 동작에 조건 판단.
    310          // Input 			: None
    311          // Return 		: None
    312          // Period 		: 10ms
    313          //------------------------------------------------------------------------------
    314          unsigned char Boom_Detent_LampSystem(void)
    315          {
    316          	unsigned char Boom_Detent_flag;
    317          
    318          	if(rx_Auto_position_Status.Boom_Detent_Mode < 0x07) 	
    319          	{
    320          		if(rx_Auto_position_Status.Boom_Detent_Mode > 0 && rx_Auto_position_Status.Boom_Detent_Mode < 4)
    321          			Boom_Detent_flag = 1;
    322          		else
    323          			Boom_Detent_flag = 0;
    324          	}		
    325          	else 
    326          		Boom_Detent_flag = 0;
    327          
    328          	return Boom_Detent_flag;
    329          }
    330          
    331          //------------------------------------------------------------------------------
    332          // Function Name 	: Bucket_Detent_LampSystem
    333          // Description 	: Bomm_Detent_LampSystem 동작에 조건 판단.
    334          // Input 			: None
    335          // Return 		: None
    336          // Period 		: 10ms
    337          //------------------------------------------------------------------------------
    338          unsigned char Bucket_Detent_LampSystem(void)
    339          {
    340          	unsigned char Bucket_Detent_flag;
    341          
    342          	if(rx_Auto_position_Status.Bucket_Detent_Mode < 0x07) 	
    343          	{
    344          		if(rx_Auto_position_Status.Bucket_Detent_Mode > 0 && rx_Auto_position_Status.Bucket_Detent_Mode < 4)
    345          			Bucket_Detent_flag = 1;
    346          		else
    347          			Bucket_Detent_flag = 0;
    348          	}		
    349          	else 
    350          		Bucket_Detent_flag = 0;
    351          
    352          	return Bucket_Detent_flag;
    353          }
    354          
    355          
    356          //------------------------------------------------------------------------------
    357          // Function Name 	: Auto_Grease_LampSystem
    358          // Description 	: Auto_Grease_Lamp 동작에 조건 판단.
    359          // Input 			: None
    360          // Return 		: None
    361          // Period 		: 10ms
    362          //------------------------------------------------------------------------------
    363          void Auto_Grease_LampSystem(void)
    364          {
    365          
    366          	if(RX_HCEPGN_65428.AutoGrease_Green_LED < 0x03)
    367          	{
    368          		if(RX_HCEPGN_65428.AutoGrease_Green_LED == 0x01)
    369          		{
    370          			Auto_Grease_Green_flag = 1;
    371          		}
    372          		else
    373          		{
    374          			Auto_Grease_Green_flag = 0;
    375          		}
    376          	}
    377          
    378          	if(RX_HCEPGN_65428.AutoGrease_Red_LED < 0x03)
    379          	{
    380          		if(RX_HCEPGN_65428.AutoGrease_Red_LED == 0x01)
    381          		{
    382          			Auto_Grease_Red_flag = 1;
    383          		}
    384          		else
    385          		{
    386          			Auto_Grease_Red_flag = 0;
    387          		}
    388          	}
    389          
    390          
    391          }
    392          
    393          //------------------------------------------------------------------------------
    394          // Function Name 	: Illumination_LampSystem
    395          // Description 	: Illumination_LampSystem Lamp  동작에 조건 판단.
    396          // Input 			: None
    397          // Return 		: None
    398          // Period 		: 10ms
    399          //------------------------------------------------------------------------------
    400          unsigned char Illumination_Lamp_System(void)
    401          {
    402          	unsigned char Illumination_falg;
    403          
    404          	if(rx_Realy_Control.Illumination_Status < 0x03)
    405          	{
    406          		if(rx_Realy_Control.Illumination_Status == 1)
    407          			Illumination_falg =1;
    408          		else
    409          			Illumination_falg =0;
    410          	}
    411          	else 
    412          		Illumination_falg = 0;
    413          
    414          	return Illumination_falg;
    415          }
    416          
    417          //------------------------------------------------------------------------------
    418          // Function Name	: Lamp_Update_System
    419          // Description 		: Lamp 제어
    420          // Input 			: Symbol_state
    421          // Return 			: None
    422          // Period 			: 초기화시 , 100ms
    423          //------------------------------------------------------------------------------
    424           void Lamp_Update_System(void)
    425          {
    426          	unsigned long temp;
    427          	unsigned short i;
    428          
    429          	// SIG
    430          	temp = 0x400000;
    431          
    432          	if(Illumination_Sig)	LAMP_Update_Data |= 0x700000;
    433          	
    434          	for ( i = 0 ; i < 23 ; i++)
    435          	{  
    436          		if ( LAMP_Update_Data & temp )
    437          			C_LAMP_SDATA_HIGH();
    438          		else	
    439          			C_LAMP_SDATA_LOW();
    440          
    441          		C_LAMP_SCLK_HIGH();		
    442          		TimeDelay_msec(1);
    443          		C_LAMP_SCLK_LOW();
    444          
    445          		temp = temp >> 1;
    446          	}
    447          
    448          	C_LAMP_SLCLK_HIGH();	
    449          	TimeDelay_msec(1);
    450          	C_LAMP_SLCLK_LOW();		
    451          	TimeDelay_msec(1);
    452          	C_LAMP_SLCLK_HIGH();
    453          }
    454          
    455          
    456          //	10msec 마다 실행해야된다.
    457          void Lamp_Update_State(void)
    458          {
    459          	unsigned int i;
    460          	
    461          	for (i= 9;  i !=0; i--)
    462          	{
    463          		Led_SIG_TEMP[i] 		= Led_SIG_TEMP[i -1];
    464          		Led_BL_TEMP[i] 		= Led_BL_TEMP[i -1];
    465          	}
    466          
    467          	Led_SIG_TEMP[0]  = 0;
    468          
    469          	Led_SIG_TEMP[0] += (Main_Light_left_LampSystem())?(Main_Light_1_G):(0x00);
    470          	Led_SIG_TEMP[0] += (Main_Light_Right_LampSystem())?(Main_Light_2_B):(0x00);
    471          
    472          	Led_SIG_TEMP[0] += (Work_Light_left_LampSystem())?(Work_Light_G1):(0x00);
    473          	Led_SIG_TEMP[0] += (Work_Light_right_LampSystem())?(Work_Light_G2):(0x00);
    474          	
    475          	Auto_Grease_LampSystem();
    476          	Led_SIG_TEMP[0] += (Auto_Grease_Green_flag)?(Auto_Grease_1_G):(0x00);
    477          	Led_SIG_TEMP[0] += (Auto_Grease_Red_flag)?(Auto_Grease_2_R):(0x00);
    478          	
    479          	Quick_Coupler_LampSystem();
    480          	Led_SIG_TEMP[0] += (Attachment_Lock_flag)?(Quick_coupler_1_G):(0x00);
    481          	Led_SIG_TEMP[0] += (Attachment_Unlock_flag)?(Quick_coupler_2_R):(0x00);
    482          
    483          	
    484          	Ride_Control_LampSystem();
    485          	Led_SIG_TEMP[0] += (Ride_Control_flag)?(Ride_Control_1_G):(0x00);
    486          	Led_SIG_TEMP[0] += (AutoRide_Control_flag)?(Ride_Control_2_B):(0x00);
    487          
    488          	
    489          	Led_SIG_TEMP[0] += (Beacon_LampSystem())?(Beacon_lamp_G):(0x00);
    490          
    491          	Led_SIG_TEMP[0] += (Rear_Wiper_LampSystem())?(Rear_Wiper_G):(0x00);
    492          	
    493          	Led_SIG_TEMP[0] += (Mirror_heat_LampSystem())?(Mirror_Heat_1_G):(0x00);
    494          	Led_SIG_TEMP[0] += (Fine_Modulation_LampSystem())?(Fine_Modulation_G):(0x00);
    495          
    496          
    497          	Led_SIG_TEMP[0] += (Boom_Detent_LampSystem())?(Auto_Position_1_G):(0x00);
    498          	Led_SIG_TEMP[0] += (Bucket_Detent_LampSystem())?(Auto_Position_2_G):(0x00);
    499          
    500          	Led_BL_TEMP[0] = Illumination_Lamp_System();
    501          
    502          	if((Led_SIG_TEMP[9] == Led_SIG_TEMP[8]) && (Led_SIG_TEMP[8] == Led_SIG_TEMP[1]) && (Led_SIG_TEMP[1] == Led_SIG_TEMP[0])) 
    503          	{
    504          		LAMP_Update_Data = Led_SIG_TEMP[0];
    505          	}
    506          	if((Led_BL_TEMP[9] == Led_BL_TEMP[8]) && (Led_BL_TEMP[8] == Led_BL_TEMP[1]) && (Led_BL_TEMP[1] == Led_BL_TEMP[0]))  
    507          	{		
    508          		Illumination_Sig = Led_BL_TEMP[0];
    509          	}
    510          }
    511          
    512          /**
    513            * @brief  LAMP Initialize 
    514            * @param  
    515            * @retval None
    516            */
    517          void LAMP_Control_Init(void)
    518          {
    519          	DebugMsg_printf("++ LAMP Initialize START\r\n");
    520          
    521          	//  LAMP GPIO는 System_Init.c 에서 설정
    522          #if 0
    523          	GPIO_InitStructure.GPIO_Pin   = LAMP_CLR | LAMP_SLCLK | LAMP_SCLK | LAMP_SDATA;
    524          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    525          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    526          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    527          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    528          	GPIO_Init(LAMP_PORT, &GPIO_InitStructure);
    529          #endif
    530          
    531          	GPIO_WriteBit(LAMP_PORT, LAMP_CLR, Bit_SET);
    532          	TimeDelay_msec(10);
    533          	GPIO_WriteBit(LAMP_PORT, LAMP_CLR, Bit_RESET);
    534          
    535          	LAMP_Update_Data = LAMP_ALL_ON;
    536          
    537          	Lamp_Update_System();
    538          
    539          	DebugMsg_printf("-- LAMP Initialize END\r\n");
    540          }
    541          
    542          /*********(C) COPYRIGHT 2010 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Auto_Grease_LampSystem
       0   Beacon_LampSystem
       0   Boom_Detent_LampSystem
       0   Bucket_Detent_LampSystem
       0   Fine_Modulation_LampSystem
       0   Illumination_Lamp_System
       8   LAMP_Control_Init
         8   -> GPIO_WriteBit
         0   -> Lamp_Update_System
         8   -> TimeDelay_msec
      16   Lamp_Update_State
        16   -> Auto_Grease_LampSystem
        16   -> Boom_Detent_LampSystem
        16   -> Bucket_Detent_LampSystem
        16   -> Main_Light_Right_LampSystem
        16   -> Main_Light_left_LampSystem
        16   -> Mirror_heat_LampSystem
        16   -> Quick_Coupler_LampSystem
        16   -> Ride_Control_LampSystem
        16   -> Work_Light_left_LampSystem
        16   -> Work_Light_right_LampSystem
      24   Lamp_Update_System
         0   -> GPIO_WriteBit
        24   -> GPIO_WriteBit
        24   -> TimeDelay_msec
       0   Main_Light_Right_LampSystem
       0   Main_Light_left_LampSystem
       0   Mirror_heat_LampSystem
       0   Quick_Coupler_LampSystem
       0   Rear_Wiper_LampSystem
       0   Ride_Control_LampSystem
       0   Work_Light_left_LampSystem
       0   Work_Light_right_LampSystem


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_2
       4  ??DataTable15_3
      16  ?Subroutine0
      36  Auto_Grease_LampSystem
       4  Beacon_LampSystem
      26  Boom_Detent_LampSystem
      26  Bucket_Detent_LampSystem
       6  Fine_Modulation_LampSystem
       8  Illumination_Lamp_System
      48  LAMP_Control_Init
     376  Lamp_Update_State
     136  Lamp_Update_System
       1  Lamp_Value
       1  Lamp_name
      40  Main_Light_Right_LampSystem
      34  Main_Light_left_LampSystem
      10  Mirror_heat_LampSystem
      40  Quick_Coupler_LampSystem
     112  RX_HCEPGN_65428
          rx_Realy_Control
          Ride_Control_flag
          AutoRide_Control_flag
          Attachment_Unlock_flag
          Attachment_Lock_flag
          Auto_Grease_Green_flag
          Auto_Grease_Red_flag
          Illumination_Sig
          rx_EHCU_Status
          Led_SIG_TEMP
          Led_BL_TEMP
      26  Rear_Wiper_LampSystem
      44  Ride_Control_LampSystem
      26  Work_Light_left_LampSystem
      42  Work_Light_right_LampSystem
       8  rx_Auto_position_Status

 
 122 bytes in section .bss
 960 bytes in section .text
 
 960 bytes of CODE memory
 122 bytes of DATA memory

Errors: none
Warnings: none
