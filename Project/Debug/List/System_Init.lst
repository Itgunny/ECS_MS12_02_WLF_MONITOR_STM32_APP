###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      02/Jul/2014  19:49:21 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa -          #
#                    ECS\SRC\System_Init.c                                    #
#    Command line =  "C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa -         #
#                    ECS\SRC\System_Init.c" -D USE_STDPERIPH_DRIVER -D        #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\ -o    #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\        #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Platfo #
#                    rm\COMMON\INC\ -I "C:\Tools\WL9F\WL_F_Monitor_APP\Projec #
#                    t\..\Platform\TaeHa - ECS\INC\" -I                       #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\ -I                        #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\ -Oh --use_c++_inline -I      #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\System #
#                    _Init.lst                                                #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\System_ #
#                    Init.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa - ECS\SRC\System_Init.c
      1          /**
      2            ******************************************************************************
      3            * @file    System_Init.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   System_Init.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_APP.h"	
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          /* Private function prototypes -----------------------------------------------*/
     29          /* Private functions ---------------------------------------------------------*/
     30          
     31          
     32          /**
     33            * @brief  Clock Setting.
     34            * @param  None
     35            * @retval None
     36            */
     37          void RCC_Configuration(void)
     38          {
     39          	RCC_ClocksTypeDef RCC_Clocks;
     40          
     41            	//	SysTick end of count event each 1ms
     42            	RCC_GetClocksFreq(&RCC_Clocks);
     43          
     44          	//	SysTick Timer을 사용하려면, 아래의 설정을 해야되고, 아래의 설정값은 1msec 설정이다.
     45          	#if 1		
     46          	//	Setup SysTick Timer for 1 msec interrupts
     47          	if (SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000))
     48          	{ 
     49          	    /* Capture error */ 
     50              	while (1);
     51            	}
     52          	#endif
     53          	
     54          	RCC_ClockSecuritySystemCmd(ENABLE);
     55          
     56          /**
     57            * @brief  Enables or disables the AHB1 peripheral clock.
     58            * @note   After reset, the peripheral clock (used for registers read/write access)
     59            *         is disabled and the application software has to enable this clock before 
     60            *         using it.   
     61            * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
     62            *          This parameter can be any combination of the following values:
     63            *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
     64            *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
     65            *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
     66            *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
     67            *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
     68            *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
     69            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
     70            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
     71            *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
     72            *            @arg RCC_AHB1Periph_CRC:         CRC clock
     73            *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
     74            *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
     75            *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
     76            *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
     77            *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
     78            *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
     79            *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
     80            *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
     81            *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
     82            *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
     83            * @param  NewState: new state of the specified peripheral clock.
     84            *          This parameter can be: ENABLE or DISABLE.
     85            * @retval None
     86            */
     87          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
     88          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
     89          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
     90          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
     91          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
     92          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);	
     93          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
     94          
     95          /**
     96            * @brief  Enables or disables the AHB2 peripheral clock.
     97            * @note   After reset, the peripheral clock (used for registers read/write access)
     98            *         is disabled and the application software has to enable this clock before 
     99            *         using it. 
    100            * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
    101            *          This parameter can be any combination of the following values:
    102            *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
    103            *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
    104            *            @arg RCC_AHB2Periph_HASH:   HASH clock
    105            *            @arg RCC_AHB2Periph_RNG:    RNG clock
    106            *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
    107            * @param  NewState: new state of the specified peripheral clock.
    108            *          This parameter can be: ENABLE or DISABLE.
    109            * @retval None
    110            */
    111          	//RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
    112          
    113          /**
    114            * @brief  Enables or disables the AHB3 peripheral clock.
    115            * @note   After reset, the peripheral clock (used for registers read/write access)
    116            *         is disabled and the application software has to enable this clock before 
    117            *         using it. 
    118            * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
    119            *          This parameter must be: RCC_AHB3Periph_FSMC
    120            * @param  NewState: new state of the specified peripheral clock.
    121            *          This parameter can be: ENABLE or DISABLE.
    122            * @retval None
    123            */
    124          	RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
    125          
    126          /**
    127            * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
    128            * @note   After reset, the peripheral clock (used for registers read/write access)
    129            *         is disabled and the application software has to enable this clock before 
    130            *         using it. 
    131            * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
    132            *          This parameter can be any combination of the following values:
    133            *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
    134            *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
    135            *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
    136            *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
    137            *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
    138            *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
    139            *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
    140            *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
    141            *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
    142            *            @arg RCC_APB1Periph_WWDG:   WWDG clock
    143            *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
    144            *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
    145            *            @arg RCC_APB1Periph_USART2: USART2 clock
    146            *            @arg RCC_APB1Periph_USART3: USART3 clock
    147            *            @arg RCC_APB1Periph_UART4:  UART4 clock
    148            *            @arg RCC_APB1Periph_UART5:  UART5 clock
    149            *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
    150            *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
    151            *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
    152            *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
    153            *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
    154            *            @arg RCC_APB1Periph_PWR:    PWR clock
    155            *            @arg RCC_APB1Periph_DAC:    DAC clock
    156            * @param  NewState: new state of the specified peripheral clock.
    157            *          This parameter can be: ENABLE or DISABLE.
    158            * @retval None
    159            */
    160          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4  , ENABLE);
    161          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5  , ENABLE);
    162          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2  , ENABLE);
    163          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    164          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4 , ENABLE);
    165          	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
    166          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1  , ENABLE);
    167          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2  , ENABLE);
    168          
    169          /**
    170            * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
    171            * @note   After reset, the peripheral clock (used for registers read/write access)
    172            *         is disabled and the application software has to enable this clock before 
    173            *         using it.
    174            * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
    175            *          This parameter can be any combination of the following values:
    176            *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
    177            *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
    178            *            @arg RCC_APB2Periph_USART1: USART1 clock
    179            *            @arg RCC_APB2Periph_USART6: USART6 clock
    180            *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
    181            *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
    182            *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
    183            *            @arg RCC_APB2Periph_SDIO:   SDIO clock
    184            *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
    185            *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
    186            *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
    187            *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
    188            *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
    189            * @param  NewState: new state of the specified peripheral clock.
    190            *          This parameter can be: ENABLE or DISABLE.
    191            * @retval None
    192            */
    193          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8  , ENABLE);
    194          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    195          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    196          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
    197          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
    198          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1  , ENABLE);
    199          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    200          }
    201          
    202          /* Private functions ---------------------------------------------------------*/
    203          /**
    204            * @brief  NVIC Setting.
    205            * @param  Configures Vector Table base location.
    206            * @retval None
    207            */
    208          void NVIC_Configuration(void)
    209          {
    210          	//	Set the Vector Table base location at 0x08004000
    211              NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x4000);   
    212          }
    213          
    214          /* Private functions ---------------------------------------------------------*/
    215          /**
    216            * @brief  GPIO Setting.
    217            * @param  Configures the different GPIO ports.
    218            * @retval None
    219            */
    220          void GPIO_Configuration(void)
    221          {
    222          	GPIO_InitTypeDef GPIO_InitStructure;
    223          
    224          
    225          	//  Configure UART1 pins: DEBUG_UART1TX, DEBUG_UART1RX 
    226          	//  UART1은 Debugging으로 사용한다. 이미 설정되어 있음.
    227          #if 0
    228          
    229          	GPIO_InitStructure.GPIO_Pin   = DEBUG_UART1TX | DEBUG_UART1RX;
    230          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    231          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    232          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    233          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    234          	GPIO_Init(DEBUG_UART1_PORT, &GPIO_InitStructure);
    235          
    236          	GPIO_PinAFConfig(DEBUG_UART1_PORT, DEBUG_UART1TX_PinSource, GPIO_AF_USART1);
    237          	GPIO_PinAFConfig(DEBUG_UART1_PORT, DEBUG_UART1RX_PinSource, GPIO_AF_USART1);
    238          
    239          #endif    
    240             
    241          	//  CAN1_TX, CAN1_RX
    242          	GPIO_InitStructure.GPIO_Pin   = CAN1_TX | CAN1_RX;
    243          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    244          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    245          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    246          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    247          	GPIO_Init(CAN1_PORT, &GPIO_InitStructure);
    248          	GPIO_PinAFConfig(CAN1_PORT, CAN1_TX_PinSource, GPIO_AF_CAN1);
    249          	GPIO_PinAFConfig(CAN1_PORT, CAN1_RX_PinSource, GPIO_AF_CAN1);
    250          
    251          	//  CAN2_TX, CAN2_RX
    252          	GPIO_InitStructure.GPIO_Pin   = CAN2_TX | CAN2_RX;
    253          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    254          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    255          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    256          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    257          	GPIO_Init(CAN2_PORT, &GPIO_InitStructure);
    258          	GPIO_PinAFConfig(CAN2_PORT, CAN2_TX_PinSource, GPIO_AF_CAN2);
    259          	GPIO_PinAFConfig(CAN2_PORT, CAN2_RX_PinSource, GPIO_AF_CAN2);
    260          
    261          	//	STM32 UART2 <-> EXYNOS UART1
    262          	GPIO_InitStructure.GPIO_Pin   = UART2TX_EXYNOS1 | UART2RX_EXYNOS1;
    263          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    264          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    265          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    266          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    267          	GPIO_Init(UART2_EXYNOS1_PORT, &GPIO_InitStructure);
    268          	GPIO_PinAFConfig(UART2_EXYNOS1_PORT, UART2TX_EXYNOS1_PinSource, GPIO_AF_USART2);
    269          	GPIO_PinAFConfig(UART2_EXYNOS1_PORT, UART2RX_EXYNOS1_PinSource, GPIO_AF_USART2);
    270          
    271          	//	TW8832 -> I2C2
    272          	//  GPIO로 I2C2 사용
    273          	//  Alternate Function 사용안함
    274          #if 0
    275          	GPIO_InitStructure.GPIO_Pin   = TW8832_I2C2_SCL | TW8832_I2C2_SDA;
    276          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    277          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    278          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    279          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    280          	GPIO_Init(TW8832_I2C2_PORT, &GPIO_InitStructure);
    281          	GPIO_PinAFConfig(TW8832_I2C2_PORT, TW8832_I2C2_SCL_PinSource, GPIO_AF_I2C2);
    282          	GPIO_PinAFConfig(TW8832_I2C2_PORT, TW8832_I2C2_SDA_PinSource, GPIO_AF_I2C2);
    283          #else
    284          	GPIO_InitStructure.GPIO_Pin   = TW8832_I2C2_SCL | TW8832_I2C2_SDA;
    285          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    286          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    287          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    288          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    289          	GPIO_Init(TW8832_I2C2_PORT, &GPIO_InitStructure);
    290          #endif
    291          
    292          	//	STM32 UART4 <-> EXYNOS UART3
    293          	GPIO_InitStructure.GPIO_Pin   = UART4TX_EXYNOS3 | UART4RX_EXYNOS3;
    294          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    295          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    296          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    297          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    298          	GPIO_Init(UART4_EXYNOS3_PORT, &GPIO_InitStructure);
    299          	GPIO_PinAFConfig(UART4_EXYNOS3_PORT, UART4TX_EXYNOS3_PinSource, GPIO_AF_UART4);
    300          	GPIO_PinAFConfig(UART4_EXYNOS3_PORT, UART4RX_EXYNOS3_PinSource, GPIO_AF_UART4);
    301          
    302          	//  EXYNOS PWR_CTRL -> GPIO Output
    303          	GPIO_InitStructure.GPIO_Pin   = EXYNOS_PWR_CTRL;
    304          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    305          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    306          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    307          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    308          	GPIO_Init(EXYNOS_PWR_CTRL_PORT, &GPIO_InitStructure);
    309          
    310          	//  EXYNOS PMIC_CTRL -> GPIO Output
    311          	GPIO_InitStructure.GPIO_Pin   = EXYNOS_PMIC_CTRL;
    312          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    313          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    314          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    315          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    316          	GPIO_Init(EXYNOS_PMIC_CTRL_PORT, &GPIO_InitStructure);
    317          
    318          	//	Serial Flash -> STM32 Update (SPI1)
    319          	GPIO_InitStructure.GPIO_Pin   = SFLASH_SPI1_CS | SFLASH_SPI1_SCK | SFLASH_SPI1_MOSI;
    320          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    321          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    322          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    323          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    324          	GPIO_Init(SFLASH_SPI1_PORT, &GPIO_InitStructure);
    325          
    326          	GPIO_InitStructure.GPIO_Pin   = SFLASH_SPI1_MISO;
    327          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    328          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    329          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    330          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    331          	GPIO_Init(SFLASH_SPI1_PORT, &GPIO_InitStructure);
    332          
    333          	GPIO_InitStructure.GPIO_Pin   = SFLASH_HOLD | SFLASH_WP;
    334          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    335          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    336          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    337          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    338          	GPIO_Init(SFLASH_PORT, &GPIO_InitStructure);
    339          
    340          	//	LAMP GPIO (Serial Data -> Parallel Data
    341          	GPIO_InitStructure.GPIO_Pin   = LAMP_CLR | LAMP_SLCLK | LAMP_SCLK | LAMP_SDATA;
    342          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    343          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    344          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    345          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    346          	GPIO_Init(LAMP_PORT, &GPIO_InitStructure);
    347          
    348          	//	Hardware Version -> ADC
    349          	GPIO_InitStructure.GPIO_Pin   = HW_VERSION;
    350          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;   
    351          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    352          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    353          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    354          	GPIO_Init(HW_VERSION_PORT, &GPIO_InitStructure);
    355          
    356          	//	KeySwitch Matrix -> GPIO Output
    357          	GPIO_InitStructure.GPIO_Pin   = KeySCAN0 | KeySCAN1 | KeySCAN2;
    358          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    359          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    360          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    361          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    362          	GPIO_Init(KeySWXX_PORT, &GPIO_InitStructure);
    363          
    364          	//	KeySwitch Matrix -> GPIO Input
    365          	GPIO_InitStructure.GPIO_Pin   = KeyInput0 | KeyInput1 | KeyInput2 | KeyInput3 | KeyInput4 | KeyInput5;
    366          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    367          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    368          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    369          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    370          	GPIO_Init(KeySWXX_PORT, &GPIO_InitStructure);
    371          
    372          	//  POWER_IGMON -> GPIO Input
    373          	GPIO_InitStructure.GPIO_Pin   = PWR_IGMON;
    374          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    375          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    376          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    377          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    378          	GPIO_Init(PWR_IGMON_PORT, &GPIO_InitStructure);
    379          
    380          	//  POWER_CTRL -> GPIO Output
    381          	GPIO_InitStructure.GPIO_Pin   = PWR_CTRL;
    382          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    383          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    384          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    385          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    386          	GPIO_Init(PWR_CTRL_PORT, &GPIO_InitStructure);
    387          
    388          	//  LCDPWR_CTRL -> GPIO Output
    389          	GPIO_InitStructure.GPIO_Pin   = LCDPWR_CTRL;
    390          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    391          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    392          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    393          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    394          	GPIO_Init(LCDPWR_PORT, &GPIO_InitStructure);
    395          
    396          	//  FW_UPDATE -> GPIO Input
    397          	GPIO_InitStructure.GPIO_Pin   = FW_UPDATE;
    398          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    399          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    400          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    401          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    402          	GPIO_Init(FW_UPDATE_PORT, &GPIO_InitStructure);
    403          
    404          	//	LCDBL_PWM -> PWM
    405          	GPIO_InitStructure.GPIO_Pin   = LCDBL_PWM;
    406          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    407          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    408          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    409          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    410          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    411          	GPIO_PinAFConfig(LCDBL_PORT, LCDBL_PWM_PinSource, GPIO_AF_TIM8);
    412          
    413          	//  LCDBL_CTRL -> GPIO Output
    414          	GPIO_InitStructure.GPIO_Pin   = LCDBL_CTRL;
    415          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    416          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    417          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    418          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    419          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    420          	
    421          	//  LCD_STM32 -> GPIO Output
    422          	GPIO_InitStructure.GPIO_Pin   = LCD_STM32;
    423          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    424          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    425          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    426          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    427          	GPIO_Init(LCD_STM32_PORT, &GPIO_InitStructure);
    428          
    429          	//  LCD_EXYNOS -> GPIO Output
    430          	GPIO_InitStructure.GPIO_Pin   = LCD_EXYNOS;
    431          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    432          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    433          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    434          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    435          	GPIO_Init(LCD_EXYNOS_PORT, &GPIO_InitStructure);
    436          
    437          	//  BUZZER_CTRL -> GPIO Output
    438          	GPIO_InitStructure.GPIO_Pin   = BUZZER_CTRL;
    439          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    440          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    441          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    442          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    443          	GPIO_Init(BUZZER_PORT, &GPIO_InitStructure);
    444          
    445          	//  LED_CTRL -> GPIO Output
    446          	GPIO_InitStructure.GPIO_Pin   = LED_CTRL;
    447          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    448          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    449          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    450          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    451          	GPIO_Init(LED_PORT, &GPIO_InitStructure);
    452          
    453          	//  FM31X4(EEPROM) -> GPIO Output
    454          	//  GPIO로 I2C1 사용
    455          	//  Alternate Function 사용안함
    456          	GPIO_InitStructure.GPIO_Pin   = FM31X4_I2C1_SCL | FM31X4_I2C1_SDA;
    457          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    458          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    459          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    460          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    461          	GPIO_Init(FM31X4_I2C1_PORT, &GPIO_InitStructure);
    462          
    463          	//  TW2835 -> GPIO Output
    464          	GPIO_InitStructure.GPIO_Pin   = TW2835_IRQ| TW2835_HALE | TW2835_HSPB;
    465          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    466          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    467          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    468          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    469          	GPIO_Init(TW2835_CTRLPORT, &GPIO_InitStructure);
    470          
    471          	GPIO_InitStructure.GPIO_Pin   = TW2835_D0 | TW2835_D1 | TW2835_D2 | TW2835_D3 | TW2835_D4 | TW2835_D5 | TW2835_D6 | TW2835_D7;
    472          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    473          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    474          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    475          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    476          	GPIO_Init(TW2835_DATAPORT, &GPIO_InitStructure);	
    477          
    478          	GPIO_InitStructure.GPIO_Pin   = TW2835_CSB0 | TW2835_CSB1 | TW2835_nWE | TW2835_nOE;
    479          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    480          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    481          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    482          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    483          	GPIO_Init(TW2835_DATAPORT, &GPIO_InitStructure);
    484          
    485          	//  DPRAM INT -> GPIO Output
    486          	GPIO_InitStructure.GPIO_Pin   = DPRAM_INT;
    487          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    488          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    489          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    490          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    491          	GPIO_Init(DPRAM_PORT, &GPIO_InitStructure);
    492          
    493          	//  CAMERA nRESET -> GPIO Output
    494          	GPIO_InitStructure.GPIO_Pin   = CAMERA_nRESET;
    495          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    496          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    497          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    498          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    499          	GPIO_Init(CAMERA_nRESET_PORT, &GPIO_InitStructure);
    500          
    501          
    502          	// 	FSMC Data Line
    503          	//  D15 ~ D0 : D15  D14  D13 D12  D11  D10  D9   D8   D7   D6  D5  D4  D3  D2  D1   D0   
    504          	//             PD10 PD9  PD8 PE15 PE14 PE13 PE12 PE11 PE10 PE9 PE8 PE7 PD1 PD0 PD15 PD14
    505          
    506          	GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_10| GPIO_Pin_9  | GPIO_Pin_8 | GPIO_Pin_1 |
    507          	GPIO_Pin_0 | GPIO_Pin_15 | GPIO_Pin_14;
    508          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    509          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    510          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    511          	GPIO_Init(GPIOD, &GPIO_InitStructure);
    512          
    513          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
    514          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9 , GPIO_AF_FSMC);
    515          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8 , GPIO_AF_FSMC);
    516          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1 , GPIO_AF_FSMC);
    517          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0 , GPIO_AF_FSMC);
    518          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
    519          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);	
    520            
    521          	GPIO_InitStructure.GPIO_Pin   = 	GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13 | GPIO_Pin_12 |
    522          								GPIO_Pin_11 | GPIO_Pin_10 | GPIO_Pin_9  |
    523          								GPIO_Pin_8  | GPIO_Pin_7;
    524          	GPIO_Init(GPIOE, &GPIO_InitStructure);
    525          
    526          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC);
    527          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC);
    528          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC);
    529          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC);
    530          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_FSMC);
    531          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_FSMC);
    532          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);	
    533          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);	
    534          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);	
    535          
    536          	//  nCLK, nOE, nWE, nWait
    537          	GPIO_InitStructure.GPIO_Pin = FSMC_nOE | FSMC_nWE | FSMC_nWAIT | FSMC_nCLK;
    538          	GPIO_Init(FSMC_PORT, &GPIO_InitStructure);
    539          
    540          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nOE_PinSource  , GPIO_AF_FSMC);
    541          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nWE_PinSource  , GPIO_AF_FSMC);
    542          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nWAIT_PinSource, GPIO_AF_FSMC);
    543          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nCLK_PinSource , GPIO_AF_FSMC);
    544          
    545          	//  nBL0, nBL1
    546          	GPIO_InitStructure.GPIO_Pin = FSMC_nBL0 | FSMC_nBL1;
    547          	GPIO_Init(FSMC_nBL_PORT, &GPIO_InitStructure);
    548          
    549          	GPIO_PinAFConfig(FSMC_nBL_PORT, FSMC_nBL0_PinSource  , GPIO_AF_FSMC);
    550          	GPIO_PinAFConfig(FSMC_nBL_PORT, FSMC_nBL1_PinSource  , GPIO_AF_FSMC);
    551          
    552          	//	nADV
    553          	GPIO_InitStructure.GPIO_Pin = FSMC_nADV;
    554          	GPIO_PinAFConfig(FSMC_ADVPORT, FSMC_nADV_PinSource  , GPIO_AF_FSMC);
    555          	GPIO_Init(FSMC_ADVPORT, &GPIO_InitStructure);
    556          
    557          	// NE1 configuration
    558          	GPIO_InitStructure.GPIO_Pin = FSMC_nNE1;
    559          	GPIO_Init(FSMC_nNE1_PORT, &GPIO_InitStructure);
    560          
    561          	GPIO_PinAFConfig(FSMC_nNE1_PORT, FSMC_nNE1_PinSource  , GPIO_AF_FSMC);
    562          
    563          	//  사용하지 않는 GPIO Pin은 Output -> Low 상태로 만들어 놓는다.
    564          	GPIO_Configuration_NotUsed();
    565          }
    566          
    567          /**
    568            * @brief  GPIO Setting.
    569            * @param  Configures the different GPIO ports. (사용하지 않는 GPIO는 Output Low 상태로 만든다.)
    570            * @retval None
    571            */
    572          void GPIO_Configuration_NotUsed(void)
    573          {
    574              GPIO_InitTypeDef GPIO_InitStructure;
    575          
    576          	//  PC0, PC1, PC2, PC8, PC14
    577              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_8 | GPIO_Pin_14;
    578              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    579            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    580            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    581              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    582              GPIO_Init(GPIOC, &GPIO_InitStructure);
    583          
    584          	//  PF3, PF4, PF5, PF6, PF7, PF8, PF9
    585              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
    586              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    587            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    588            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    589              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    590              GPIO_Init(GPIOF, &GPIO_InitStructure);
    591          
    592          	//  PG8, PG9
    593              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_8 | GPIO_Pin_9;
    594              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    595            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    596            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    597              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    598              GPIO_Init(GPIOG, &GPIO_InitStructure);
    599          	
    600          	//  PE2, PE3, PE4, PE5
    601              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
    602              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    603            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    604            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    605              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    606              GPIO_Init(GPIOE, &GPIO_InitStructure);
    607          
    608              GPIO_ResetBits(GPIOC, GPIO_Pin_0);
    609              GPIO_ResetBits(GPIOC, GPIO_Pin_1);
    610              GPIO_ResetBits(GPIOC, GPIO_Pin_2);
    611              GPIO_ResetBits(GPIOC, GPIO_Pin_8);
    612              GPIO_ResetBits(GPIOC, GPIO_Pin_14);
    613          	
    614              GPIO_ResetBits(GPIOF, GPIO_Pin_3);
    615              GPIO_ResetBits(GPIOF, GPIO_Pin_4);
    616              GPIO_ResetBits(GPIOF, GPIO_Pin_5);
    617              GPIO_ResetBits(GPIOF, GPIO_Pin_6);
    618              GPIO_ResetBits(GPIOF, GPIO_Pin_7);
    619              GPIO_ResetBits(GPIOF, GPIO_Pin_8);
    620              GPIO_ResetBits(GPIOF, GPIO_Pin_9);
    621          
    622              GPIO_ResetBits(GPIOG, GPIO_Pin_8);
    623              GPIO_ResetBits(GPIOG, GPIO_Pin_9);	
    624          	
    625              GPIO_ResetBits(GPIOE, GPIO_Pin_2);	
    626              GPIO_ResetBits(GPIOE, GPIO_Pin_3);	
    627              GPIO_ResetBits(GPIOE, GPIO_Pin_4);	
    628              GPIO_ResetBits(GPIOE, GPIO_Pin_5);	
    629          }
    630          
    631          /**
    632            * @brief  Hardware, Software System Configuration.
    633            * @param  None
    634            * @retval None
    635            */
    636          void System_Configuration(void)
    637          {
    638          	RCC_Configuration();		    // 	Configure the system clocks
    639          	NVIC_Configuration();		    //	NVIC Configuration
    640          	GPIO_Configuration();		    // 	Configure the GPIO ports
    641          
    642          }
    643          
    644          void System_Initialize(void)
    645          {
    646          	//  PWR_CTRL -> BootLoader에서는 Sub Power Enable을 Off 
    647          	GPIO_ResetBits(PWR_CTRL_PORT, PWR_CTRL);   	//	24V Power Enable 
    648          	                                //  Set   : Power Enable On
    649          	                                //  Reset : Power Enable Off    	
    650          
    651          	//  LCDPWR_CTRL -> BootLoader에서는 VLCD12 Power Enable을 Off 
    652          	GPIO_ResetBits(LCDPWR_PORT, LCDPWR_CTRL);  	//	LCD Power Enable 
    653          	                                //  Set   : LCD Power Enable 
    654          	                                //  Reset : LCD Power Disable	
    655          
    656          	//  BootLoader Bootting시에, LCDBL는 Off 상태로 만든다.
    657          	GPIO_ResetBits(LCDBL_PORT, LCDBL_CTRL);	    //	LCD BackLight Power On/Off (LCDBL_CTRL)
    658          	                               	//  Set   : BackLight Power On
    659          	                               	//  Reset : BackLight Power Off			
    660          	                               	
    661          	GPIO_ResetBits(BUZZER_PORT, BUZZER_CTRL);	//	BUZZER Off
    662          	                                //  Set   : BUZZER On
    663          	                                //  Reset : BUZZER Off
    664          
    665          	GPIO_ResetBits(LED_PORT, LED_CTRL);			//	LED Enable Off
    666          	                                //  Set   : LED Enable  -> On
    667          	                                //  Reset : LED Disable -> Off
    668          
    669          	GPIO_ResetBits(EXYNOS_PWR_CTRL_PORT, EXYNOS_PWR_CTRL);	//	Exynos-4412 Power On/Off
    670          	                                			//  Set   : Exynos-4412 -> Power On
    671          	                                			//  Reset : Exynos-4412 -> Power Off
    672          	                                			
    673          	GPIO_ResetBits(EXYNOS_PMIC_CTRL_PORT, EXYNOS_PMIC_CTRL);	//	Exynos-4412 PMIC On/Off
    674          	                                				//  PMIC On  : Low -> High
    675          	                                				//       Off : Low -> High
    676          
    677          	GPIO_SetBits(LCD_EXYNOS_PORT, LCD_EXYNOS);	//	Exynos-4412 LCD Display
    678          	                                //  Set   : HI-Z
    679          	                                //  Reset : Display
    680          	                                    				
    681          	GPIO_ResetBits(LCD_STM32_PORT, LCD_STM32);	//	STM32 LCD Display
    682          	                                //  Set   : HI-Z
    683          	                                //  Reset : Display
    684          
    685          	GPIO_ResetBits(CAMERA_nRESET_PORT, CAMERA_nRESET);	//	CAMERA nRESET
    686          	                                        //  Set   : On
    687          	                                        //  Reset : Off												
    688          }
    689          
    690          void System_Variable_Init(void)
    691          {
    692          	memset((void *)(&WL9FM_TIME),       	0x0, sizeof(WL9FM_TIME_DATA));
    693          	memset((void *)(&WL9FM_RTC),            0x0, sizeof(WL9FM_DATA_RTC));	
    694          	memset((void *)(&WL9FM_BUZZER),         0x0, sizeof(WL9FM_BUZZER_DATA));	
    695          	memset((void *)(&WL9FM_LCDBL),          0x0, sizeof(WL9FM_LCDBL_DATA));	
    696          
    697          	WL9F_CAN_Buffer_Init();
    698          	WL9F_CAN_Variables_Init();
    699          	Init_Smart_Key_valuable();
    700          }
    701          
    702          /*********(C) COPYRIGHT 2013 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/
    703          
    704          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   GPIO_Configuration
        32   -> GPIO_Configuration_NotUsed
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
      32   GPIO_Configuration_NotUsed
        32   -> GPIO_Init
        32   -> GPIO_ResetBits
       0   NVIC_Configuration
         0   -> NVIC_SetVectorTable
      24   RCC_Configuration
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_AHB3PeriphClockCmd
        24   -> RCC_APB1PeriphClockCmd
        24   -> RCC_APB2PeriphClockCmd
        24   -> RCC_ClockSecuritySystemCmd
        24   -> RCC_GetClocksFreq
       8   System_Configuration
         0   -> GPIO_Configuration
         8   -> NVIC_SetVectorTable
         8   -> RCC_Configuration
      16   System_Initialize
         0   -> GPIO_ResetBits
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
       8   System_Variable_Init
         0   -> Init_Smart_Key_valuable
         8   -> WL9F_CAN_Buffer_Init
         8   -> WL9F_CAN_Variables_Init
         8   -> __aeabi_memclr
         8   -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
    1548  GPIO_Configuration
     322  GPIO_Configuration_NotUsed
      12  NVIC_Configuration
     232  RCC_Configuration
      24  System_Configuration
     102  System_Initialize
      50  System_Variable_Init

 
 2 342 bytes in section .text
 
 2 342 bytes of CODE memory

Errors: none
Warnings: none
