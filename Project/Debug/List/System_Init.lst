###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      28/Nov/2014  14:51:14 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa -          #
#                    ECS\SRC\System_Init.c                                    #
#    Command line =  "C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa -         #
#                    ECS\SRC\System_Init.c" -D USE_STDPERIPH_DRIVER -D        #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\ -o    #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\        #
#                    --debug --endian=little --cpu=Cortex-M4 -e               #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Platfo #
#                    rm\COMMON\INC\ -I "C:\Tools\WL9F\WL_F_Monitor_APP\Projec #
#                    t\..\Platform\TaeHa - ECS\INC\" -I                       #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\ -I                        #
#                    C:\Tools\WL9F\WL_F_Monitor_APP\Project\..\Libraries\STM3 #
#                    2F4xx_StdPeriph_Driver\inc\ -Oh --use_c++_inline -I      #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\List\System #
#                    _Init.lst                                                #
#    Object file  =  C:\Tools\WL9F\WL_F_Monitor_APP\Project\Debug\Obj\System_ #
#                    Init.o                                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\WL9F\WL_F_Monitor_APP\Platform\TaeHa - ECS\SRC\System_Init.c
      1          /**
      2            ******************************************************************************
      3            * @file    System_Init.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   System_Init.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_APP.h"	
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          extern u8 CANUpdateFlag;
     29          extern u8 LCDOffCount;
     30          extern u16 OSUpdateCount;
     31          /* Private function prototypes -----------------------------------------------*/
     32          /* Private functions ---------------------------------------------------------*/
     33          
     34          
     35          /**
     36            * @brief  Clock Setting.
     37            * @param  None
     38            * @retval None
     39            */
     40          void RCC_Configuration(void)
     41          {
     42          	RCC_ClocksTypeDef RCC_Clocks;
     43          
     44            	//	SysTick end of count event each 1ms
     45            	RCC_GetClocksFreq(&RCC_Clocks);
     46          
     47          	//	SysTick Timer을 사용하려면, 아래의 설정을 해야되고, 아래의 설정값은 1msec 설정이다.
     48          	#if 1		
     49          	//	Setup SysTick Timer for 1 msec interrupts
     50          	if (SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000))
     51          	{ 
     52          	    /* Capture error */ 
     53              	while (1);
     54            	}
     55          	#endif
     56          	
     57          	RCC_ClockSecuritySystemCmd(ENABLE);
     58          
     59          /**
     60            * @brief  Enables or disables the AHB1 peripheral clock.
     61            * @note   After reset, the peripheral clock (used for registers read/write access)
     62            *         is disabled and the application software has to enable this clock before 
     63            *         using it.   
     64            * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
     65            *          This parameter can be any combination of the following values:
     66            *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
     67            *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
     68            *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
     69            *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
     70            *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
     71            *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
     72            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
     73            *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
     74            *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
     75            *            @arg RCC_AHB1Periph_CRC:         CRC clock
     76            *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
     77            *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
     78            *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
     79            *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
     80            *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
     81            *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
     82            *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
     83            *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
     84            *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
     85            *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
     86            * @param  NewState: new state of the specified peripheral clock.
     87            *          This parameter can be: ENABLE or DISABLE.
     88            * @retval None
     89            */
     90            	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);
     91          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
     92          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
     93          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
     94          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
     95          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
     96          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);	
     97          	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
     98          
     99          /**
    100            * @brief  Enables or disables the AHB2 peripheral clock.
    101            * @note   After reset, the peripheral clock (used for registers read/write access)
    102            *         is disabled and the application software has to enable this clock before 
    103            *         using it. 
    104            * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
    105            *          This parameter can be any combination of the following values:
    106            *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
    107            *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
    108            *            @arg RCC_AHB2Periph_HASH:   HASH clock
    109            *            @arg RCC_AHB2Periph_RNG:    RNG clock
    110            *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
    111            * @param  NewState: new state of the specified peripheral clock.
    112            *          This parameter can be: ENABLE or DISABLE.
    113            * @retval None
    114            */
    115          	//RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
    116          
    117          /**
    118            * @brief  Enables or disables the AHB3 peripheral clock.
    119            * @note   After reset, the peripheral clock (used for registers read/write access)
    120            *         is disabled and the application software has to enable this clock before 
    121            *         using it. 
    122            * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
    123            *          This parameter must be: RCC_AHB3Periph_FSMC
    124            * @param  NewState: new state of the specified peripheral clock.
    125            *          This parameter can be: ENABLE or DISABLE.
    126            * @retval None
    127            */
    128          //	++, kutelf, 140801
    129          //	RevD.01.01 
    130          //	DPRAM 삭제 - FSMC 사용 안함. 
    131          #if 1
    132          	RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, DISABLE);
    133          #else
    134          	RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
    135          #endif
    136          //	--, kutelf, 140801
    137          /**
    138            * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
    139            * @note   After reset, the peripheral clock (used for registers read/write access)
    140            *         is disabled and the application software has to enable this clock before 
    141            *         using it. 
    142            * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
    143            *          This parameter can be any combination of the following values:
    144            *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
    145            *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
    146            *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
    147            *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
    148            *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
    149            *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
    150            *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
    151            *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
    152            *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
    153            *            @arg RCC_APB1Periph_WWDG:   WWDG clock
    154            *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
    155            *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
    156            *            @arg RCC_APB1Periph_USART2: USART2 clock
    157            *            @arg RCC_APB1Periph_USART3: USART3 clock
    158            *            @arg RCC_APB1Periph_UART4:  UART4 clock
    159            *            @arg RCC_APB1Periph_UART5:  UART5 clock
    160            *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
    161            *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
    162            *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
    163            *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
    164            *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
    165            *            @arg RCC_APB1Periph_PWR:    PWR clock
    166            *            @arg RCC_APB1Periph_DAC:    DAC clock
    167            * @param  NewState: new state of the specified peripheral clock.
    168            *          This parameter can be: ENABLE or DISABLE.
    169            * @retval None
    170            */
    171          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4  , ENABLE);
    172          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5  , ENABLE);
    173          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2  , ENABLE);
    174          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    175          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4 , ENABLE);
    176          	//RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C2, ENABLE);
    177          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1  , ENABLE);
    178          	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN2  , ENABLE);
    179          
    180          /**
    181            * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
    182            * @note   After reset, the peripheral clock (used for registers read/write access)
    183            *         is disabled and the application software has to enable this clock before 
    184            *         using it.
    185            * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
    186            *          This parameter can be any combination of the following values:
    187            *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
    188            *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
    189            *            @arg RCC_APB2Periph_USART1: USART1 clock
    190            *            @arg RCC_APB2Periph_USART6: USART6 clock
    191            *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
    192            *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
    193            *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
    194            *            @arg RCC_APB2Periph_SDIO:   SDIO clock
    195            *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
    196            *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
    197            *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
    198            *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
    199            *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
    200            * @param  NewState: new state of the specified peripheral clock.
    201            *          This parameter can be: ENABLE or DISABLE.
    202            * @retval None
    203            */
    204          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8  , ENABLE);
    205          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
    206          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
    207          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
    208          	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC3, ENABLE);
    209          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1  , ENABLE);
    210          	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
    211          }
    212          
    213          /* Private functions ---------------------------------------------------------*/
    214          /**
    215            * @brief  NVIC Setting.
    216            * @param  Configures Vector Table base location.
    217            * @retval None
    218            */
    219          void NVIC_Configuration(void)
    220          {
    221          	//	Set the Vector Table base location at 0x08004000
    222              NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x4000);   
    223          }
    224          
    225          /* Private functions ---------------------------------------------------------*/
    226          /**
    227            * @brief  GPIO Setting.
    228            * @param  Configures the different GPIO ports.
    229            * @retval None
    230            */
    231          void GPIO_Configuration(void)
    232          {
    233          	GPIO_InitTypeDef GPIO_InitStructure;
    234          
    235          
    236          	//  Configure UART1 pins: DEBUG_UART1TX, DEBUG_UART1RX 
    237          	//  UART1은 Debugging으로 사용한다. 이미 설정되어 있음.
    238          #if 0
    239          
    240          	GPIO_InitStructure.GPIO_Pin   = DEBUG_UART1TX | DEBUG_UART1RX;
    241          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    242          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    243          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    244          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    245          	GPIO_Init(DEBUG_UART1_PORT, &GPIO_InitStructure);
    246          
    247          	GPIO_PinAFConfig(DEBUG_UART1_PORT, DEBUG_UART1TX_PinSource, GPIO_AF_USART1);
    248          	GPIO_PinAFConfig(DEBUG_UART1_PORT, DEBUG_UART1RX_PinSource, GPIO_AF_USART1);
    249          
    250          #endif    
    251             
    252          	//  CAN1_TX, CAN1_RX
    253          	GPIO_InitStructure.GPIO_Pin   = CAN1_TX | CAN1_RX;
    254          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    255          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    256          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    257          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    258          	GPIO_Init(CAN1_PORT, &GPIO_InitStructure);
    259          	GPIO_PinAFConfig(CAN1_PORT, CAN1_TX_PinSource, GPIO_AF_CAN1);
    260          	GPIO_PinAFConfig(CAN1_PORT, CAN1_RX_PinSource, GPIO_AF_CAN1);
    261          
    262          	//  CAN2_TX, CAN2_RX
    263          	GPIO_InitStructure.GPIO_Pin   = CAN2_TX | CAN2_RX;
    264          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    265          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    266          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    267          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    268          	GPIO_Init(CAN2_PORT, &GPIO_InitStructure);
    269          	GPIO_PinAFConfig(CAN2_PORT, CAN2_TX_PinSource, GPIO_AF_CAN2);
    270          	GPIO_PinAFConfig(CAN2_PORT, CAN2_RX_PinSource, GPIO_AF_CAN2);
    271          
    272          	//	STM32 UART2 <-> EXYNOS UART1
    273          	GPIO_InitStructure.GPIO_Pin   = UART2TX_EXYNOS1 | UART2RX_EXYNOS1;
    274          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    275          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    276          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    277          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    278          	GPIO_Init(UART2_EXYNOS1_PORT, &GPIO_InitStructure);
    279          	GPIO_PinAFConfig(UART2_EXYNOS1_PORT, UART2TX_EXYNOS1_PinSource, GPIO_AF_USART2);
    280          	GPIO_PinAFConfig(UART2_EXYNOS1_PORT, UART2RX_EXYNOS1_PinSource, GPIO_AF_USART2);
    281          
    282          //	++, kutelf, 140801
    283          //	RevD.01.01 
    284          //	TW8832 -> TW8816 변경 
    285          //  GPIO로 I2C2 사용
    286          //  Alternate Function 사용안함
    287          #ifdef BoardVersion_RevD
    288          	GPIO_InitStructure.GPIO_Pin   = TW8816_I2C2_SCL | TW8816_I2C2_SDA;
    289          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    290          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    291          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    292          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    293          	GPIO_Init(TW8816_I2C2_PORT, &GPIO_InitStructure);
    294          #else
    295          //	RevD 이하 버젼에서 사용 
    296          	GPIO_InitStructure.GPIO_Pin   = TW8832_I2C2_SCL | TW8832_I2C2_SDA;
    297          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    298          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    299          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    300          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    301          	GPIO_Init(TW8832_I2C2_PORT, &GPIO_InitStructure);
    302          //	GPIO_PinAFConfig(TW8832_I2C2_PORT, TW8832_I2C2_SCL_PinSource, GPIO_AF_I2C2);
    303          //	GPIO_PinAFConfig(TW8832_I2C2_PORT, TW8832_I2C2_SDA_PinSource, GPIO_AF_I2C2);
    304          #endif
    305          //	--, kutelf, 140801
    306          
    307          	//	STM32 UART4 <-> EXYNOS UART3
    308          	GPIO_InitStructure.GPIO_Pin   = UART4TX_EXYNOS3 | UART4RX_EXYNOS3;
    309          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    310          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    311          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    312          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    313          	GPIO_Init(UART4_EXYNOS3_PORT, &GPIO_InitStructure);
    314          	GPIO_PinAFConfig(UART4_EXYNOS3_PORT, UART4TX_EXYNOS3_PinSource, GPIO_AF_UART4);
    315          	GPIO_PinAFConfig(UART4_EXYNOS3_PORT, UART4RX_EXYNOS3_PinSource, GPIO_AF_UART4);
    316          
    317          	//  EXYNOS PWR_CTRL -> GPIO Output
    318          	GPIO_InitStructure.GPIO_Pin   = EXYNOS_PWR_CTRL;
    319          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    320          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    321          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    322          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    323          	GPIO_Init(EXYNOS_PWR_CTRL_PORT, &GPIO_InitStructure);
    324          
    325          	//  EXYNOS PMIC_CTRL -> GPIO Output
    326          	GPIO_InitStructure.GPIO_Pin   = EXYNOS_PMIC_CTRL;
    327          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    328          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    329          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    330          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    331          	GPIO_Init(EXYNOS_PMIC_CTRL_PORT, &GPIO_InitStructure);
    332          
    333          	//	Serial Flash -> STM32 Update (SPI1)
    334          	GPIO_InitStructure.GPIO_Pin   = SFLASH_SPI1_CS | SFLASH_SPI1_SCK | SFLASH_SPI1_MOSI;
    335          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    336          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    337          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    338          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    339          	GPIO_Init(SFLASH_SPI1_PORT, &GPIO_InitStructure);
    340          
    341          	GPIO_InitStructure.GPIO_Pin   = SFLASH_SPI1_MISO;
    342          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    343          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    344          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    345          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    346          	GPIO_Init(SFLASH_SPI1_PORT, &GPIO_InitStructure);
    347          
    348          	GPIO_InitStructure.GPIO_Pin   = SFLASH_HOLD | SFLASH_WP;
    349          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    350          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    351          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    352          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    353          	GPIO_Init(SFLASH_PORT, &GPIO_InitStructure);
    354          
    355          	//	LAMP GPIO (Serial Data -> Parallel Data
    356          	GPIO_InitStructure.GPIO_Pin   = LAMP_CLR | LAMP_SLCLK | LAMP_SCLK | LAMP_SDATA;
    357          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    358          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    359          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    360          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    361          	GPIO_Init(LAMP_PORT, &GPIO_InitStructure);
    362          
    363          	//	Hardware Version -> ADC
    364          	GPIO_InitStructure.GPIO_Pin   = HW_VERSION;
    365          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AN;   
    366          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    367          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    368          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    369          	GPIO_Init(HW_VERSION_PORT, &GPIO_InitStructure);
    370          
    371          	//	KeySwitch Matrix -> GPIO Output
    372          	GPIO_InitStructure.GPIO_Pin   = KeySCAN0 | KeySCAN1 | KeySCAN2;
    373          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    374          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    375          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    376          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    377          	GPIO_Init(KeySWXX_PORT, &GPIO_InitStructure);
    378          
    379          	//	KeySwitch Matrix -> GPIO Input
    380          	GPIO_InitStructure.GPIO_Pin   = KeyInput0 | KeyInput1 | KeyInput2 | KeyInput3 | KeyInput4 | KeyInput5;
    381          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    382          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    383          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    384          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    385          	GPIO_Init(KeySWXX_PORT, &GPIO_InitStructure);
    386          
    387          	//  POWER_IGMON -> GPIO Input
    388          	GPIO_InitStructure.GPIO_Pin   = PWR_IGMON;
    389          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    390          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    391          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    392          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    393          	GPIO_Init(PWR_IGMON_PORT, &GPIO_InitStructure);
    394          
    395          	//  POWER_CTRL -> GPIO Output
    396          	GPIO_InitStructure.GPIO_Pin   = PWR_CTRL;
    397          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    398          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    399          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    400          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    401          	GPIO_Init(PWR_CTRL_PORT, &GPIO_InitStructure);
    402          
    403          	//  LCDPWR_CTRL -> GPIO Output
    404          	GPIO_InitStructure.GPIO_Pin   = LCDPWR_CTRL;
    405          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    406          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    407          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    408          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    409          	GPIO_Init(LCDPWR_PORT, &GPIO_InitStructure);
    410          
    411          //	++, kutelf, 140801
    412          //	RevD.01.01 
    413          //	FW_UPDATE 삭제 
    414          //	RevD 이하 버젼에서 사용 
    415          #ifndef BoardVersion_RevD
    416          	//  FW_UPDATE -> GPIO Input
    417          	GPIO_InitStructure.GPIO_Pin   = FW_UPDATE;
    418          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    419          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    420          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    421          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    422          	GPIO_Init(FW_UPDATE_PORT, &GPIO_InitStructure);
    423          #endif
    424          //	--, kutelf, 140801
    425          
    426          	//	LCDBL_PWM -> PWM
    427          	GPIO_InitStructure.GPIO_Pin   = LCDBL_PWM;
    428          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    429          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    430          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    431          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    432          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    433          	GPIO_PinAFConfig(LCDBL_PORT, LCDBL_PWM_PinSource, GPIO_AF_TIM8);
    434          
    435          	//  LCDBL_CTRL -> GPIO Output
    436          	GPIO_InitStructure.GPIO_Pin   = LCDBL_CTRL;
    437          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    438          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    439          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    440          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    441          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    442          	
    443          	//  LCD_STM32 -> GPIO Output
    444          	GPIO_InitStructure.GPIO_Pin   = LCD_STM32;
    445          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    446          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    447          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    448          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    449          	GPIO_Init(LCD_STM32_PORT, &GPIO_InitStructure);
    450          
    451          	//  LCD_EXYNOS -> GPIO Output
    452          	GPIO_InitStructure.GPIO_Pin   = LCD_EXYNOS;
    453          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    454          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    455          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    456          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    457          	GPIO_Init(LCD_EXYNOS_PORT, &GPIO_InitStructure);
    458          
    459          	//  BUZZER_CTRL -> GPIO Output
    460          	GPIO_InitStructure.GPIO_Pin   = BUZZER_CTRL;
    461          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    462          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    463          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    464          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    465          	GPIO_Init(BUZZER_PORT, &GPIO_InitStructure);
    466          
    467          	//  LED_CTRL -> GPIO Output
    468          	GPIO_InitStructure.GPIO_Pin   = LED_CTRL;
    469          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    470          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    471          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    472          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    473          	GPIO_Init(LED_PORT, &GPIO_InitStructure);
    474          
    475          	//  FM31X4(EEPROM) -> GPIO Output
    476          	//  GPIO로 I2C1 사용
    477          	//  Alternate Function 사용안함
    478          	GPIO_InitStructure.GPIO_Pin   = FM31X4_I2C1_SCL | FM31X4_I2C1_SDA;
    479          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    480          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    481          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    482          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    483          	GPIO_Init(FM31X4_I2C1_PORT, &GPIO_InitStructure);
    484          
    485          //	++, kutelf, 140801
    486          //	RevD.01.01 
    487          //	TW2835 삭제 
    488          //	RevD 이하 버젼에서 사용 
    489          #ifndef BoardVersion_RevD
    490          	//  TW2835 -> GPIO Output
    491          	GPIO_InitStructure.GPIO_Pin   = TW2835_IRQ| TW2835_HALE | TW2835_HSPB;
    492          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    493          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    494          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    495          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    496          	GPIO_Init(TW2835_CTRLPORT, &GPIO_InitStructure);
    497          
    498          	GPIO_InitStructure.GPIO_Pin   = TW2835_D0 | TW2835_D1 | TW2835_D2 | TW2835_D3 | TW2835_D4 | TW2835_D5 | TW2835_D6 | TW2835_D7;
    499          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    500          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    501          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    502          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    503          	GPIO_Init(TW2835_DATAPORT, &GPIO_InitStructure);	
    504          
    505          	GPIO_InitStructure.GPIO_Pin   = TW2835_CSB0 | TW2835_CSB1 | TW2835_nWE | TW2835_nOE;
    506          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    507          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    508          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    509          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    510          	GPIO_Init(TW2835_DATAPORT, &GPIO_InitStructure);
    511          #endif
    512          //	--, kutelf, 140801
    513          
    514          //	++, kutelf, 140801
    515          //	RevD.01.01 
    516          //	DPRAM 삭제 - FSMS 사용 안함. 
    517          #if 0
    518          	//  DPRAM INT -> GPIO Output
    519          	GPIO_InitStructure.GPIO_Pin   = DPRAM_INT;
    520          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
    521          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    522          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    523          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    524          	GPIO_Init(DPRAM_PORT, &GPIO_InitStructure);
    525          #endif
    526          //	--, kutelf, 140801
    527          
    528          	//  CAMERA nRESET -> GPIO Output
    529          	GPIO_InitStructure.GPIO_Pin   = CAMERA_nRESET;
    530          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    531          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    532          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    533          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    534          	GPIO_Init(CAMERA_nRESET_PORT, &GPIO_InitStructure);
    535          
    536          //	++, kutelf, 140801
    537          //	RevD.01.01 
    538          //	EXYNOS PMIC nRESET 추가 
    539          #if 1
    540          	GPIO_InitStructure.GPIO_Pin   = EXYNOS_PMIC_nRESET;
    541          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    542          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    543          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    544          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    545          	GPIO_Init(EXYNOS_PMIC_nRESET_PORT, &GPIO_InitStructure);
    546          #endif
    547          //	--, kutelf, 140801
    548          
    549          
    550          //	++, kutelf, 140801
    551          //	RevD.01.01 
    552          //	DPRAM 삭제 - FSMC 사용 안함. 
    553          #if 0
    554          	// 	FSMC Data Line
    555          	//  D15 ~ D0 : D15  D14  D13 D12  D11  D10  D9   D8   D7   D6  D5  D4  D3  D2  D1   D0   
    556          	//             PD10 PD9  PD8 PE15 PE14 PE13 PE12 PE11 PE10 PE9 PE8 PE7 PD1 PD0 PD15 PD14
    557          
    558          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10| GPIO_Pin_9  | GPIO_Pin_8 | GPIO_Pin_1 |
    559          	GPIO_Pin_0 | GPIO_Pin_15 | GPIO_Pin_14;
    560          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;
    561          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
    562          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    563          	GPIO_Init(GPIOD, &GPIO_InitStructure);
    564          
    565          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
    566          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9 , GPIO_AF_FSMC);
    567          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8 , GPIO_AF_FSMC);
    568          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1 , GPIO_AF_FSMC);
    569          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0 , GPIO_AF_FSMC);
    570          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
    571          	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);	
    572            
    573          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15 | GPIO_Pin_14 | GPIO_Pin_13 | GPIO_Pin_12 |
    574          								GPIO_Pin_11 | GPIO_Pin_10 | GPIO_Pin_9  |
    575          								GPIO_Pin_8  | GPIO_Pin_7;
    576          	GPIO_Init(GPIOE, &GPIO_InitStructure);
    577          
    578          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource15, GPIO_AF_FSMC);
    579          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14, GPIO_AF_FSMC);
    580          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13, GPIO_AF_FSMC);
    581          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource12, GPIO_AF_FSMC);
    582          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11, GPIO_AF_FSMC);
    583          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource10, GPIO_AF_FSMC);
    584          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);	
    585          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);	
    586          	GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);	
    587          
    588          	//  nCLK, nOE, nWE, nWait
    589          	GPIO_InitStructure.GPIO_Pin = FSMC_nOE | FSMC_nWE | FSMC_nWAIT | FSMC_nCLK;
    590          	GPIO_Init(FSMC_PORT, &GPIO_InitStructure);
    591          
    592          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nOE_PinSource  , GPIO_AF_FSMC);
    593          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nWE_PinSource  , GPIO_AF_FSMC);
    594          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nWAIT_PinSource, GPIO_AF_FSMC);
    595          	GPIO_PinAFConfig(FSMC_PORT, FSMC_nCLK_PinSource , GPIO_AF_FSMC);
    596          
    597          	//  nBL0, nBL1
    598          	GPIO_InitStructure.GPIO_Pin = FSMC_nBL0 | FSMC_nBL1;
    599          	GPIO_Init(FSMC_nBL_PORT, &GPIO_InitStructure);
    600          
    601          	GPIO_PinAFConfig(FSMC_nBL_PORT, FSMC_nBL0_PinSource  , GPIO_AF_FSMC);
    602          	GPIO_PinAFConfig(FSMC_nBL_PORT, FSMC_nBL1_PinSource  , GPIO_AF_FSMC);
    603          
    604          	//	nADV
    605          	GPIO_InitStructure.GPIO_Pin = FSMC_nADV;
    606          	GPIO_PinAFConfig(FSMC_ADVPORT, FSMC_nADV_PinSource  , GPIO_AF_FSMC);
    607          	GPIO_Init(FSMC_ADVPORT, &GPIO_InitStructure);
    608          
    609          	// NE1 configuration
    610          	GPIO_InitStructure.GPIO_Pin = FSMC_nNE1;
    611          	GPIO_Init(FSMC_nNE1_PORT, &GPIO_InitStructure);
    612          
    613          	GPIO_PinAFConfig(FSMC_nNE1_PORT, FSMC_nNE1_PinSource  , GPIO_AF_FSMC);
    614          #endif
    615          //	--, kutelf, 140801
    616          
    617          	//  사용하지 않는 GPIO Pin은 Output -> Low 상태로 만들어 놓는다.
    618          	GPIO_Configuration_NotUsed();
    619          }
    620          
    621          /**
    622            * @brief  GPIO Setting.
    623            * @param  Configures the different GPIO ports. (사용하지 않는 GPIO는 Output Low 상태로 만든다.)
    624            * @retval None
    625            */
    626          void GPIO_Configuration_NotUsed(void)
    627          {
    628              GPIO_InitTypeDef GPIO_InitStructure;
    629          
    630          //	++, kutelf, 140801
    631          //	RevD.01.01 
    632          //	사용하지 않는 핀 : Output Low 상태로 설정. 
    633          #ifdef BoardVersion_RevD
    634          	//  PB7
    635              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_7;
    636              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    637            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    638            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    639              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    640              GPIO_Init(GPIOB, &GPIO_InitStructure);
    641          
    642          	//  PC0, PC1, PC2, PC5, PC8, PC13
    643              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_5 | GPIO_Pin_8 | GPIO_Pin_13;
    644              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    645            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    646            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    647              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    648              GPIO_Init(GPIOC, &GPIO_InitStructure);
    649          
    650          	//  PD0, PD1, PD3, PD4, PD5, PD6, PD7, PD8, PD9, PD10, PD11, PD12, PD13, PD14, PD15
    651              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 |
    652              								GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
    653              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    654            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    655            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    656              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    657              GPIO_Init(GPIOD, &GPIO_InitStructure);
    658          
    659          	//  PE0, PE1, PE2, PE3, PE4, PE5, PE6, PE7, PE8, PE9, PE10, PE11, PE12, PE13, PE14, PE15
    660              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 |
    661              								GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 |
    662              								GPIO_Pin_14 | GPIO_Pin_15;
    663              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    664            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    665            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    666              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    667              GPIO_Init(GPIOE, &GPIO_InitStructure);
    668          
    669          
    670          	//  PF3, PF4, PF5, PF6, PF7, PF8, PF9
    671              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
    672              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    673            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    674            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    675              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    676              GPIO_Init(GPIOF, &GPIO_InitStructure);
    677          
    678          	//  PG0, PG1, PG2, PG3, PG4, PG5, PG6, PG7, PG8, PG9, PG10, GP12, PG13, PG14
    679              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 |
    680              								GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14;
    681              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    682            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    683            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    684              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    685              GPIO_Init(GPIOG, &GPIO_InitStructure);
    686          	
    687          
    688              GPIO_ResetBits(GPIOB, GPIO_Pin_7); 
    689          
    690              GPIO_ResetBits(GPIOC, GPIO_Pin_0); 
    691              GPIO_ResetBits(GPIOC, GPIO_Pin_1); 
    692              GPIO_ResetBits(GPIOC, GPIO_Pin_2); 
    693              GPIO_ResetBits(GPIOC, GPIO_Pin_5); 
    694              GPIO_ResetBits(GPIOC, GPIO_Pin_8); 
    695              GPIO_ResetBits(GPIOC, GPIO_Pin_13); 	
    696          
    697              GPIO_ResetBits(GPIOD, GPIO_Pin_0); 		
    698              GPIO_ResetBits(GPIOD, GPIO_Pin_1); 		
    699              GPIO_ResetBits(GPIOD, GPIO_Pin_3); 		
    700              GPIO_ResetBits(GPIOD, GPIO_Pin_4); 		
    701              GPIO_ResetBits(GPIOD, GPIO_Pin_5); 		
    702              GPIO_ResetBits(GPIOD, GPIO_Pin_6); 		
    703              GPIO_ResetBits(GPIOD, GPIO_Pin_7); 		
    704              GPIO_ResetBits(GPIOD, GPIO_Pin_8); 		
    705              GPIO_ResetBits(GPIOD, GPIO_Pin_9); 		
    706              GPIO_ResetBits(GPIOD, GPIO_Pin_10); 		
    707              GPIO_ResetBits(GPIOD, GPIO_Pin_11); 		
    708              GPIO_ResetBits(GPIOD, GPIO_Pin_12); 		
    709              GPIO_ResetBits(GPIOD, GPIO_Pin_13); 		
    710              GPIO_ResetBits(GPIOD, GPIO_Pin_14); 		
    711              GPIO_ResetBits(GPIOD, GPIO_Pin_15); 		
    712          	
    713              GPIO_ResetBits(GPIOE, GPIO_Pin_0); 		
    714              GPIO_ResetBits(GPIOE, GPIO_Pin_1); 		
    715              GPIO_ResetBits(GPIOE, GPIO_Pin_2); 		
    716              GPIO_ResetBits(GPIOE, GPIO_Pin_3); 		
    717              GPIO_ResetBits(GPIOE, GPIO_Pin_4); 		
    718              GPIO_ResetBits(GPIOE, GPIO_Pin_5); 		
    719              GPIO_ResetBits(GPIOE, GPIO_Pin_6); 		
    720              GPIO_ResetBits(GPIOE, GPIO_Pin_7); 		
    721              GPIO_ResetBits(GPIOE, GPIO_Pin_8); 		
    722              GPIO_ResetBits(GPIOE, GPIO_Pin_9); 		
    723              GPIO_ResetBits(GPIOE, GPIO_Pin_10); 		
    724              GPIO_ResetBits(GPIOE, GPIO_Pin_11); 		
    725              GPIO_ResetBits(GPIOE, GPIO_Pin_12); 		
    726              GPIO_ResetBits(GPIOE, GPIO_Pin_13); 		
    727              GPIO_ResetBits(GPIOE, GPIO_Pin_14); 		
    728              GPIO_ResetBits(GPIOE, GPIO_Pin_15); 		
    729          
    730              GPIO_ResetBits(GPIOF, GPIO_Pin_3); 		
    731              GPIO_ResetBits(GPIOF, GPIO_Pin_4); 		
    732              GPIO_ResetBits(GPIOF, GPIO_Pin_5); 		
    733              GPIO_ResetBits(GPIOF, GPIO_Pin_6); 		
    734              GPIO_ResetBits(GPIOF, GPIO_Pin_7); 		
    735              GPIO_ResetBits(GPIOF, GPIO_Pin_8); 		
    736              GPIO_ResetBits(GPIOF, GPIO_Pin_9); 		
    737          
    738              GPIO_ResetBits(GPIOG, GPIO_Pin_0); 		
    739              GPIO_ResetBits(GPIOG, GPIO_Pin_1); 			
    740              GPIO_ResetBits(GPIOG, GPIO_Pin_2); 		
    741              GPIO_ResetBits(GPIOG, GPIO_Pin_3); 			
    742              GPIO_ResetBits(GPIOG, GPIO_Pin_4); 		
    743              GPIO_ResetBits(GPIOG, GPIO_Pin_5); 			
    744              GPIO_ResetBits(GPIOG, GPIO_Pin_6); 		
    745              GPIO_ResetBits(GPIOG, GPIO_Pin_7); 			
    746              GPIO_ResetBits(GPIOG, GPIO_Pin_8); 		
    747              GPIO_ResetBits(GPIOG, GPIO_Pin_9); 			
    748              GPIO_ResetBits(GPIOG, GPIO_Pin_10); 			
    749              GPIO_ResetBits(GPIOG, GPIO_Pin_12); 			
    750              GPIO_ResetBits(GPIOG, GPIO_Pin_13); 			
    751              GPIO_ResetBits(GPIOG, GPIO_Pin_14); 				
    752          	
    753          #else
    754          //	RevD 이하 버젼에서 사용 
    755          
    756          	//  PC0, PC1, PC2, PC8, PC14
    757              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_8 | GPIO_Pin_14;
    758              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    759            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    760            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    761              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    762              GPIO_Init(GPIOC, &GPIO_InitStructure);
    763          
    764          	//  PF3, PF4, PF5, PF6, PF7, PF8, PF9
    765              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
    766              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    767            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    768            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    769              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    770              GPIO_Init(GPIOF, &GPIO_InitStructure);
    771          
    772          	//  PG8, PG9
    773              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_8 | GPIO_Pin_9;
    774              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    775            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    776            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    777              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    778              GPIO_Init(GPIOG, &GPIO_InitStructure);
    779          	
    780          	//  PE2, PE3, PE4, PE5
    781              GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
    782              GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    783            	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    784            	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    785              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    786              GPIO_Init(GPIOE, &GPIO_InitStructure);
    787          
    788              GPIO_ResetBits(GPIOC, GPIO_Pin_0);
    789              GPIO_ResetBits(GPIOC, GPIO_Pin_1);
    790              GPIO_ResetBits(GPIOC, GPIO_Pin_2);
    791              GPIO_ResetBits(GPIOC, GPIO_Pin_8);
    792              GPIO_ResetBits(GPIOC, GPIO_Pin_14);
    793          	
    794              GPIO_ResetBits(GPIOF, GPIO_Pin_3);
    795              GPIO_ResetBits(GPIOF, GPIO_Pin_4);
    796              GPIO_ResetBits(GPIOF, GPIO_Pin_5);
    797              GPIO_ResetBits(GPIOF, GPIO_Pin_6);
    798              GPIO_ResetBits(GPIOF, GPIO_Pin_7);
    799              GPIO_ResetBits(GPIOF, GPIO_Pin_8);
    800              GPIO_ResetBits(GPIOF, GPIO_Pin_9);
    801          
    802              GPIO_ResetBits(GPIOG, GPIO_Pin_8);
    803              GPIO_ResetBits(GPIOG, GPIO_Pin_9);	
    804          	
    805              GPIO_ResetBits(GPIOE, GPIO_Pin_2);	
    806              GPIO_ResetBits(GPIOE, GPIO_Pin_3);	
    807              GPIO_ResetBits(GPIOE, GPIO_Pin_4);	
    808              GPIO_ResetBits(GPIOE, GPIO_Pin_5);	
    809          #endif
    810          //	--, kutelf, 140801
    811          }
    812          
    813          /**
    814            * @brief  Hardware, Software System Configuration.
    815            * @param  None
    816            * @retval None
    817            */
    818          void System_Configuration(void)
    819          {
    820          	RCC_Configuration();		    // 	Configure the system clocks
    821          	NVIC_Configuration();		    //	NVIC Configuration
    822          	GPIO_Configuration();		    // 	Configure the GPIO ports
    823          
    824          }
    825          
    826          void System_Initialize(void)
    827          {
    828          	//  PWR_CTRL -> BootLoader에서는 Sub Power Enable을 Off 
    829          	GPIO_ResetBits(PWR_CTRL_PORT, PWR_CTRL);   	//	24V Power Enable 
    830          	                                //  Set   : Power Enable On
    831          	                                //  Reset : Power Enable Off    	
    832          
    833          	//  LCDPWR_CTRL -> BootLoader에서는 VLCD12 Power Enable을 Off 
    834          	GPIO_ResetBits(LCDPWR_PORT, LCDPWR_CTRL);  	//	LCD Power Enable 
    835          	                                //  Set   : LCD Power Enable 
    836          	                                //  Reset : LCD Power Disable	
    837          
    838          	//  BootLoader Bootting시에, LCDBL는 Off 상태로 만든다.
    839          	GPIO_ResetBits(LCDBL_PORT, LCDBL_CTRL);	    //	LCD BackLight Power On/Off (LCDBL_CTRL)
    840          	                               	//  Set   : BackLight Power On
    841          	                               	//  Reset : BackLight Power Off			
    842          	                               	
    843          	GPIO_ResetBits(BUZZER_PORT, BUZZER_CTRL);	//	BUZZER Off
    844          	                                //  Set   : BUZZER On
    845          	                                //  Reset : BUZZER Off
    846          
    847          	GPIO_ResetBits(LED_PORT, LED_CTRL);			//	LED Enable Off
    848          	                                //  Set   : LED Enable  -> On
    849          	                                //  Reset : LED Disable -> Off
    850          
    851          	GPIO_ResetBits(EXYNOS_PWR_CTRL_PORT, EXYNOS_PWR_CTRL);	//	Exynos-4412 Power On/Off
    852          	                                			//  Set   : Exynos-4412 -> Power On
    853          	                                			//  Reset : Exynos-4412 -> Power Off
    854          	                                			
    855          	GPIO_ResetBits(EXYNOS_PMIC_CTRL_PORT, EXYNOS_PMIC_CTRL);	//	Exynos-4412 PMIC On/Off
    856          	                                				//  PMIC On  : Low -> High
    857          	                                				//       Off : Low -> High
    858          	//	++, kutelf, 140801
    859          	//	RevD.01.01 
    860          	//	EXYNOS PMIC nRESET => Reset 상태로 초기화 
    861          	GPIO_ResetBits(EXYNOS_PMIC_nRESET_PORT, EXYNOS_PMIC_nRESET);	//	Exynos-4412 PMIC nRESET
    862          	                                				//  PMIC On  : High
    863          	                                				//       Off : Low
    864          	//	--, kutelf, 140801
    865          
    866          	GPIO_SetBits(LCD_EXYNOS_PORT, LCD_EXYNOS);	//	Exynos-4412 LCD Display
    867          	                                //  Set   : HI-Z
    868          	                                //  Reset : Display
    869          	                                    				
    870          	GPIO_ResetBits(LCD_STM32_PORT, LCD_STM32);	//	STM32 LCD Display
    871          	                                //  Set   : HI-Z
    872          	                                //  Reset : Display
    873          
    874          	GPIO_ResetBits(CAMERA_nRESET_PORT, CAMERA_nRESET);	//	CAMERA nRESET
    875          	                                        //  Set   : On
    876          	                                        //  Reset : Off												
    877          }
    878          
    879          void System_Variable_Init(void)
    880          {
    881          	memset((void *)(&WL9FM_TIME),       	0x0, sizeof(WL9FM_TIME_DATA));
    882          	memset((void *)(&WL9FM_RTC),            0x0, sizeof(WL9FM_DATA_RTC));	
    883          	memset((void *)(&WL9FM_BUZZER),         0x0, sizeof(WL9FM_BUZZER_DATA));	
    884          	memset((void *)(&WL9FM_LCDBL),          0x0, sizeof(WL9FM_LCDBL_DATA));	
    885          
    886          	WL9F_CAN_Buffer_Init();
    887          	WL9F_CAN_Variables_Init();
    888          	Init_Smart_Key_valuable();
    889          	CANUpdateFlag = 0;
    890          	LCDOffCount = 30;
    891          	OSUpdateCount = 200;
    892          }
    893          
    894          /*********(C) COPYRIGHT 2013 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/
    895          
    896          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   GPIO_Configuration
        32   -> GPIO_Configuration_NotUsed
        32   -> GPIO_Init
        32   -> GPIO_PinAFConfig
      40   GPIO_Configuration_NotUsed
        40   -> GPIO_Init
        40   -> GPIO_ResetBits
       0   NVIC_Configuration
         0   -> NVIC_SetVectorTable
      24   RCC_Configuration
        24   -> RCC_AHB1PeriphClockCmd
        24   -> RCC_AHB3PeriphClockCmd
        24   -> RCC_APB1PeriphClockCmd
        24   -> RCC_APB2PeriphClockCmd
        24   -> RCC_ClockSecuritySystemCmd
        24   -> RCC_GetClocksFreq
       8   System_Configuration
         0   -> GPIO_Configuration
         8   -> NVIC_SetVectorTable
         8   -> RCC_Configuration
      16   System_Initialize
         0   -> GPIO_ResetBits
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
       8   System_Variable_Init
         8   -> Init_Smart_Key_valuable
         8   -> WL9F_CAN_Buffer_Init
         8   -> WL9F_CAN_Variables_Init
         8   -> __aeabi_memclr
         8   -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_12
       4  ??DataTable4_13
       4  ??DataTable4_14
       4  ??DataTable4_15
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
    1066  GPIO_Configuration
     778  GPIO_Configuration_NotUsed
      12  NVIC_Configuration
     242  RCC_Configuration
      24  System_Configuration
     112  System_Initialize
      66  System_Variable_Init

 
 2 364 bytes in section .text
 
 2 364 bytes of CODE memory

Errors: none
Warnings: none
