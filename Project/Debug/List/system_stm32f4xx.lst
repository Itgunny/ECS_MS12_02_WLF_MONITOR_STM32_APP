###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      04/Feb/2015  11:42:54 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pla #
#                    tform\COMMON\SRC\system_stm32f4xx.c                      #
#    Command line =  "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pl #
#                    atform\COMMON\SRC\system_stm32f4xx.c" -D                 #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN "C:\Tools\IAR                    #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\Debug\Li #
#                    st\" -o "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monito #
#                    r_APP\Project\Debug\Obj\" --debug --endian=little        #
#                    --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config          #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I "C:\Tools\IAR       #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\..\Platf #
#                    orm\COMMON\INC\" -I "C:\Tools\IAR                        #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\..\Platf #
#                    orm\TaeHa - ECS\INC\" -I "C:\Tools\IAR                   #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\..\Libra #
#                    ries\CMSIS\Device\ST\STM32F4xx\Include\" -I              #
#                    "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pr #
#                    oject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\" -Oh  #
#                    --use_c++_inline -I "C:\Tools\IAR Systems\Embedded       #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pro #
#                    ject\Debug\List\system_stm32f4xx.lst                     #
#    Object file  =  C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pro #
#                    ject\Debug\Obj\system_stm32f4xx.o                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Platform\COMMON\SRC\system_stm32f4xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f4xx.c
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F4xx devices,
      9            *          and is generated by the clock configuration tool
     10            *          stm32f4xx_Clock_Configuration_V1.0.0.xls
     11            *             
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool. 
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f4xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *                                     
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (16 MHz) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 25MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        Supported STM32F4xx device revision    | Rev A
     46            *-----------------------------------------------------------------------------
     47            *        System Clock source                    | PLL (HSE)
     48            *-----------------------------------------------------------------------------
     49            *        SYSCLK(Hz)                             | 168000000
     50            *-----------------------------------------------------------------------------
     51            *        HCLK(Hz)                               | 168000000
     52            *-----------------------------------------------------------------------------
     53            *        AHB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        APB1 Prescaler                         | 4
     56            *-----------------------------------------------------------------------------
     57            *        APB2 Prescaler                         | 2
     58            *-----------------------------------------------------------------------------
     59            *        HSE Frequency(Hz)                      | 25000000
     60            *-----------------------------------------------------------------------------
     61            *        PLL_M                                  | 25
     62            *-----------------------------------------------------------------------------
     63            *        PLL_N                                  | 336
     64            *-----------------------------------------------------------------------------
     65            *        PLL_P                                  | 2
     66            *-----------------------------------------------------------------------------
     67            *        PLL_Q                                  | 7
     68            *-----------------------------------------------------------------------------
     69            *        PLLI2S_N                               | NA
     70            *-----------------------------------------------------------------------------
     71            *        PLLI2S_R                               | NA
     72            *-----------------------------------------------------------------------------
     73            *        I2S input clock                        | NA
     74            *-----------------------------------------------------------------------------
     75            *        VDD(V)                                 | 3.3
     76            *-----------------------------------------------------------------------------
     77            *        Main regulator output voltage          | Scale1 mode
     78            *-----------------------------------------------------------------------------
     79            *        Flash Latency(WS)                      | 5
     80            *-----------------------------------------------------------------------------
     81            *        Prefetch Buffer                        | OFF
     82            *-----------------------------------------------------------------------------
     83            *        Instruction cache                      | ON
     84            *-----------------------------------------------------------------------------
     85            *        Data cache                             | ON
     86            *-----------------------------------------------------------------------------
     87            *        Require 48MHz for USB OTG FS,          | Enabled
     88            *        SDIO and RNG clock                     |
     89            *-----------------------------------------------------------------------------
     90            *=============================================================================
     91            ******************************************************************************
     92            * @attention
     93            *
     94            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     95            *
     96            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     97            * You may not use this file except in compliance with the License.
     98            * You may obtain a copy of the License at:
     99            *
    100            *        http://www.st.com/software_license_agreement_liberty_v2
    101            *
    102            * Unless required by applicable law or agreed to in writing, software 
    103            * distributed under the License is distributed on an "AS IS" BASIS, 
    104            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    105            * See the License for the specific language governing permissions and
    106            * limitations under the License.
    107            *
    108            ******************************************************************************
    109            */
    110          
    111          /** @addtogroup CMSIS
    112            * @{
    113            */
    114          
    115          /** @addtogroup stm32f4xx_system
    116            * @{
    117            */  
    118            
    119          /** @addtogroup STM32F4xx_System_Private_Includes
    120            * @{
    121            */
    122          
    123          #include "stm32f4xx.h"
    124          
    125          /**
    126            * @}
    127            */
    128          
    129          /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
    130            * @{
    131            */
    132          
    133          /**
    134            * @}
    135            */
    136          
    137          /** @addtogroup STM32F4xx_System_Private_Defines
    138            * @{
    139            */
    140          
    141          /************************* Miscellaneous Configuration ************************/
    142          /*!< Uncomment the following line if you need to use external SRAM mounted
    143               on STM324xG_EVAL board as data memory  */
    144          /* #define DATA_IN_ExtSRAM */
    145          
    146          /*!< Uncomment the following line if you need to relocate your vector Table in
    147               Internal SRAM. */
    148          /* #define VECT_TAB_SRAM */
    149          //	++, kutelf, 130228
    150          #if 0
    151          #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
    152                                             This value must be a multiple of 0x200. */
    153          #else
    154          #define VECT_TAB_OFFSET  0x4000 
    155          #endif
    156          //	--, kutelf, 130228
    157          /******************************************************************************/
    158          
    159          /************************* PLL Parameters *************************************/
    160          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
    161          #define PLL_M      25
    162          #define PLL_N      336
    163          
    164          /* SYSCLK = PLL_VCO / PLL_P */
    165          #define PLL_P      2
    166          
    167          /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
    168          #define PLL_Q      7
    169          
    170          /******************************************************************************/
    171          
    172          /**
    173            * @}
    174            */
    175          
    176          /** @addtogroup STM32F4xx_System_Private_Macros
    177            * @{
    178            */
    179          
    180          /**
    181            * @}
    182            */
    183          
    184          /** @addtogroup STM32F4xx_System_Private_Variables
    185            * @{
    186            */
    187          
    188            uint32_t SystemCoreClock = 168000000;
    189          
    190            __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    191          
    192          /**
    193            * @}
    194            */
    195          
    196          /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
    197            * @{
    198            */
    199          
    200          static void SetSysClock(void);
    201          #ifdef DATA_IN_ExtSRAM
    202            static void SystemInit_ExtMemCtl(void); 
    203          #endif /* DATA_IN_ExtSRAM */
    204          
    205          /**
    206            * @}
    207            */
    208          
    209          /** @addtogroup STM32F4xx_System_Private_Functions
    210            * @{
    211            */
    212          
    213          /**
    214            * @brief  Setup the microcontroller system
    215            *         Initialize the Embedded Flash Interface, the PLL and update the 
    216            *         SystemFrequency variable.
    217            * @param  None
    218            * @retval None
    219            */
    220          void SystemInit(void)
    221          {
    222            /* FPU settings ------------------------------------------------------------*/
    223            #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    224              SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
    225            #endif
    226          
    227            /* Reset the RCC clock configuration to the default reset state ------------*/
    228            /* Set HSION bit */
    229            RCC->CR |= (uint32_t)0x00000001;
    230          
    231            /* Reset CFGR register */
    232            RCC->CFGR = 0x00000000;
    233          
    234            /* Reset HSEON, CSSON and PLLON bits */
    235            RCC->CR &= (uint32_t)0xFEF6FFFF;
    236          
    237            /* Reset PLLCFGR register */
    238            RCC->PLLCFGR = 0x24003010;
    239          
    240            /* Reset HSEBYP bit */
    241            RCC->CR &= (uint32_t)0xFFFBFFFF;
    242          
    243            /* Disable all interrupts */
    244            RCC->CIR = 0x00000000;
    245          
    246          #ifdef DATA_IN_ExtSRAM
    247            SystemInit_ExtMemCtl(); 
    248          #endif /* DATA_IN_ExtSRAM */
    249                   
    250            /* Configure the System clock source, PLL Multiplier and Divider factors, 
    251               AHB/APBx prescalers and Flash settings ----------------------------------*/
    252            SetSysClock();
    253          
    254            /* Configure the Vector Table location add offset address ------------------*/
    255          #ifdef VECT_TAB_SRAM
    256            SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
    257          #else
    258            SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
    259          #endif
    260          }
    261          
    262          /**
    263             * @brief  Update SystemCoreClock variable according to Clock Register Values.
    264            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    265            *         be used by the user application to setup the SysTick timer or configure
    266            *         other parameters.
    267            *           
    268            * @note   Each time the core clock (HCLK) changes, this function must be called
    269            *         to update SystemCoreClock variable value. Otherwise, any configuration
    270            *         based on this variable will be incorrect.         
    271            *     
    272            * @note   - The system frequency computed by this function is not the real 
    273            *           frequency in the chip. It is calculated based on the predefined 
    274            *           constant and the selected clock source:
    275            *             
    276            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    277            *                                              
    278            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    279            *                          
    280            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
    281            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    282            *         
    283            *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
    284            *             16 MHz) but the real value may vary depending on the variations
    285            *             in voltage and temperature.   
    286            *    
    287            *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
    288            *              25 MHz), user has to ensure that HSE_VALUE is same as the real
    289            *              frequency of the crystal used. Otherwise, this function may
    290            *              have wrong result.
    291            *                
    292            *         - The result of this function could be not correct when using fractional
    293            *           value for HSE crystal.
    294            *     
    295            * @param  None
    296            * @retval None
    297            */
    298          void SystemCoreClockUpdate(void)
    299          {
    300            uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
    301            
    302            /* Get SYSCLK source -------------------------------------------------------*/
    303            tmp = RCC->CFGR & RCC_CFGR_SWS;
    304          
    305            switch (tmp)
    306            {
    307              case 0x00:  /* HSI used as system clock source */
    308                SystemCoreClock = HSI_VALUE;
    309                break;
    310              case 0x04:  /* HSE used as system clock source */
    311                SystemCoreClock = HSE_VALUE;
    312                break;
    313              case 0x08:  /* PLL used as system clock source */
    314          
    315                /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
    316                   SYSCLK = PLL_VCO / PLL_P
    317                   */    
    318                pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
    319                pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
    320                
    321                if (pllsource != 0)
    322                {
    323                  /* HSE used as PLL clock source */
    324                  pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
    325                }
    326                else
    327                {
    328                  /* HSI used as PLL clock source */
    329                  pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
    330                }
    331          
    332                pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
    333                SystemCoreClock = pllvco/pllp;
    334                break;
    335              default:
    336                SystemCoreClock = HSI_VALUE;
    337                break;
    338            }
    339            /* Compute HCLK frequency --------------------------------------------------*/
    340            /* Get HCLK prescaler */
    341            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    342            /* HCLK frequency */
    343            SystemCoreClock >>= tmp;
    344          }
    345          
    346          /**
    347            * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
    348            *         AHB/APBx prescalers and Flash settings
    349            * @Note   This function should be called only once the RCC clock configuration  
    350            *         is reset to the default reset state (done in SystemInit() function).   
    351            * @param  None
    352            * @retval None
    353            */
    354          static void SetSysClock(void)
    355          {
    356          /******************************************************************************/
    357          /*            PLL (clocked by HSE) used as System clock source                */
    358          /******************************************************************************/
    359            __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    360            
    361            /* Enable HSE */
    362            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    363           
    364            /* Wait till HSE is ready and if Time out is reached exit */
    365            do
    366            {
    367              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    368              StartUpCounter++;
    369            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    370          
    371            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    372            {
    373              HSEStatus = (uint32_t)0x01;
    374            }
    375            else
    376            {
    377              HSEStatus = (uint32_t)0x00;
    378            }
    379          
    380            if (HSEStatus == (uint32_t)0x01)
    381            {
    382              /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    383              RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    384              PWR->CR |= PWR_CR_VOS;
    385          
    386              /* HCLK = SYSCLK / 1*/
    387              RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
    388                
    389              /* PCLK2 = HCLK / 2*/
    390              RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
    391              
    392              /* PCLK1 = HCLK / 4*/
    393              RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
    394          
    395              /* Configure the main PLL */
    396              RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
    397                             (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
    398          
    399              /* Enable the main PLL */
    400              RCC->CR |= RCC_CR_PLLON;
    401          
    402              /* Wait till the main PLL is ready */
    403              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    404              {
    405              }
    406             
    407              /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    408              FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
    409          
    410              /* Select the main PLL as system clock source */
    411              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    412              RCC->CFGR |= RCC_CFGR_SW_PLL;
    413          
    414              /* Wait till the main PLL is used as system clock source */
    415              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
    416              {
    417              }
    418            }
    419            else
    420            { /* If HSE fails to start-up, the application will have wrong clock
    421                   configuration. User can add here some code to deal with this error */
    422            }
    423          
    424          }
    425          
    426          /**
    427            * @brief  Setup the external memory controller. Called in startup_stm32f4xx.s 
    428            *          before jump to __main
    429            * @param  None
    430            * @retval None
    431            */ 
    432          #ifdef DATA_IN_ExtSRAM
    433          /**
    434            * @brief  Setup the external memory controller.
    435            *         Called in startup_stm32f4xx.s before jump to main.
    436            *         This function configures the external SRAM mounted on STM324xG_EVAL board
    437            *         This SRAM will be used as program data memory (including heap and stack).
    438            * @param  None
    439            * @retval None
    440            */
    441          void SystemInit_ExtMemCtl(void)
    442          {
    443          /*-- GPIOs Configuration -----------------------------------------------------*/
    444          /*
    445           +-------------------+--------------------+------------------+------------------+
    446           +                       SRAM pins assignment                                   +
    447           +-------------------+--------------------+------------------+------------------+
    448           | PD0  <-> FSMC_D2  | PE0  <-> FSMC_NBL0 | PF0  <-> FSMC_A0 | PG0 <-> FSMC_A10 | 
    449           | PD1  <-> FSMC_D3  | PE1  <-> FSMC_NBL1 | PF1  <-> FSMC_A1 | PG1 <-> FSMC_A11 | 
    450           | PD4  <-> FSMC_NOE | PE3  <-> FSMC_A19  | PF2  <-> FSMC_A2 | PG2 <-> FSMC_A12 | 
    451           | PD5  <-> FSMC_NWE | PE4  <-> FSMC_A20  | PF3  <-> FSMC_A3 | PG3 <-> FSMC_A13 | 
    452           | PD8  <-> FSMC_D13 | PE7  <-> FSMC_D4   | PF4  <-> FSMC_A4 | PG4 <-> FSMC_A14 | 
    453           | PD9  <-> FSMC_D14 | PE8  <-> FSMC_D5   | PF5  <-> FSMC_A5 | PG5 <-> FSMC_A15 | 
    454           | PD10 <-> FSMC_D15 | PE9  <-> FSMC_D6   | PF12 <-> FSMC_A6 | PG9 <-> FSMC_NE2 | 
    455           | PD11 <-> FSMC_A16 | PE10 <-> FSMC_D7   | PF13 <-> FSMC_A7 |------------------+
    456           | PD12 <-> FSMC_A17 | PE11 <-> FSMC_D8   | PF14 <-> FSMC_A8 | 
    457           | PD13 <-> FSMC_A18 | PE12 <-> FSMC_D9   | PF15 <-> FSMC_A9 | 
    458           | PD14 <-> FSMC_D0  | PE13 <-> FSMC_D10  |------------------+
    459           | PD15 <-> FSMC_D1  | PE14 <-> FSMC_D11  |
    460           |                   | PE15 <-> FSMC_D12  |
    461           +-------------------+--------------------+
    462          */
    463             /* Enable GPIOD, GPIOE, GPIOF and GPIOG interface clock */
    464            RCC->AHB1ENR   = 0x00000078;
    465            
    466            /* Connect PDx pins to FSMC Alternate function */
    467            GPIOD->AFR[0]  = 0x00cc00cc;
    468            GPIOD->AFR[1]  = 0xcc0ccccc;
    469            /* Configure PDx pins in Alternate function mode */  
    470            GPIOD->MODER   = 0xaaaa0a0a;
    471            /* Configure PDx pins speed to 100 MHz */  
    472            GPIOD->OSPEEDR = 0xffff0f0f;
    473            /* Configure PDx pins Output type to push-pull */  
    474            GPIOD->OTYPER  = 0x00000000;
    475            /* No pull-up, pull-down for PDx pins */ 
    476            GPIOD->PUPDR   = 0x00000000;
    477          
    478            /* Connect PEx pins to FSMC Alternate function */
    479            GPIOE->AFR[0]  = 0xc00cc0cc;
    480            GPIOE->AFR[1]  = 0xcccccccc;
    481            /* Configure PEx pins in Alternate function mode */ 
    482            GPIOE->MODER   = 0xaaaa828a;
    483            /* Configure PEx pins speed to 100 MHz */ 
    484            GPIOE->OSPEEDR = 0xffffc3cf;
    485            /* Configure PEx pins Output type to push-pull */  
    486            GPIOE->OTYPER  = 0x00000000;
    487            /* No pull-up, pull-down for PEx pins */ 
    488            GPIOE->PUPDR   = 0x00000000;
    489          
    490            /* Connect PFx pins to FSMC Alternate function */
    491            GPIOF->AFR[0]  = 0x00cccccc;
    492            GPIOF->AFR[1]  = 0xcccc0000;
    493            /* Configure PFx pins in Alternate function mode */   
    494            GPIOF->MODER   = 0xaa000aaa;
    495            /* Configure PFx pins speed to 100 MHz */ 
    496            GPIOF->OSPEEDR = 0xff000fff;
    497            /* Configure PFx pins Output type to push-pull */  
    498            GPIOF->OTYPER  = 0x00000000;
    499            /* No pull-up, pull-down for PFx pins */ 
    500            GPIOF->PUPDR   = 0x00000000;
    501          
    502            /* Connect PGx pins to FSMC Alternate function */
    503            GPIOG->AFR[0]  = 0x00cccccc;
    504            GPIOG->AFR[1]  = 0x000000c0;
    505            /* Configure PGx pins in Alternate function mode */ 
    506            GPIOG->MODER   = 0x00080aaa;
    507            /* Configure PGx pins speed to 100 MHz */ 
    508            GPIOG->OSPEEDR = 0x000c0fff;
    509            /* Configure PGx pins Output type to push-pull */  
    510            GPIOG->OTYPER  = 0x00000000;
    511            /* No pull-up, pull-down for PGx pins */ 
    512            GPIOG->PUPDR   = 0x00000000;
    513            
    514          /*-- FSMC Configuration ------------------------------------------------------*/
    515            /* Enable the FSMC interface clock */
    516            RCC->AHB3ENR         = 0x00000001;
    517          
    518            /* Configure and enable Bank1_SRAM2 */
    519            FSMC_Bank1->BTCR[2]  = 0x00001015;
    520            FSMC_Bank1->BTCR[3]  = 0x00010603;
    521            FSMC_Bank1E->BWTR[2] = 0x0fffffff;
    522          /*
    523            Bank1_SRAM2 is configured as follow:
    524          
    525            p.FSMC_AddressSetupTime = 3;
    526            p.FSMC_AddressHoldTime = 0;
    527            p.FSMC_DataSetupTime = 6;
    528            p.FSMC_BusTurnAroundDuration = 1;
    529            p.FSMC_CLKDivision = 0;
    530            p.FSMC_DataLatency = 0;
    531            p.FSMC_AccessMode = FSMC_AccessMode_A;
    532          
    533            FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM2;
    534            FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    535            FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_PSRAM;
    536            FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    537            FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    538            FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;  
    539            FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    540            FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    541            FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    542            FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    543            FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    544            FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    545            FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    546            FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    547            FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
    548          */
    549            
    550          }
    551          #endif /* DATA_IN_ExtSRAM */
    552          
    553          
    554          /**
    555            * @}
    556            */
    557          
    558          /**
    559            * @}
    560            */
    561            
    562          /**
    563            * @}
    564            */    
    565          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   SystemCoreClockUpdate
       8   SystemInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
      20  AHBPrescTable
          SystemCoreClock
      92  SystemCoreClockUpdate
     204  SystemInit

 
  20 bytes in section .data
 348 bytes in section .text
 
 348 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
