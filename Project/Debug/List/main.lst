###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      04/Mar/2013  20:11:52 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Platform\COMMON\SRC\main. #
#                    c                                                        #
#    Command line =  "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Platform\COMMON\SRC\main. #
#                    c" -D USE_STDPERIPH_DRIVER -D STM32F4XX -D               #
#                    USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN "C:\Tools\IAR  #
#                    Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_AP #
#                    P\Project\Debug\List\" -o "C:\Tools\IAR                  #
#                    Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_AP #
#                    P\Project\Debug\Obj\" --debug --endian=little            #
#                    --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config          #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I "C:\Tools\IAR       #
#                    Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_AP #
#                    P\Project\..\Platform\COMMON\INC\" -I "C:\Tools\IAR      #
#                    Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_AP #
#                    P\Project\..\Platform\TaeHa - ECS\INC\" -I               #
#                    "C:\Tools\IAR Systems\Embedded Workbench                 #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\..\Libraries\CMSI #
#                    S\Device\ST\STM32F4xx\Include\" -I "C:\Tools\IAR         #
#                    Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_AP #
#                    P\Project\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\"  #
#                    -Oh --use_c++_inline -I "C:\Tools\IAR Systems\Embedded   #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\List\main.l #
#                    st                                                       #
#    Object file  =  C:\Tools\IAR Systems\Embedded Workbench                  #
#                    6.5\WorkSpace\WL9F_Monitor_APP\Project\Debug\Obj\main.o  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\IAR Systems\Embedded Workbench 6.5\WorkSpace\WL9F_Monitor_APP\Platform\COMMON\SRC\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Templates/main.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   Main program body
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "main.h"
     30          
     31          /** @addtogroup Template_Project
     32            * @{
     33            */
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          #define MESSAGE1   "     STM32F4xx      " 
     38          #define MESSAGE2   " Device running on  " 
     39          #define MESSAGE3   " STM3240_41_G-EVAL  " 
     40          
     41          /* Private macro -------------------------------------------------------------*/
     42          /* Private variables ---------------------------------------------------------*/
     43          static __IO uint32_t TimingDelay;
     44          
     45          /* Private function prototypes -----------------------------------------------*/
     46          #ifdef __GNUC__
     47          /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     48             set to 'Yes') calls __io_putchar() */
     49          #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     50          #else
     51          #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     52          #endif /* __GNUC__ */
     53          
     54          /* Private functions ---------------------------------------------------------*/
     55          
     56          /**
     57            * @brief  Main program.
     58            * @param  None
     59            * @retval None
     60            */
     61          int main(void)
     62          {
     63          //  ++, kutelf, 130228
     64          #if 0
     65            RCC_ClocksTypeDef RCC_Clocks;
     66          
     67            /*!< At this stage the microcontroller clock setting is already configured, 
     68                 this is done through SystemInit() function which is called from startup
     69                 file (startup_stm32f4xx.s) before to branch to application main.
     70                 To reconfigure the default setting of SystemInit() function, refer to
     71                 system_stm32f4xx.c file
     72               */  
     73          
     74            /* SysTick end of count event each 10ms */
     75            RCC_GetClocksFreq(&RCC_Clocks);
     76            SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
     77          
     78            /* Initialize LEDs and LCD available on STM324xG-EVAL board *****************/
     79            STM_EVAL_LEDInit(LED1);
     80            STM_EVAL_LEDInit(LED2);
     81            STM_EVAL_LEDInit(LED3);
     82            STM_EVAL_LEDInit(LED4);
     83          
     84            /* Initialize the LCD */
     85            STM324xG_LCD_Init();
     86          
     87            /* Display message on STM324xG-EVAL LCD *************************************/
     88            /* Clear the LCD */ 
     89            LCD_Clear(White);
     90          
     91            /* Set the LCD Back Color */
     92            LCD_SetBackColor(Blue);
     93            /* Set the LCD Text Color */
     94            LCD_SetTextColor(White);
     95            LCD_DisplayStringLine(LINE(0), (uint8_t *)MESSAGE1);
     96            LCD_DisplayStringLine(LINE(1), (uint8_t *)MESSAGE2);
     97            LCD_DisplayStringLine(LINE(2), (uint8_t *)MESSAGE3);
     98          
     99            /* Turn on LEDs available on STM324xG-EVAL **********************************/
    100            STM_EVAL_LEDOn(LED1);
    101            STM_EVAL_LEDOn(LED2);
    102            STM_EVAL_LEDOn(LED3);
    103            STM_EVAL_LEDOn(LED4);
    104          #endif
    105          //  --, kutelf, 130228
    106            
    107            /* Add your application code here
    108               */
    109          
    110            /* Infinite loop */
    111            while (1)
    112            {
    113          	//	++, kutelf, 130228
    114            	#if 0
    115              /* Toggle LD4 */
    116              STM_EVAL_LEDToggle(LED4);
    117          
    118              /* Insert 50 ms delay */
    119              Delay(5);
    120          
    121              /* Toggle LD2 */
    122              STM_EVAL_LEDToggle(LED2);
    123          
    124              /* Insert 50 ms delay */
    125              Delay(5);
    126          
    127          	#else
    128          
    129          		//  Application Program은 아래의 함수부터 Start Point로 실행된다. 
    130                  //  SubMain... -> WL9F_Monitor_APP.c 
    131                  WL9F_Monitor_APP();
    132                  
    133                  //  WL9F_Monitor_APP()는 Infinite loop -> 만약 빠져나온다면, System은 Halt된 것이다. 
    134                  //  Halt가 된 후에는 메세지를 Debugging Message를 보낸 후에 break; 한다. 
    135                  //printf("\n\r WL9A_Monitor_APP() -> System halt");
    136                  
    137                  break;
    138          		
    139          	#endif
    140          	//	--, 130228, kutelf
    141            }
    142          }
    143          
    144          /**
    145            * @brief  Inserts a delay time.
    146            * @param  nTime: specifies the delay time length, in 10 ms.
    147            * @retval None
    148            */
    149          void Delay(__IO uint32_t nTime)
    150          {
    151            TimingDelay = nTime;
    152          
    153            while(TimingDelay != 0);
    154          }
    155          
    156          /**
    157            * @brief  Decrements the TimingDelay variable.
    158            * @param  None
    159            * @retval None
    160            */
    161          void TimingDelay_Decrement(void)
    162          {
    163            if (TimingDelay != 0x00)
    164            { 
    165              TimingDelay--;
    166            }
    167          }
    168          
    169          //  ++, kutelf, 130228
    170          /**
    171            * @brief  Initialize the IAP: Configure USART.
    172            * @param  None
    173            * @retval None
    174            */
    175          void DebugUART_Init(void)
    176          {
    177           USART_InitTypeDef USART_InitStructure;
    178          
    179            /* USART resources configuration (Clock, GPIO pins and USART registers) ----*/
    180            /* USART configured as follow:
    181                  - BaudRate = 115200 baud  
    182                  - Word Length = 8 Bits
    183                  - One Stop Bit
    184                  - No parity
    185                  - Hardware flow control disabled (RTS and CTS signals)
    186                  - Receive and transmit enabled
    187            */
    188            USART_InitStructure.USART_BaudRate = 115200;
    189            USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    190            USART_InitStructure.USART_StopBits = USART_StopBits_1;
    191            USART_InitStructure.USART_Parity = USART_Parity_No;
    192            USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    193            USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    194          
    195            STM_EVAL_COMInit(COM1, &USART_InitStructure);
    196          }
    197          
    198          /**
    199            * @brief  Inserts a usec delay time.
    200            * @param  nCount: specifies the delay time length, in milliseconds.
    201            * @retval None
    202            */
    203          void TimeDelay_usec(uint32_t nCount)
    204          {
    205              vu32 i, j;
    206          
    207              for (i = 0; i < nCount; i++)
    208                  for (j = 0; j < 5; j++);
    209          }
    210          
    211          /**
    212            * @brief  Inserts a msec delay time.
    213            * @param  nCount: specifies the delay time length, in milliseconds.
    214            * @retval None
    215            */
    216          void TimeDelay_msec(uint32_t nCount)
    217          {
    218              vu32 i, j;
    219          
    220          #if 0
    221              for (i = 0; i < nCount; i++)
    222                  for (j = 0; j < 5000; j++);
    223          #else
    224          	for (i = 0; i < nCount; i++)
    225                  for (j = 0; j < 17000; j++);
    226          #endif
    227          }
    228          
    229          /**
    230            * @brief  Retargets the C library printf function to the USART.
    231            * @param  None
    232            * @retval None
    233            */
    234          PUTCHAR_PROTOTYPE
    235          {
    236            /* Place your implementation of fputc here */
    237            /* e.g. write a character to the USART */
    238            USART_SendData(EVAL_COM1, (uint8_t) ch);
    239          
    240            /* Loop until the end of transmission */
    241            while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
    242            {}
    243          
    244            return ch;
    245          }
    246          
    247          //  --, kutelf, 130228
    248          
    249          #ifdef  USE_FULL_ASSERT
    250          
    251          /**
    252            * @brief  Reports the name of the source file and the source line number
    253            *   where the assert_param error has occurred.
    254            * @param  file: pointer to the source file name
    255            * @param  line: assert_param error line source number
    256            * @retval None
    257            */
    258          void assert_failed(uint8_t* file, uint32_t line)
    259          { 
    260            /* User can add his own implementation to report the file name and line number,
    261               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    262          
    263            /* Infinite loop */
    264            while (1)
    265            {
    266            }
    267          }
    268          #endif
    269          
    270          /**
    271            * @}
    272            */
    273          
    274          
    275          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   DebugUART_Init
        24   -> STM_EVAL_COMInit
       4   Delay
       8   TimeDelay_msec
       8   TimeDelay_usec
       0   TimingDelay_Decrement
       0   assert_failed
      16   fputc
        16   -> USART_GetFlagStatus
        16   -> USART_SendData
       8   main
         8   -> WL9F_Monitor_APP


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      40  DebugUART_Init
      18  Delay
      44  TimeDelay_msec
      38  TimeDelay_usec
       4  TimingDelay
      14  TimingDelay_Decrement
       2  assert_failed
      30  fputc
      10  main

 
   4 bytes in section .bss
 204 bytes in section .text
 
 204 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
