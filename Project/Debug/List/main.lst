###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      07/Apr/2015  14:09:39 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pla #
#                    tform\COMMON\SRC\main.c                                  #
#    Command line =  "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pl #
#                    atform\COMMON\SRC\main.c" -D USE_STDPERIPH_DRIVER -D     #
#                    STM32F4XX -D USE_STM324xG_EVAL -D USE_FULL_ASSERT -lcN   #
#                    "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pr #
#                    oject\Debug\List\" -o "C:\Tools\IAR                      #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\Debug\Ob #
#                    j\" --debug --endian=little --cpu=Cortex-M4 -e           #
#                    --fpu=VFPv4_sp --dlib_config "C:\Tools\IAR               #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monito #
#                    r_APP\Project\..\Platform\COMMON\INC\" -I "C:\Tools\IAR  #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\..\Platf #
#                    orm\TaeHa - ECS\INC\" -I "C:\Tools\IAR                   #
#                    Systems\Workspace_WL9F\WL_F_Monitor_APP\Project\..\Libra #
#                    ries\CMSIS\Device\ST\STM32F4xx\Include\" -I              #
#                    "C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pr #
#                    oject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\" -Oh  #
#                    --use_c++_inline -I "C:\Tools\IAR Systems\Embedded       #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pro #
#                    ject\Debug\List\main.lst                                 #
#    Object file  =  C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Pro #
#                    ject\Debug\Obj\main.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Tools\IAR Systems\Workspace_WL9F\WL_F_Monitor_APP\Platform\COMMON\SRC\main.c
      1          /**
      2            ******************************************************************************
      3            * @file    Project/STM32F4xx_StdPeriph_Templates/main.c 
      4            * @author  MCD Application Team
      5            * @version V1.0.1
      6            * @date    13-April-2012
      7            * @brief   Main program body
      8            ******************************************************************************
      9            * @attention
     10            *
     11            * <h2><center>&copy; COPYRIGHT 2012 STMicroelectronics</center></h2>
     12            *
     13            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     14            * You may not use this file except in compliance with the License.
     15            * You may obtain a copy of the License at:
     16            *
     17            *        http://www.st.com/software_license_agreement_liberty_v2
     18            *
     19            * Unless required by applicable law or agreed to in writing, software 
     20            * distributed under the License is distributed on an "AS IS" BASIS, 
     21            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     22            * See the License for the specific language governing permissions and
     23            * limitations under the License.
     24            *
     25            ******************************************************************************
     26            */
     27          
     28          /* Includes ------------------------------------------------------------------*/
     29          #include "main.h"
     30          
     31          /** @addtogroup Template_Project
     32            * @{
     33            */
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* Private define ------------------------------------------------------------*/
     37          #define MESSAGE1   "     STM32F4xx      " 
     38          #define MESSAGE2   " Device running on  " 
     39          #define MESSAGE3   " STM3240_41_G-EVAL  " 
     40          
     41          /* Private macro -------------------------------------------------------------*/
     42          /* Private variables ---------------------------------------------------------*/
     43          /* Private function prototypes -----------------------------------------------*/
     44          #ifdef __GNUC__
     45          /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     46             set to 'Yes') calls __io_putchar() */
     47          #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     48          #else
     49          #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     50          #endif /* __GNUC__ */
     51          
     52          /* Private functions ---------------------------------------------------------*/
     53          
     54          /**
     55            * @brief  Main program.
     56            * @param  None
     57            * @retval None
     58            */
     59          int main(void)
     60          {
     61          //  ++, kutelf, 130228
     62          #if 0
     63            RCC_ClocksTypeDef RCC_Clocks;
     64          
     65            /*!< At this stage the microcontroller clock setting is already configured, 
     66                 this is done through SystemInit() function which is called from startup
     67                 file (startup_stm32f4xx.s) before to branch to application main.
     68                 To reconfigure the default setting of SystemInit() function, refer to
     69                 system_stm32f4xx.c file
     70               */  
     71          
     72            /* SysTick end of count event each 10ms */
     73            RCC_GetClocksFreq(&RCC_Clocks);
     74            SysTick_Config(RCC_Clocks.HCLK_Frequency / 100);
     75          
     76            /* Initialize LEDs and LCD available on STM324xG-EVAL board *****************/
     77            STM_EVAL_LEDInit(LED1);
     78            STM_EVAL_LEDInit(LED2);
     79            STM_EVAL_LEDInit(LED3);
     80            STM_EVAL_LEDInit(LED4);
     81          
     82            /* Initialize the LCD */
     83            STM324xG_LCD_Init();
     84          
     85            /* Display message on STM324xG-EVAL LCD *************************************/
     86            /* Clear the LCD */ 
     87            LCD_Clear(White);
     88          
     89            /* Set the LCD Back Color */
     90            LCD_SetBackColor(Blue);
     91            /* Set the LCD Text Color */
     92            LCD_SetTextColor(White);
     93            LCD_DisplayStringLine(LINE(0), (uint8_t *)MESSAGE1);
     94            LCD_DisplayStringLine(LINE(1), (uint8_t *)MESSAGE2);
     95            LCD_DisplayStringLine(LINE(2), (uint8_t *)MESSAGE3);
     96          
     97            /* Turn on LEDs available on STM324xG-EVAL **********************************/
     98            STM_EVAL_LEDOn(LED1);
     99            STM_EVAL_LEDOn(LED2);
    100            STM_EVAL_LEDOn(LED3);
    101            STM_EVAL_LEDOn(LED4);
    102          #endif
    103          //  --, kutelf, 130228
    104            
    105            /* Add your application code here
    106               */
    107          
    108            /* Infinite loop */
    109            while (1)
    110            {
    111          	//	++, kutelf, 130228
    112            	#if 0
    113              /* Toggle LD4 */
    114              STM_EVAL_LEDToggle(LED4);
    115          
    116              /* Insert 50 ms delay */
    117              Delay(5);
    118          
    119              /* Toggle LD2 */
    120              STM_EVAL_LEDToggle(LED2);
    121          
    122              /* Insert 50 ms delay */
    123              Delay(5);
    124          
    125          	#else
    126          
    127          		//  Application Program은 아래의 함수부터 Start Point로 실행된다. 
    128                  //  SubMain... -> WL9F_Monitor_APP.c 
    129                  WL9FM_Monitor_APP();
    130                  
    131                  //  WL9F_Monitor_APP()는 Infinite loop -> 만약 빠져나온다면, System은 Halt된 것이다. 
    132                  //  Halt가 된 후에는 메세지를 Debugging Message를 보낸 후에 break; 한다. 
    133                  //printf("\n\r WL9FM_Monitor_APP() -> System halt");
    134                  
    135                  break;
    136          		
    137          	#endif
    138          	//	--, 130228, kutelf
    139            }
    140          }
    141          
    142          //  ++, kutelf, 130228
    143          /**
    144            * @brief  Initialize the IAP: Configure USART.
    145            * @param  None
    146            * @retval None
    147            */
    148          void DebugUART_Init(void)
    149          {
    150           USART_InitTypeDef USART_InitStructure;
    151          
    152            /* USART resources configuration (Clock, GPIO pins and USART registers) ----*/
    153            /* USART configured as follow:
    154                  - BaudRate = 115200 baud  
    155                  - Word Length = 8 Bits
    156                  - One Stop Bit
    157                  - No parity
    158                  - Hardware flow control disabled (RTS and CTS signals)
    159                  - Receive and transmit enabled
    160            */
    161            USART_InitStructure.USART_BaudRate = 115200;
    162            USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    163            USART_InitStructure.USART_StopBits = USART_StopBits_1;
    164            USART_InitStructure.USART_Parity = USART_Parity_No;
    165            USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    166            USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    167          
    168            STM_EVAL_COMInit(COM1, &USART_InitStructure);
    169          }
    170          
    171          /**
    172            * @brief  Retargets the C library printf function to the USART.
    173            * @param  None
    174            * @retval None
    175            */
    176          PUTCHAR_PROTOTYPE
    177          {
    178            /* Place your implementation of fputc here */
    179            /* e.g. write a character to the USART */
    180            USART_SendData(EVAL_COM1, (uint8_t) ch);
    181          
    182            /* Loop until the end of transmission */
    183            while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
    184            {}
    185          
    186            return ch;
    187          }
    188          
    189          //  --, kutelf, 130228
    190          
    191          #ifdef  USE_FULL_ASSERT
    192          
    193          /**
    194            * @brief  Reports the name of the source file and the source line number
    195            *   where the assert_param error has occurred.
    196            * @param  file: pointer to the source file name
    197            * @param  line: assert_param error line source number
    198            * @retval None
    199            */
    200          void assert_failed(uint8_t* file, uint32_t line)
    201          { 
    202            /* User can add his own implementation to report the file name and line number,
    203               ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    204          
    205            /* Infinite loop */
    206            while (1)
    207            {
    208            }
    209          }
    210          #endif
    211          
    212          /**
    213            * @}
    214            */
    215          
    216          
    217          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   DebugUART_Init
        24   -> STM_EVAL_COMInit
       0   assert_failed
      16   fputc
        16   -> USART_GetFlagStatus
        16   -> USART_SendData
       8   main
         8   -> WL9FM_Monitor_APP


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
      40  DebugUART_Init
       2  assert_failed
      30  fputc
      10  main

 
 86 bytes in section .text
 
 86 bytes of CODE memory

Errors: none
Warnings: none
