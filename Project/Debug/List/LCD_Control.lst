###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      29/Sep/2017  09:08:47 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pla #
#                    tform\TaeHa - ECS\SRC\LCD_Control.c                      #
#    Command line =  "D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pl #
#                    atform\TaeHa - ECS\SRC\LCD_Control.c" -D                 #
#                    USE_STDPERIPH_DRIVER -D STM32F4XX -D USE_STM324xG_EVAL   #
#                    -D USE_FULL_ASSERT -lcN D:\GIT\WLF_MONITOR\ECS_MS12_02_W #
#                    LF_MONITOR_STM32_APP\Project\Debug\List\ -o              #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pro #
#                    ject\Debug\Obj\ --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=VFPv4_sp --dlib_config "C:\Program Files        #
#                    (x86)\IAR Systems\Embedded Workbench                     #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pro #
#                    ject\..\Platform\COMMON\INC\ -I                          #
#                    "D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pr #
#                    oject\..\Platform\TaeHa - ECS\INC\" -I                   #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pro #
#                    ject\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include\ -I  #
#                    D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pro #
#                    ject\..\Libraries\STM32F4xx_StdPeriph_Driver\inc\ -Oh    #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pro #
#                    ject\Debug\List\LCD_Control.lst                          #
#    Object file  =  D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Pro #
#                    ject\Debug\Obj\LCD_Control.o                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\GIT\WLF_MONITOR\ECS_MS12_02_WLF_MONITOR_STM32_APP\Platform\TaeHa - ECS\SRC\LCD_Control.c
      1          /**
      2            ******************************************************************************
      3            * @file    LCD_Control.c 
      4            * @author  kutelf (kutelf@taeha.co.kr)
      5            * @version V1.0.0
      6            * @date    02/22/2013
      7            * @brief   LCD_Control.c module
      8            *
      9            * Project Name       : WL9F Monitor APP
     10            * Project Enviroment : IAREmbedded Workbench for ARM 6.5x 
     11            *                      STM32F407ZGT6 Firmware Library
     12            * Project Workspace  : WL9F_Monitor_APP
     13            * MCU Type           : STM32F407ZGT6
     14            *
     15            * TAEHA MECHATRONICS Co., Ltd (http://www.taeha.co.kr)				
     16            * ECS Division R&D Center. / Author by Young-Min Han (kutelf@taeha.co.kr)
     17            * 
     18            ******************************************************************************
     19            */ 
     20          
     21          /* Includes ------------------------------------------------------------------*/
     22          #include "WL9F_Monitor_APP.h"	
     23          
     24          /* Private typedef -----------------------------------------------------------*/
     25          /* Private define ------------------------------------------------------------*/
     26          /* Private macro -------------------------------------------------------------*/
     27          /* Private variables ---------------------------------------------------------*/
     28          
     29          /*
     30          	ChannelPulse = (uint16_t) (((uint32_t) 0 * (TimerPeriod - 1)) / 10);  	//    0% : 0
     31          	ChannelPulse = (uint16_t) (((uint32_t) 2 * (TimerPeriod - 1)) / 10);	//	 20% : 3327  
     32          	ChannelPulse = (uint16_t) (((uint32_t) 3 * (TimerPeriod - 1)) / 10); 	//	 30% : 4991 
     33          	ChannelPulse = (uint16_t) (((uint32_t) 4 * (TimerPeriod - 1)) / 10); 	//	 40% : 6655 
     34          	ChannelPulse = (uint16_t) (((uint32_t) 5 * (TimerPeriod - 1)) / 10);  	//	 50% : 8319
     35          	ChannelPulse = (uint16_t) (((uint32_t) 6 * (TimerPeriod - 1)) / 10);  	//	 60% : 9982
     36          	ChannelPulse = (uint16_t) (((uint32_t) 7 * (TimerPeriod - 1)) / 10);  	//	 70% : 11646
     37          	ChannelPulse = (uint16_t) (((uint32_t) 85 * (TimerPeriod - 1)) / 100);	//	 85% : 14142  
     38          	ChannelPulse = (uint16_t) (((uint32_t) 10 * (TimerPeriod - 1)) / 10);  //	100% : 16638
     39          */
     40          //	이 값을 설정할 때, 회로적으로 Inverting 된다.
     41          //	100% -> 0%로 동작한다.
     42          const uint16_t LCDBL_PWMLEVEL[MaxBackLightLEVEL] =  
     43          {	
     44          	16638, 	//  0 Step :   0%
     45              14142, 	//  1 Step :  20%
     46              11646, 	//  2 Step :  30%
     47              9982, 	//  3 Step :  40%
     48              8319, 	//  4 Step :  50%
     49              6655, 	//  5 Step :  60%
     50              4991, 	//  6 Step :  70%
     51              3327, 	//  7 Step :  85%
     52          	0, 		//  8 Step : 100%
     53          }; 
     54          
     55          //  ++, kutelf, 131007
     56          unsigned char Camera_Mode = 0xFF;
     57          unsigned char Camera_CheckFlag = 1;
     58          unsigned char Camera_CheckCnt = 0;
     59          extern unsigned char Camera_Green_Line = 0x0;
     60          extern unsigned char Old_Camera_Green_Line = 0x0;
     61          //  --, kutelf, 131007
     62          
     63          unsigned char AAVM_Mode = 0xFF;
     64          extern unsigned char AAVM_Icon_Index = 0xFF;
     65          extern unsigned char AAVM_Camera_Icon_Index = 0xFF;
     66          unsigned char AAVM_CheckFlag = 1;
     67          unsigned char AAVM_CheckCnt = 0;
     68          extern unsigned char AAVM_Menu_Flag = 0xFF;
     69          extern unsigned char AAVM_Warning_Front = 0xFF;
     70          extern unsigned char AAVM_Warning_Rear = 0xFF;
     71          extern unsigned char AAVM_Warning_Left = 0xFF;
     72          extern unsigned char AAVM_Warning_Right = 0xFF;
     73          /* Private function prototypes -----------------------------------------------*/
     74          /* Private functions ---------------------------------------------------------*/
     75          
     76          void LED_POWER_ONOFF(uint8_t BitData)
     77          {
     78              GPIO_WriteBit(LED_PORT, LED_CTRL, (BitAction) BitData);
     79          }
     80          
     81          void LCD_POWER_ONOFF(uint8_t BitData)
     82          {
     83              GPIO_WriteBit(LCDPWR_PORT, LCDPWR_CTRL, (BitAction) BitData);
     84          }
     85          
     86          void LCDBL_ONOFF(uint8_t BitData)
     87          {
     88              GPIO_WriteBit(LCDBL_PORT, LCDBL_CTRL, (BitAction) BitData);
     89          
     90          	WL9FM_LCDBL.OnOff = BitData;
     91          }
     92          
     93          /**
     94            * @brief  PWM Level Setting (LEVEL value를 받아서 설정한다.)
     95            * @param  pwm
     96            * @retval None
     97            */
     98          void LCDBL_PWM_LEVEL(uint8_t LEVEL)
     99          {
    100              //  PWM을 변경한 후에 항상 저장해 놓는다.
    101              WL9FM_LCDBL.PWM	  = LCDBL_PWMLEVEL[LEVEL];  
    102              WL9FM_LCDBL.LEVEL = LEVEL;
    103              LCDBL_PWM_CONTROL(WL9FM_LCDBL.PWM);
    104          }
    105          
    106          /**
    107            * @brief  PWM Value Setting (pwm value를 받아서, Pulse로 설정한다.)
    108            * @param  pwm
    109            * @retval None
    110            */
    111          void LCDBL_PWM_CONTROL(uint16_t PWM_VALUE)
    112          {
    113          	TIM_OCInitTypeDef  TIM_OCInitStructure;
    114          
    115          	TIM_OCInitStructure.TIM_OCMode 			= TIM_OCMode_PWM2;
    116          	TIM_OCInitStructure.TIM_OutputState 	= TIM_OutputState_Enable;
    117          	TIM_OCInitStructure.TIM_OutputNState 	= TIM_OutputNState_Enable;
    118          	TIM_OCInitStructure.TIM_OCPolarity 		= TIM_OCPolarity_Low;
    119          	TIM_OCInitStructure.TIM_OCNPolarity 	= TIM_OCNPolarity_High;
    120          	TIM_OCInitStructure.TIM_OCIdleState 	= TIM_OCIdleState_Set;
    121          	TIM_OCInitStructure.TIM_OCNIdleState 	= TIM_OCIdleState_Reset;
    122          
    123          	//	Channel 1 Configuration in PWM mode
    124          	TIM_OCInitStructure.TIM_Pulse = PWM_VALUE;
    125          	TIM_OC1Init(TIM8, &TIM_OCInitStructure);					
    126          
    127          	// 	TIM8 counter enable
    128          	TIM_Cmd(TIM8, ENABLE);			
    129          
    130          	//	TIM8 Main Output Enable
    131          	TIM_CtrlPWMOutputs(TIM8, ENABLE);
    132          }
    133          
    134          void LCDBL_Init(void)
    135          {
    136          	DebugMsg_printf("++ LCD_Control_Init, LCDBL(TIM8 : PWM), ONOFF Initialize START\r\n");
    137          
    138          	/* TIM8 Configuration ---------------------------------------------------
    139          	Generate 7 PWM signals with 4 different duty cycles:
    140          	TIM8 input clock (TIM8CLK) is set to 2 * APB2 clock (PCLK2), since APB2 
    141          	prescaler is different from 1.   
    142          	TIM8CLK = 2 * PCLK2  
    143          	PCLK2 = HCLK / 2 
    144          	=> TIM8CLK = 2 * (HCLK / 2) = HCLK = SystemCoreClock
    145          	TIM8CLK = SystemCoreClock, Prescaler = 0, TIM8 counter clock = SystemCoreClock
    146          	SystemCoreClock is set to 168 MHz for STM32F4xx devices
    147          
    148          	The objective is to generate 7 PWM signal at 17.57 KHz:
    149          	- TIM8_Period = (SystemCoreClock / 17570) - 1
    150          	The channel 1 and channel 1N duty cycle is set to 50%
    151          	The channel 2 and channel 2N duty cycle is set to 37.5%
    152          	The channel 3 and channel 3N duty cycle is set to 25%
    153          	The channel 4 duty cycle is set to 12.5%
    154          	The Timer pulse is calculated as follows:
    155          	- ChannelxPulse = DutyCycle * (TIM8_Period - 1) / 100
    156             
    157             Note: 
    158              SystemCoreClock variable holds HCLK frequency and is defined in system_stm32f4xx.c file.
    159              Each time the core clock (HCLK) changes, user had to call SystemCoreClockUpdate()
    160              function to update SystemCoreClock variable value. Otherwise, any configuration
    161              based on this variable will be incorrect. 
    162            ----------------------------------------------------------------------- */
    163            
    164            	TIM_TimeBaseInitTypeDef  	TIM_TimeBaseStructure;
    165            	TIM_OCInitTypeDef  			TIM_OCInitStructure;
    166          
    167          	uint16_t TimerPeriod  = 0;
    168          	
    169          	//	PWM Frequency : 500Hz (Mitsubishi 7" LCD)
    170          	TimerPeriod = (SystemCoreClock / 250 ) - 1;
    171          #if 0
    172          	ChannelPulse = (uint16_t) (((uint32_t) 0 * (TimerPeriod - 1)) / 10);  	//    0% : 0
    173          	ChannelPulse = (uint16_t) (((uint32_t) 2 * (TimerPeriod - 1)) / 10);	//	 20% : 3327  
    174          	ChannelPulse = (uint16_t) (((uint32_t) 3 * (TimerPeriod - 1)) / 10); 	//	 30% : 4991 
    175          	ChannelPulse = (uint16_t) (((uint32_t) 4 * (TimerPeriod - 1)) / 10); 	//	 40% : 6655 
    176          	ChannelPulse = (uint16_t) (((uint32_t) 5 * (TimerPeriod - 1)) / 10);  	//	 50% : 8319
    177          	ChannelPulse = (uint16_t) (((uint32_t) 6 * (TimerPeriod - 1)) / 10);  	//	 60% : 9982
    178          	ChannelPulse = (uint16_t) (((uint32_t) 7 * (TimerPeriod - 1)) / 10);  	//	 70% : 11646
    179          	ChannelPulse = (uint16_t) (((uint32_t) 85 * (TimerPeriod - 1)) / 100);	//	 85% : 14142  
    180          	ChannelPulse = (uint16_t) (((uint32_t) 10 * (TimerPeriod - 1)) / 10);  //	100% : 16638
    181          #endif
    182          
    183              //  LCDBL GPIO는 System_Init.c 에서 설정
    184          #if 0
    185          	GPIO_InitTypeDef GPIO_InitStructure;
    186          
    187          	//	LCDBL_PWM -> PWM
    188          	GPIO_InitStructure.GPIO_Pin   = LCDBL_PWM;
    189          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_AF;   
    190          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    191          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    192          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    193          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    194          	GPIO_PinAFConfig(LCDBL_PORT, LCDBL_PWM_PinSource, GPIO_AF_TIM8);
    195          
    196          	//  LCDBL_CTRL -> GPIO Output
    197          	GPIO_InitStructure.GPIO_Pin   = LCDBL_CTRL;
    198          	GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_OUT;   
    199          	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    200          	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_UP;
    201          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    202          	GPIO_Init(LCDBL_PORT, &GPIO_InitStructure);
    203          
    204          #endif
    205          	
    206          	TIM_TimeBaseStructure.TIM_Prescaler         = 16;
    207          	TIM_TimeBaseStructure.TIM_CounterMode 	    = TIM_CounterMode_Up;
    208          	TIM_TimeBaseStructure.TIM_Period 			= TimerPeriod;
    209          	TIM_TimeBaseStructure.TIM_ClockDivision     = 0;
    210          	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
    211          
    212          	TIM_TimeBaseInit(TIM8, &TIM_TimeBaseStructure);
    213          
    214          	TIM_OCInitStructure.TIM_OCMode 			= TIM_OCMode_PWM2;
    215          	TIM_OCInitStructure.TIM_OutputState 	= TIM_OutputState_Enable;
    216          	TIM_OCInitStructure.TIM_OutputNState 	= TIM_OutputNState_Enable;
    217          	TIM_OCInitStructure.TIM_OCPolarity 		= TIM_OCPolarity_Low;
    218          	TIM_OCInitStructure.TIM_OCNPolarity 	= TIM_OCNPolarity_High;
    219          	TIM_OCInitStructure.TIM_OCIdleState 	= TIM_OCIdleState_Set;
    220          	TIM_OCInitStructure.TIM_OCNIdleState 	= TIM_OCIdleState_Reset;
    221          
    222          	//	Channel 1 Configuration in PWM mode
    223          	TIM_OCInitStructure.TIM_Pulse = LCDBL_PWMLEVEL[DefaultLCDBLLEVEL];
    224          
    225          	TIM_OC1Init(TIM8, &TIM_OCInitStructure);
    226          
    227          	// 	TIM8 counter enable
    228          	TIM_Cmd(TIM8, ENABLE);
    229          
    230          	// 	TIM8 Main Output Enable
    231          	TIM_CtrlPWMOutputs(TIM8, ENABLE);		
    232          
    233          	DebugMsg_printf("-- LCD_Control_Init, LCDBL(TIM8 : PWM), ONOFF Initialize END\r\n");
    234          
    235          	TimeDelay_msec(1000); 
    236          
    237          	WL9FM_LCDBL.LEVEL = DefaultLCDBLLEVEL;
    238          	WL9FM_LCDBL.PWM   = LCDBL_PWMLEVEL[DefaultLCDBLLEVEL];
    239          }
    240          
    241          void LCD_Display_Change(uint8_t BitData)
    242          {
    243          	//	Display Buffer를 변경하는 것이기 때문에
    244          	//	표시하고자 하는 것을 하기 전에, 다른 것을 먼저 High-Z 상태로 만든다. 
    245          	if (BitData == STM32F4_DISPLAY)
    246          	{
    247          	    GPIO_WriteBit(LCD_EXYNOS_PORT, LCD_EXYNOS, Bit_RESET);
    248          		TimeDelay_msec(10); 
    249          	    GPIO_WriteBit(LCD_STM32_PORT , LCD_STM32 , Bit_SET);
    250          	}
    251          	else
    252          	{
    253          	    GPIO_WriteBit(LCD_STM32_PORT , LCD_STM32 , Bit_RESET);
    254          		TimeDelay_msec(10); 
    255          		GPIO_WriteBit(LCD_EXYNOS_PORT, LCD_EXYNOS, Bit_SET);
    256          	}
    257          }
    258          
    259          //  ++, kutelf, 131007
    260          //	카메라 동작 모드 일 경우, 3초 마다 한번씩 각 채널의
    261          //	상태를 체크하여, Video가 없으면 No Video 띄워준다.
    262          void cam_mode_check(void)
    263          {
    264          	CheckCamera_Input(Camera_Mode);		
    265          }
    266          	
    267          void cam_mode_change(u8 Mode)
    268          {
    269          	if(Mode == 0xFF)
    270          	{
    271          		LCD_Display_Change(EXYNOS_DISPLAY);
    272          	}
    273          	else
    274          	{
    275          		CameraMode(Mode, 1);
    276          		LCD_Display_Change(STM32F4_DISPLAY);
    277          	}
    278          	
    279          	
    280          }
    281          // ++, 160812 cjg
    282          void aavm_mode_check(void)
    283          {
    284                    CheckAAVM_Input(AAVM_Mode);
    285          }
    286          void aavm_mode_change(u8 Mode)
    287          {
    288                    if(Mode == 0xFF)
    289                    {
    290                            LCD_Display_Change(EXYNOS_DISPLAY);
    291                    }
    292                    else
    293                    {
    294                            AAVMMode(Mode, 1);
    295                            LCD_Display_Change(STM32F4_DISPLAY);
    296                    }
    297          }
    298          
    299          // --, 160812 cjg
    300          
    301          
    302          
    303          
    304          //  --, kutelf, 131007
    305          
    306          /**\
    307            * @brief  None
    308            * @param  None
    309            * @retval None
    310            */
    311          void LCD_Control_Init(void)
    312          {
    313          	TimeDelay_msec(3000); 
    314          	LCD_Display_Change(EXYNOS_DISPLAY);
    315          	//LCD_Display_Change(STM32F4_DISPLAY);
    316          	LCDBL_Init();	
    317          	LCDBL_ONOFF(LCDBL_ON);	//  LCDBL Power On!!!
    318          			//	LCDBL PWM 설정 
    319          	
    320          	//LCD_Display_Change(STM32F4_DISPLAY);
    321          }
    322          
    323          /*********(C) COPYRIGHT 2010 TaeHa Mechatronics Co., Ltd. *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   LCDBL_Init
        48   -> TIM_Cmd
        48   -> TIM_CtrlPWMOutputs
        48   -> TIM_OC1Init
        48   -> TIM_TimeBaseInit
        48   -> TimeDelay_msec
       8   LCDBL_ONOFF
         8   -> GPIO_WriteBit
      32   LCDBL_PWM_CONTROL
        32   -> TIM_Cmd
        32   -> TIM_CtrlPWMOutputs
        32   -> TIM_OC1Init
       0   LCDBL_PWM_LEVEL
         0   -> LCDBL_PWM_CONTROL
       8   LCD_Control_Init
         8   -> GPIO_WriteBit
         8   -> LCDBL_Init
         8   -> LCD_Display_Change
         8   -> TimeDelay_msec
      16   LCD_Display_Change
         0   -> GPIO_WriteBit
        16   -> GPIO_WriteBit
        16   -> TimeDelay_msec
       0   LCD_POWER_ONOFF
         0   -> GPIO_WriteBit
       0   LED_POWER_ONOFF
         0   -> GPIO_WriteBit
       8   aavm_mode_change
         8   -> AAVMMode
         0   -> LCD_Display_Change
       0   aavm_mode_check
         0   -> CheckAAVM_Input
       8   cam_mode_change
         8   -> CameraMode
         0   -> LCD_Display_Change
       0   cam_mode_check
         0   -> CheckCamera_Input


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable9
       4  ??DataTable9_1
       4  ??DataTable9_2
       4  ??DataTable9_3
       4  ??DataTable9_4
       4  ??DataTable9_5
       4  ??DataTable9_6
       4  ??DataTable9_7
       6  ?Subroutine0
       1  AAVM_Camera_Icon_Index
       1  AAVM_CheckCnt
       1  AAVM_CheckFlag
       1  AAVM_Icon_Index
       1  AAVM_Menu_Flag
       1  AAVM_Mode
       1  AAVM_Warning_Front
       1  AAVM_Warning_Left
       1  AAVM_Warning_Rear
       1  AAVM_Warning_Right
       1  Camera_CheckCnt
       1  Camera_CheckFlag
       1  Camera_Green_Line
       1  Camera_Mode
     146  LCDBL_Init
      20  LCDBL_ONOFF
      20  LCDBL_PWMLEVEL
      80  LCDBL_PWM_CONTROL
      16  LCDBL_PWM_LEVEL
      38  LCD_Control_Init
      72  LCD_Display_Change
      10  LCD_POWER_ONOFF
      12  LED_POWER_ONOFF
       1  Old_Camera_Green_Line
      18  aavm_mode_change
       8  aavm_mode_check
      20  cam_mode_change
       8  cam_mode_check

 
   4 bytes in section .bss
  11 bytes in section .data
 506 bytes in section .text
 
 506 bytes of CODE memory
  15 bytes of DATA memory

Errors: none
Warnings: none
